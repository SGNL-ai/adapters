"""
An account descriptor provides data associated with an external entity source,
such as an entry in an identity management system.
"""
interface AccountDescriptor {
  """
  If `true`, the account no longer exists; if `false`, the account is currently enabled.
  """
  archived: Boolean!
  creationTime: DateTime!

  """
  The data source of this account. Together with the entity type, the data
  source determines the account descriptor subtype to be used.
  """
  dataSource: DataSource!
  description: String

  """
  If `true`, the account is currently enabled; if `false`, the account no longer exists.
  """
  enabled: Boolean!
}

type AccountDescriptorImpl implements AccountDescriptor {
  archived: Boolean!
  creationTime: DateTime!
  dataSource: DataSource!
  description: String
  enabled: Boolean!
}

type AccountOperatorsAdminRole implements OperatorLevelAdminRole & AdminAccountRole & EntityRole {
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  builtin: Boolean!
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

"""
A specialized `AccountDescriptor` for Active Directory accounts (users and endpoints).
"""
type ActiveDirectoryAccountDescriptor implements ActivityParticipatingAccountDescriptor & ActiveDirectorySecurityPrincipalAccountDescriptor & UserAccountDescriptor & AccountDescriptor & ActiveDirectoryEntryDescriptor {
  """
  If `true`, the account no longer exists; if `false`, the account is currently enabled.
  """
  archived: Boolean!
  cn: String
  consistencyGuid: UUID
  containingEntities: [EntityContainerEntity!]!

  """
  List of Active Directory group entities this entity is a direct member of. If
  you wish to also list indirect ancestor groups, project
  `flattenedContainingGroupEntities` instead.
  """
  containingGroupEntities: [EntityContainerEntity!]!
  containingGroupIds: [UUID!]!

  """
  The creation time of the account.
  """
  creationTime: DateTime!

  """
  The data source of this account. Together with the entity type, the data
  source determines the account descriptor subtype to be used.
  """
  dataSource: DataSource!

  """
  The department that the account belongs to.
  """
  department: String
  description: String

  """
  The entry's distinguished name (DN) in LDAP.
  """
  dn: String!

  """
  The Active Directory domain under which the entry is defined.
  """
  domain: String

  """
  If `true`, the account is currently enabled; if `false`, the account no longer exists.
  """
  enabled: Boolean!

  """
  The account's [expiration time](https://docs.microsoft.com/en-us/windows/desktop/adschema/a-accountexpires).
  """
  expirationTime: DateTime

  """
  List of Active Directory group entities this entity is a member of. If you
  wish to only list direct ancestor groups, project `containingGroupEntities` instead.
  """
  flattenedContainingGroupEntities: [EntityContainerEntity!]!
  flattenedContainingGroupIds: [UUID!]!
  lastUpdateTime: DateTime!

  """
  If the account is currently locked out, this attribute contains the date and time when the lockout occurred.
  """
  lockoutTime: DateTime

  """
  The date and time of the account's latest recorded network activity. This
  takes into account both the data reported by external sources and the actual
  traffic seen by the system.
  """
  mostRecentActivity: DateTime

  """
  The account's [Object-Guid attribute](https://docs.microsoft.com/en-us/windows/desktop/adschema/a-objectguid).
  """
  objectGuid: UUID!

  """
  The account's [Object-Sid attribute](https://docs.microsoft.com/en-us/windows/desktop/adschema/a-objectsid).
  """
  objectSid: String!

  """
  If the account is part of an Active Directory Organizational Unit, this
  attribute represents its [name in canonical format](https://docs.microsoft.com/en-us/windows/desktop/adschema/a-canonicalname/).
  """
  ou: String

  """
  Comprehensive information about the account's password, except the password itself.
  """
  passwordAttributes: ActiveDirectoryPasswordAttributes

  """
  The account's [SAM account name](https://docs.microsoft.com/en-us/windows/desktop/adschema/a-samaccountname).
  """
  samAccountName: String!

  """
  The account's [Service Principal Names (SPNs)](https://docs.microsoft.com/en-us/windows/desktop/ad/service-principal-names).
  """
  servicePrincipalNames: [String!]!
  title: String

  """
  The account's [User Principal Name (UPN)](https://docs.microsoft.com/en-us/windows/desktop/adschema/a-userprincipalname).
  """
  upn: String
  userAccountControl: Int!

  """
  The list of property [User Account Control Flags](https://learn.microsoft.com/en-us/troubleshoot/windows-server/active-directory/useraccountcontrol-manipulate-account-properties#list-of-property-flags).
  """
  userAccountControlFlags: [UserAccountControlFlags!]
}

"""
A specialized abstract account descriptor for all Active Directory container sources.
"""
interface ActiveDirectoryContainerAccountDescriptor {
  """
  If `true`, the account no longer exists; if `false`, the account is currently enabled.
  """
  archived: Boolean!
  cn: String

  """
  The creation time of the container.
  """
  creationTime: DateTime!

  """
  The data source of this account. Together with the entity type, the data
  source determines the account descriptor subtype to be used.
  """
  dataSource: DataSource!
  description: String

  """
  The entry's distinguished name (DN) in LDAP.
  """
  dn: String!

  """
  The Active Directory domain under which the entry is defined.
  """
  domain: String

  """
  If `true`, the account is currently enabled; if `false`, the account no longer exists.
  """
  enabled: Boolean!
  lastUpdateTime: DateTime!

  """
  The container's [Object-Guid attribute](https://docs.microsoft.com/en-us/windows/desktop/adschema/a-objectguid).
  """
  objectGuid: UUID!

  """
  If the container is part of an Active Directory Organizational Unit, this
  attribute represents its [name in canonical format](https://docs.microsoft.com/en-us/windows/desktop/adschema/a-canonicalname).
  """
  ou: String
}

"""
A specialized abstract `AccountDescriptor` interface for Active Directory LDAP entry sources.
"""
interface ActiveDirectoryEntryDescriptor {
  """
  If `true`, the account no longer exists; if `false`, the account is currently enabled.
  """
  archived: Boolean!
  cn: String
  creationTime: DateTime!

  """
  The data source of this account. Together with the entity type, the data
  source determines the account descriptor subtype to be used.
  """
  dataSource: DataSource!
  description: String

  """
  The entry's distinguished name (DN) in LDAP.
  """
  dn: String!

  """
  The Active Directory domain under which the entry is defined.
  """
  domain: String

  """
  If `true`, the account is currently enabled; if `false`, the account no longer exists.
  """
  enabled: Boolean!
  lastUpdateTime: DateTime!
}

"""
A specialized `AccountDescriptor` for Active Directory groups.
"""
type ActiveDirectoryGroupAccountDescriptor implements ActiveDirectoryContainerAccountDescriptor & ActiveDirectorySecurityPrincipalAccountDescriptor & ActiveDirectoryEntryDescriptor & AccountDescriptor {
  """
  If `true`, the account no longer exists; if `false`, the account is currently enabled.
  """
  archived: Boolean!
  cn: String

  """
  List of Active Directory group entities this entity is a direct member of. If
  you wish to also list indirect ancestor groups, project
  `flattenedContainingGroupEntities` instead.
  """
  containingGroupEntities: [EntityContainerEntity!]!
  containingGroupIds: [UUID!]!

  """
  The creation time of the container.
  """
  creationTime: DateTime!

  """
  The data source of this account. Together with the entity type, the data
  source determines the account descriptor subtype to be used.
  """
  dataSource: DataSource!
  description: String

  """
  The entry's distinguished name (DN) in LDAP.
  """
  dn: String!

  """
  The Active Directory domain under which the entry is defined.
  """
  domain: String

  """
  If `true`, the account is currently enabled; if `false`, the account no longer exists.
  """
  enabled: Boolean!

  """
  List of Active Directory group entities this entity is a member of. If you
  wish to only list direct ancestor groups, project `containingGroupEntities` instead.
  """
  flattenedContainingGroupEntities: [EntityContainerEntity!]!
  flattenedContainingGroupIds: [UUID!]!
  lastUpdateTime: DateTime!
  localGroup: Boolean!

  """
  The container's [Object-Guid attribute](https://docs.microsoft.com/en-us/windows/desktop/adschema/a-objectguid).
  """
  objectGuid: UUID!

  """
  The account's [Object-Sid attribute](https://docs.microsoft.com/en-us/windows/desktop/adschema/a-objectsid).
  """
  objectSid: String!

  """
  If the container is part of an Active Directory Organizational Unit, this
  attribute represents its [name in canonical format](https://docs.microsoft.com/en-us/windows/desktop/adschema/a-canonicalname).
  """
  ou: String

  """
  The account's [SAM-Account-Name attribute](https://docs.microsoft.com/en-us/windows/desktop/adschema/a-samaccountname).
  """
  samAccountName: String!
  securityGroup: Boolean!
}

interface ActiveDirectoryGroupRole {
  builtin: Boolean!
  scope: ActiveDirectoryGroupScope!
}

type ActiveDirectoryGroupRoleImpl implements ActiveDirectoryGroupRole {
  builtin: Boolean!
  scope: ActiveDirectoryGroupScope!
}

enum ActiveDirectoryGroupScope {
  Universal
  Global
  DomainLocal
}

type ActiveDirectoryPasswordAttributes implements PasswordAttributes {
  aged: Boolean!
  discoveryDate: DateTime

  """
  A descriptor object for the password policy currently applied to the subject
  account, which may be either the Default Password Policy for its domain or a
  Fine Grained Password Policy.

  ```graphql
  #### Query effective policy for privileged users
  {
      entities(roles: [AdminAccountRole]
               types: [USER]
               archived: false
               first: 5
               sortKey: RISK_SCORE
               sortOrder: DESCENDING)
      {
          nodes {
              primaryDisplayName
              secondaryDisplayName
              accounts
              {
                  ... on ActiveDirectoryAccountDescriptor
                  {
                      passwordAttributes
                      {
                          lastChange
                          strength
                          effectivePolicy {
                              # Source info
                              sourceType
                              displayName

                              # Policy rank
                              policyRank
                              policyRankLevel

                              # Policy details
                              complexityEnabled
                              minLength
                              minAge
                              maxAge
                              savedPreviousPasswordCount
                              reversibleEncryptionEnabled
                              failedAuthenticationAttemptsLockoutThreshold
                              lockoutDuration
                              lockoutObservationWindow
                          }

                      }
                  }
              }
          }
      }
  }
  ```
  """
  effectivePolicy: AppliedActiveDirectoryPasswordPolicy
  exposed: Boolean!
  lastChange: DateTime
  mayExpire: Boolean!
  strength: PasswordStrength!
}

enum ActiveDirectoryPasswordPolicySourceType {
  DOMAIN_POLICY
  FINE_GRAINED_POLICY
  UNKNOWN
}

"""
A specialized abstract `AccountDescriptor` interface for Active Directory LDAP entry sources.
"""
interface ActiveDirectorySecurityPrincipalAccountDescriptor {
  """
  If `true`, the account no longer exists; if `false`, the account is currently enabled.
  """
  archived: Boolean!
  cn: String
  creationTime: DateTime!

  """
  The data source of this account. Together with the entity type, the data
  source determines the account descriptor subtype to be used.
  """
  dataSource: DataSource!
  description: String

  """
  The entry's distinguished name (DN) in LDAP.
  """
  dn: String!

  """
  The Active Directory domain under which the entry is defined.
  """
  domain: String

  """
  If `true`, the account is currently enabled; if `false`, the account no longer exists.
  """
  enabled: Boolean!
  lastUpdateTime: DateTime!

  """
  The account's [Object-Guid attribute](https://docs.microsoft.com/en-us/windows/desktop/adschema/a-objectguid).
  """
  objectGuid: UUID!

  """
  The account's [Object-Sid attribute](https://docs.microsoft.com/en-us/windows/desktop/adschema/a-objectsid).
  """
  objectSid: String!

  """
  The account's [SAM-Account-Name attribute](https://docs.microsoft.com/en-us/windows/desktop/adschema/a-samaccountname).
  """
  samAccountName: String!
}

"""
An abstract `AccountDescriptor` interface common to all accounts that participate in the network activity.
"""
interface ActivityParticipatingAccountDescriptor {
  """
  If `true`, the account no longer exists; if `false`, the account is currently enabled.
  """
  archived: Boolean!
  creationTime: DateTime!

  """
  The data source of this account. Together with the entity type, the data
  source determines the account descriptor subtype to be used.
  """
  dataSource: DataSource!
  description: String

  """
  If `true`, the account is currently enabled; if `false`, the account no longer exists.
  """
  enabled: Boolean!

  """
  The date and time of the account's latest recorded network activity. This
  takes into account both the data reported by external sources and the actual
  traffic seen by the system.
  """
  mostRecentActivity: DateTime
}

"""
An abstract `Entity` interface common to all entities that participate in the
network activity, as opposed to entities defined by their place in the
organization structure.
"""
interface ActivityParticipatingEntity {
  """
  A list of external, elementary account descriptors used to construct this
  entity. For instance, the list for a `UserEntity` which is backed by an LDAP
  domain entry and an IDAAS account will include
  `ActiveDirectoryAccountDescriptor` and `SsoUserAccountDescriptor` entries.
  """
  accounts: [AccountDescriptor!]!

  """
  If `true`, the system considers this entity *archived*. It means that the entity no longer exists and can only be viewed.

  For entities derived with external data sources, such as LDAP users, an entity
  is considered archived if its primary account (see `Entity:primaryAccount` is
  deleted. Entities not associated with any external sources, such as unmanaged
  endpoints, may also be archived based on a long period of inactivity. Except
  the `archived` attribute itself, no other attribute of an archived entity is
  updated. The attributes of an archived entity represent the state of the
  entity at the time when it was archived.
  """
  archived: Boolean!

  """
  A list of associations of various types (see `Association:bindingType`) that
  this entity has with other objects, most commonly with other entities. For
  example, a `UserEntity` may have an `OWNERSHIP` association with an
  `EndpointEntity`, alongside a `GEO_LOCATION` association with a `GeoLocation`.
  The semantics for each association type are detailed in `BindingType`.
  """
  associations(bindingTypes: [BindingType!]): [Association!]!
  creationTime: DateTime!

  """
  The date and time of the entity's earliest recorded network activity. This
  takes into account both the data reported by external sources and the actual
  traffic seen by the system.
  """
  earliestSeenTraffic: DateTime

  """
  The entity's unique identifier.
  """
  entityId: UUID!
  hasADDomainAdminRole: Boolean

  """
  A convenience function that checks the `roles` field for the existence of at least one role matching the criteria.

  ```graphql
  {
    entities(minRiskScoreSeverity: MEDIUM, archived: false, first: 5)
    {
      nodes
      {
        type
        primaryDisplayName
        ... on UserEntity
        {
          isHuman: hasRole(type: HumanUserAccountRole)
          isProgrammatic: hasRole(type: ProgrammaticUserAccountRole)
          isAdmin: hasRole(type: AdminAccountRole)
        }
        ... on EndpointEntity
        {
          isWorkstation: hasRole(type: WorkstationRole)
          isServer: hasRole(type: WorkstationRole)
        }
        isManuallyClassified: hasRole(confirmed: true)
      }
    }
  }
  ```
  """
  hasRole(
    confirmed: Boolean
    fullPath: String
    probability: Float
    type: EntityRoleType
  ): Boolean

  """
  If `true`, the entity is inactive. An entity is considered inactive after 21
  days since its latest recorded network activity (see `mostRecentActivity`).
  """
  inactive: Boolean!

  """
  If `true`, the system has gathered enough information to consider this entity *learned*.
  """
  learned: Boolean!

  """
  For marked entities, this is set to the last time the entity was marked.
  """
  markTime: DateTime

  """
  The date and time of the entity's latest recorded network activity. This takes
  into account both the data reported by external sources and the actual traffic
  seen by the system.
  """
  mostRecentActivity: DateTime

  """
  Query open incidents for this entity.
  """
  openIncidents(
    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Query by any value of `AlertType`. At least one of the alerts for an
    incident should be of any of the given alert types for the incident to match.
    """
    alertTypes: [AlertType!]

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Query for incidents created on or after the specific date.
    """
    createdAfter: DateTimeInput

    """
    Query for incidents created before the specific date.
    """
    createdBefore: DateTimeInput

    """
    Query by the attributes of any entity involved in a `compromisedEntities` incident (see `Incident:compromisedEntities`).
    """
    entityQuery: EntityQueryInput

    """
    Query up to the first specified number of entries.
    """
    first: Int

    """
    Query up to the last specified number of entries.
    """
    last: Int

    """
    Query by any value of `Incident:lifeCycleStage`.
    """
    lifeCycleStages: [IncidentLifeCycleStage!]
    nameSearch: String
    patternIds: [Int!]

    """
    Query by any value of `Incident:severity`.
    """
    severities: [IncidentSeverity!]

    """
    Use the specified key as the primary sort-key to sort the results by.
    """
    sortKey: IncidentSortKey = INCIDENT_ID

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING

    """
    Query by any value of `Incident:type`.
    """
    types: [IncidentType!]

    """
    Query for incidents updated on or after the specific date.
    """
    updatedAfter: DateTimeInput

    """
    Query for incidents updated before the specific date.
    """
    updatedBefore: DateTimeInput
  ): IncidentConnection
    @deprecated(
      reason: "\"openIncidents\" is deprecated and will be removed in a future release"
    )

  """
  The primary display name used to represent this entity in user-facing data.

  The primary display name is typically shorter than the secondary display name,
  but is much less likely to be unique across the organization or network. For
  further details on the semantics, see the documentation for specific types.
  """
  primaryDisplayName: String!

  """
  A list of risk factors contributing to the overall risk of this entity, sorted
  by `RiskFactorContribution:score` in descending order.
  """
  riskFactors(types: [RiskFactorType!]): [EntityRiskFactor!]!

  """
  The entity's risk score represented as a number from 0 (no or unknown risk) through 1 (maximum risk).
  """
  riskScore: ZeroToOneNumber!

  """
  The entity's risk score derived from `riskScore`.
  """
  riskScoreSeverity: ScoreSeverity!

  """
  A list of roles fulfilled by this entity, each defining the entity's classification or organizational-function aspect.

  For example, a `UserEntity` representing an *account operator* in an Active
  Directory domain should have an `AccountOperatorsAdminRole` entry on this
  list. Should the system later learn this privileged account is used by a
  script rather than a human, its associated entity will also have a
  `ProgrammaticUserAccountRole`. Similarly, when the system learns that some
  `EndpointEntity` belongs to a VDI cluster, it tags it with a
  `VdiEndpointRole`.The model for roles is hierarchical. For example, the
  aforementioned `AccountOperatorsAdminRole` is a specialization of
  `OperatorLevelAdminRole`, which by itself is a specialization of
  `AdminAccountRole`.

  When roles are queried, this hierarchy is always taken into account.
  Therefore, querying an entity about the existence of a role also implies that
  all of its direct and indirect specializations will be queried too. This
  hierarchy is completely reflected by GraphQL inheritance. For instance, you
  can see that `ExchangeServerRole` implements `ApplicationServerRole`,  and
  that the latter implements `ServerRole`.

  For your convenience, `EntityRole:fullPath` can be projected on the role
  itself, reperesenting the role type ancestry as breadcrumbs. See
  `EntityRoleType` for query examples.
  """
  roles: [EntityRole!]

  """
  The secondary display name is used to represent unique name for this entity in the organization or the network.
  """
  secondaryDisplayName: String!

  """
  If `true`, the entity is stale. An entity is considered stale after 90 days of
  inactivity (see `mostRecentActivity`), as long as it is still effectively part
  of the network. An account-based entity is not considered part of the network
  when all of its base accounts are disabled (see `primaryAccount` and
  `secondaryAccounts`).
  """
  stale: Boolean!

  """
  The entity type, which also determines the specialized Entity subclass to be returned (see `EntityType`).
  """
  type: EntityType!

  """
  If `true`, this entity appears on the system watchlist.
  """
  watched: Boolean!
}

"""
Query criteria for activity events.
All specified criteria must be met for a result to match.
"""
input ActivityQueryInput {
  """
  The query is a match if all specified conditions are true
  ```graphql
  ##### List service accesses, except the ones that weren’t using NTLM protocol and not File Shares service types
  {
      timeline(types: [SERVICE_ACCESS]
               activityQuery: {
                   all: [
                       { not: { protocolTypes: [NTLM] }},
                       { not: { targetServiceTypes: [FILE_SHARE] }}
                   ]
                }
               first: 2)
      {
          nodes {
              eventType
              eventLabel
              ... on TimelineServiceAccessEvent {
                  protocolType
                  userEntity {
                      primaryDisplayName
                  }
                  targetServiceType
              }
          }
      }
  }
  ```
  """
  all: [ActivityQueryInput!]

  """
  The query is a match if any of the specified conditions are true
  ```graphql
  ##### List service accesses for MAIL using NTLM or Remote Desktop using Kerberos
  {
      timeline(types: [SERVICE_ACCESS]
               activityQuery: {
                   any: [
                       { protocolTypes: [NTLM], targetServiceTypes: [MAIL] },
                       { protocolTypes: [KERBEROS], targetServiceTypes: [REMOTE_DESKTOP] }
                   ]
                }
               last: 2)
      {
          nodes {
              eventType
              eventLabel
              ... on TimelineServiceAccessEvent {
                  protocolType
                  userEntity {
                      primaryDisplayName
                  }
              }
          }
      }
  }
  ```
  """
  any: [ActivityQueryInput!]
  authenticationTypes: [AuthenticationType!]
  blocked: Boolean
  certificateBasedAuth: Boolean
  cityCodes: [Int!]
  countryCodes: [String!]
  dataSourceCategories: [DataSourceCategory!]
  dataSources: [DataSource!]
  dcerpcSignatures: [DcerpcSignature!]
  fileOperationTypes: [FileOperationType!]
  hasGeoLocation: Boolean
  ispDomains: [String!]
  krbErrors: [KrbErrCode!]
  ldapBindErrors: [LdapBindResult!]
  ldapSearchQuerySignatures: [LdapQuerySignature!]
  ldapSecurityTypes: [LdapSecurityType!]
  loginRelatedServiceAccess: Boolean
  msSpecificErrors: [ApplicationSpecificError!]

  """
  The query is a match if this conditions are not true
  ```graphql
  ##### Show traffic based events from last 12 hours by privileged entities, except Files Shares
  {
      timeline(startTime: "PT-12H"
               activityQuery: {
                   dataSourceCategories: [TRAFFIC]
                   not: { targetServiceTypes: [FILE_SHARE] }}
               sourceEntityQuery: { roles: [AdminAccountRole] }
               first: 2)
      {
          nodes {
              ... on TimelineEvent {
                  eventType
              }
              ... on TimelineUserOnEndpointActivityEvent {
                  userEntity {
                      primaryDisplayName
                  }
                  endpointEntity {
                      primaryDisplayName
                  }
                  ipAddress
              }
          }
      }
  }
  ```
  """
  not: ActivityQueryInput
  ntlmErrors: [NtlmErrorCode!]
  protocolTypes: [ProtocolType!]
  protocolVersions: [String!]
  smbDialects: [SmbDialect!]
  sourceEndpointHostNames: [String!]
  sourceEndpointIpAddressReputations: [IpReputation!]
  sourceEndpointIpAddresses: [CIDR!]
  sourceEndpointNetworkTags: [String!]
  sourceEndpointNetworkTypes: [NetworkType!]
  sourceEndpointSiteEntityIds: [UUID!]
  sourceEntityDataSourceLoginIdentifiers: [String!]
  ssoErrors: [SsoError!]
  stateCodes: [String!]
  targetServiceClasses: [String!]
  targetServiceIdentifiers: [String!]
  targetServiceIsSourceEndpoint: Boolean
  targetServiceTypes: [ServiceType!]
  tlsVersions: [TlsVersion!]
}

"""
Input data for `addCommentToIncident`.
"""
input AddCommentToIncidentInput {
  clientMutationId: String

  """
  The comment to be added.
  """
  comment: String!

  """
  The unique identifier of the incident to be updated (see `Incident:incidentId`).
  """
  incidentId: String!
}

input AddUserEntityAuthorizerInput {
  authorizerEntityQuery: EntityQueryInput!
  clientMutationId: String
  entityQuery: EntityQueryInput!
}

interface AdminAccountRole {
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  builtin: Boolean!
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

type AdminAccountRoleImpl implements AdminAccountRole & EntityRole {
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  builtin: Boolean!
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

type AdministratorsRole implements DomainLevelAdminRole & AdminAccountRole & EntityRole {
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  builtin: Boolean!
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

scalar AgentId

enum AggressionLevel {
  MOST_AGGRESSIVE
  DEFAULT_AGGRESSION
}

input AlertQueryInput {
  alertIds: [UUID!]
  minimalAlertSeverity: Float
  patternIds: [Int!]
  types: [AlertType!]
}

"""
Enumeration of alert types.
"""
enum AlertType {
  """
  A single end user password was repeatedly entered incorrectly from a machine
  that is unusual for that end user, until the end user was locked out.
  """
  PasswordBruteForceAlert

  """
  A ticket has been used for more than ten hours (the default Kerberos ticket validity period).
  """
  GoldenTicketAlert

  """
  An NTLM authentication was captured and redirected to gain access to another resource
  """
  NtlmRelayAlert

  """
  A machine that usually does not perform domain replication has performed a domain replication (DRSUAPI) request.
  """
  DcSyncAlert

  """
  The user account is being used from a location that is not common to the user
  and is not common in general in the organizations network.
  """
  GeoLocationAnomalyAlert

  """
  A task creation RPC request was sent to a domain controller at the same time as an RDP ticket request.
  """
  CredSspVulnerabilityAlert

  """
  An activity was reported as malicious by an end-user through policy-triggered MFA or Email Verification.
  """
  IdentityVerificationDenyAlert

  """
  An account was hidden from being enumerated in LDAP.
  """
  HiddenObjectAlert

  """
  An account attempting to access multiple servers or workstations.
  """
  DailyTargetVolumeAnomalyAlert

  """
  A new or stale user generates unusual traffic.
  """
  NewEntityAbnormalUsageAlert

  """
  A DCE/RPC command to configure a domain controller was issued, but was never used in the endpoint or network.
  """
  AnomalousRpcAlert

  """
  An end user accessed the enterprise network/cloud from a blacklisted country
  or a region or outside the whitelisted regions.
  """
  ForbiddenCountryAlert

  """
  The user account was used from more than one location in close time proximity
  where the distance between the locations was greater than theoretical speed of
  travel between them.
  """
  GeoLocationVelocityAnomalyAlert

  """
  A protocol (e.g. NTLM or Kerberos) was used in an abnormal manner consistent
  with known ubiquitous attack tools, such as Mimikatz or Impacket. Such
  behavior could indicate that an attack (Pass the Hash,Diamond PAC, etc.) took place.
  """
  PassTheHashAlert

  """
  An end user account that has not been active in the network for longer than 90 days was used again.
  """
  StaleAccountUsageAlert

  """
  Multiple failed authentication attempts in a short time frame from the same machine.
  """
  CredentialScanningAlert

  """
  An end-user accessed a server that they had not previously used. The access
  was deemed anomalous based on several factors such as server usage (volume,
  frequency), user role and server access within the user’s peer group.
  """
  NewServerAccessAlert

  """
  Legacy alert type. Unused in new data.
  """
  StaleServiceUsageAlert

  """
  An account's credentials were used to authenticate to a machine to which it
  was not previously connected. The authentication was considered anomalous
  based on several factors such as machine role and the user role.
  """
  CredentialTheftAlert

  """
  A forged PAC ([MS14-068](https://docs.microsoft.com/en-us/security-updates/securitybulletins/2014/ms14-068)) or a Diamond PAC attack was carried out in the network.
  """
  ForgedPacAlert

  """
  An end-user account was used to configure a workstation or a server from an unusual machine.
  """
  LateralMovementAlert

  """
  The domain controller is rejecting current cryptographic algorithms and supports only RC4.
  """
  SkeletonKeyAlert

  """
  The user did not respond to an MFA request triggered by a policy rule match.
  """
  IdentityVerificationTimeoutAlert

  """
  An end-user accessed a server that they had not previously used. The access
  was deemed anomalous based on several factors such as server usage (volume or
  frequency), the user role and monitored server access within the user’s peer group.
  """
  AbnormalUsageAlert

  """
  A recognized LDAP search request usually performed by a known attacking tool
  (e.g. Bloodhound, impacket) was used in the network.
  """
  LdapReconnaissanceAlert

  """
  A Kerberos service ticket generated one one machine was used on another machine.
  """
  PassTheTicketAlert

  """
  A life-cycle supportive alert type used for automatic resolution of incidents based on successful identity verification.
  """
  IdentityVerificationApproveAlert

  """
  An endpoint that was not used in the network for a considerable amount of time was used again.
  """
  StaleHostUsageAlert

  """
  Generic alert type generated for policy rule matches, if the matched rule is explicitly configured to create alerts.
  """
  PolicyRuleMatchAlert

  """
  An account accessed an anomalous number of workstations or servers that
  exceeds the previous usage volume for that account.
  """
  DailyVolumeAnomalyAlert
  RemoteCodeExecutionAlert
  BadReputationIpUsageAlert
  BronzeBitAlert

  """
  The privileges of a user/endpoint/cloud service have been changed
  """
  PrivilegeEscalationAlert

  """
  Machine account was modified in a way that indicates potential exploitation of CVE-2021-42287/CVE-2021-42278
  """
  SuspiciousMachineAccountAlterationAlert

  """
  A honeytoken account activity was detected
  """
  HoneytokenActivityAlert

  """
  A honeytoken account was altered in a way that can indicate an exploitation attempt
  """
  HoneytokenAlterationAlert

  """
  An unusual certificate-based activity was detected
  """
  AnomalousCertificateBasedActivityAlert

  """
  A web-based activity was detected as anomalous by ML model
  """
  SuspiciousCloudActivityMLAlert
}

interface ApplicationServerRole {
  confirmed: Boolean!
  fullPath: String
  impersonator: Boolean!
  probability: Float
  type: EntityRoleType!
}

type ApplicationServerRoleImpl implements ApplicationServerRole & ServerRole & ClassificationRole & EntityRole {
  confirmed: Boolean!
  fullPath: String
  impersonator: Boolean!
  probability: Float
  type: EntityRoleType!
}

"""
An enumeration of the Microsoft extended error codes used in their Kerberos implementation.
"""
enum ApplicationSpecificError {
  STATUS_ACCOUNT_DISABLED
  STATUS_ACCOUNT_EXPIRED
  STATUS_ACCOUNT_LOCKED_OUT
  STATUS_INVALID_WORKSTATION
}

"""
A descriptor object for a password policy instance within an Active Directory domain.
"""
type AppliedActiveDirectoryPasswordPolicy {
  """
  Returns *yes* if a password complexity policy is enabled and passwords are required to meet certain requirements.
  """
  complexityEnabled: Boolean!

  """
  The name of the currently applied password policy.
  """
  displayName: String!

  """
  The maximum number of failed logons after which the user account will be temporarily locked out.
  """
  failedAuthenticationAttemptsLockoutThreshold: Int

  """
  Duration of the temporary account lockout if the maximum number of failed logons is reached.
  """
  lockoutDuration: Long!

  """
  The observation time for lockout threshold. If there are no failed attempts,
  the threshold counter is reset after this time.
  """
  lockoutObservationWindow: Long!

  """
  The period of time that a password can be used before the user is prompted to change it.
  """
  maxAge: Long!

  """
  The period of time that a password must be used before the user can change it.
  """
  minAge: Long!

  """
  The minimum allowed number of characters in a user account password.
  """
  minLength: Int!

  """
  The password policy score represented as a number.
  """
  policyRank: ZeroToOneNumber!

  """
  The password policy score represented verbally.
  """
  policyRankLevel: ScoreLevel!

  """
  If *yes* is returned, reversible encryption is enabled. It means that the user
  account password is stored in the reversible encryption format which is
  insecure and not recommended.
  """
  reversibleEncryptionEnabled: Boolean!

  """
  The number of unique new passwords associated with a user account before an old password can be reused.
  """
  savedPreviousPasswordCount: Int!

  """
  The source of information about the password policy.
  """
  sourceType: ActiveDirectoryPasswordPolicySourceType!
}

"""
An association between two entities. The nature of the association and the specific subtype are determined by `bindingType`.

**Symmetric vs. Asymmetric**: Depending on the binding type, an association can
be symmetric or asymmetric. A symmetric association is set on both participating
entities, each pointing to the other one. For example, the `LOGIN` association
is symmetric. Therefore, if a user has a `LOGIN` association with an endpoint,
the endpoint should have the same association with the user. Conversely, if a
user has a `SERVICE_ACCESS` association with a server, the server is not
supposed to have the same association with the user, because the
`SERVICE_ACCESS` association is asymmetric. The documentation for `BindingType`
specifies which binding types are symmetric and which are asymmetric.
"""
interface Association {
  """
  The association binding type, which also determines the specific `Association` subtype of this instance.
  """
  bindingType: BindingType!
}

type AssociationImpl implements Association {
  bindingType: BindingType!
}

type AttackPathBasedRiskFactor implements EntityRiskFactor {
  attackPath: [AttackPathNode!]!
  score: ZeroToOneNumber!
  severity: ScoreSeverity!
  type: RiskFactorType!
}

type AttackPathNode {
  entity: Entity!
  nextEntity: Entity
  relation: AttackPathRelation!
}

enum AttackPathRelation {
  ADMIN
  PASSWORD_RESETTER
  ALLOWED_TO_ADD_TO_GROUP
  ALLOWED_TO_MODIFY_PERMISSIONS
  IN_GROUP
  LOGGED_ON_TO_EP
  LOCAL_ADMIN
  DUPLICATED_LOCAL_ADMIN
  APPLICATION_OWNER
  APPLICATION_CONTROLLER
  ROLE_MEMBER
  ADMIN_REPLICATOR
  ADMIN_SID_TAKEOVER
  ADMIN_UNCONSTRAINED_SVC_DELEGATION
  ADMIN_CONSTRAINED_SVC_DELEGATION
  ADMIN_AUTHENTICATE_AS_ANY_DOMAIN_USER_CA_TEMPLATE
  ADMIN_AUTHENTICATE_AS_ANY_DOMAIN_USER_WITH_REQUEST_AGENT
  DUPLICATE_PASSWORD
  OWNER_ADMIN
  CA_TEMPLATE
  ALLOWED_TO_WRITE_KEY_CREDENTIAL
  ALLOWED_TO_WRITE_OWNER_CA_TEMPLATE
  ALLOWED_TO_WRITE_DACL_CA_TEMPLATE
  ALLOWED_TO_WRITE_PROPERTY_CA_TEMPLATE
  ALLOWED_TO_ENROLL_CA_TEMPLATE
}

type AuthenticationAsAnyUserWithCertificateRequestAgentRole implements EffectiveAdminRole & AdminAccountRole & EntityRole {
  affectedEntities: [Entity!]!
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  builtin: Boolean!
  certificateAuthorityEndpoints: [UUID!]!
  certificateTemplateNames: [String!]!
  confirmed: Boolean!
  effectedEntityIds: [UUID!] @deprecated(reason: "Use affectedEntities instead")
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

type AuthenticationCertificateTemplateControllerRole implements EffectiveAdminRole & AdminAccountRole & EntityRole {
  affectedEntities: [Entity!]!
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  builtin: Boolean!
  confirmed: Boolean!
  effectedEntityIds: [UUID!] @deprecated(reason: "Use affectedEntities instead")
  fullPath: String
  permissions: [Permission!]!
  probability: Float
  type: EntityRoleType!
}

enum AuthenticationType {
  DOMAIN_LOGIN
  SSO_LOGIN
  LDAP_AUTHENTICATION
  NTLM_AUTHENTICATION
  KERBEROS_AUTHENTICATION
  SMB_SESSION_SETUP
}

interface AwsIcSsoAccountDescriptor {
  awsAccountId: String
  awsOrganizationId: String
}

"""
An account descriptor provides data associated with an external entity source,
such as an entry in an identity management system.
"""
type AwsIcSsoGroupAccountDescriptorImpl implements SsoGroupAccountDescriptor & AwsIcSsoAccountDescriptor & AccountDescriptor {
  """
  If `true`, the account no longer exists; if `false`, the account is currently enabled.
  """
  archived: Boolean!
  awsAccountId: String
  awsOrganizationId: String
  containingGroupEntities: [EntityContainerEntity!]!
  containingGroupIds: [UUID!]!
  containingRoleEntities: [EntityContainerEntity!]!
  creationTime: DateTime!

  """
  The data source of this account. Together with the entity type, the data
  source determines the account descriptor subtype to be used.
  """
  dataSource: DataSource!
  dataSourceConfigurationIdentifier: UUID!
  dataSourceParticipantIdentifier: String!
  description: String

  """
  If `true`, the account is currently enabled; if `false`, the account no longer exists.
  """
  enabled: Boolean!
  flattenedContainingGroupEntities: [EntityContainerEntity!]!
  flattenedContainingGroupIds: [UUID!]!
  flattenedContainingRoleEntities: [EntityContainerEntity!]!
  tenant: String
    @deprecated(
      reason: "Tenant is deprecated and will be removed in a future release. Use AzureSsoGroupAccountDescriptor.tenant instead"
    )
}

"""
A specialized `AccountDescriptor` for SSO user accounts.
"""
type AwsIcSsoUserAccountDescriptorImpl implements SsoUserAccountDescriptor & AwsIcSsoAccountDescriptor & ActivityParticipatingAccountDescriptor & UserAccountDescriptor & AccountDescriptor {
  """
  If `true`, the account no longer exists; if `false`, the account is currently enabled.
  """
  archived: Boolean!
  awsAccountId: String
  awsOrganizationId: String
  containingEntities: [EntityContainerEntity!]!
  containingGroupEntities: [EntityContainerEntity!]!
  containingGroupIds: [UUID!]!
  containingRoleEntities: [EntityContainerEntity!]!
  creationTime: DateTime!
  credentialsDataSource: DataSource

  """
  The data source of this account. Together with the entity type, the data
  source determines the account descriptor subtype to be used.
  """
  dataSource: DataSource!

  """
  The ID of the connector configuration associated with this account.
  """
  dataSourceConfigurationIdentifier: UUID!
  dataSourceLoginIdentifier: String

  """
  A unique identifier used by the connector to identify this account.
  """
  dataSourceParticipantIdentifier: String!
  department: String
  description: String

  """
  If `true`, the account is currently enabled; if `false`, the account no longer exists.
  """
  enabled: Boolean!
  flattenedContainingGroupEntities: [EntityContainerEntity!]!
  flattenedContainingGroupIds: [UUID!]!
  flattenedContainingRoleEntities: [EntityContainerEntity!]!
  flattenedContainingRoleIds: [UUID!]

  """
  The date and time of the account's latest recorded network activity. This
  takes into account both the data reported by external sources and the actual
  traffic seen by the system.
  """
  mostRecentActivity: DateTime

  """
  Information regarding the account's password.
  """
  passwordAttributes: PasswordAttributes
  tenant: String
    @deprecated(
      reason: "Tenant is deprecated and will be removed in a future release. Use AzureSsoUserAccountDescriptor.tenant instead"
    )
  title: String
}

type AzureAccessPrivilegesRole implements AzurePrivilegedRole & AdminAccountRole & EntityRole {
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  authorizingRoleIds: [UUID!]!
  builtin: Boolean!
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

type AzureApplicationPrivilegesRole implements AzurePrivilegedRole & AdminAccountRole & EntityRole {
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  authorizingRoleIds: [UUID!]!
  builtin: Boolean!
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

"""
A specialized `AccountDescriptor` for SSO cloud service accounts.
"""
type AzureCloudServiceAdapterDescriptor implements CloudServiceAdapterDescriptor & ActivityParticipatingAccountDescriptor & AccountDescriptor {
  """
  The ID of the tenant in which the application is registered.
  """
  appOwnerOrganizationId: UUID

  """
  The ID of the registered application.
  """
  appRegistrationObjectId: UUID

  """
  If `true`, the account no longer exists; if `false`, the account is currently enabled.
  """
  archived: Boolean!
  containingGroupEntities: [EntityContainerEntity!]!
  containingGroupIds: [UUID!]!
  containingRoleEntities: [EntityContainerEntity!]!
  creationTime: DateTime!

  """
  The data source of this account. Together with the entity type, the data
  source determines the account descriptor subtype to be used.
  """
  dataSource: DataSource!

  """
  The ID of the connector configuration associated with this account.
  """
  dataSourceConfigurationIdentifier: UUID!

  """
  A unique identifier the connector uses to identify this account.
  """
  dataSourceParticipantIdentifier: String!
  description: String

  """
  If `true`, the account is currently enabled; if `false`, the account no longer exists.
  """
  enabled: Boolean!
  flattenedContainingGroupEntities: [EntityContainerEntity!]!
  flattenedContainingGroupIds: [UUID!]!
  flattenedContainingRoleEntities: [EntityContainerEntity!]!

  """
  The last time the service principal was accessed.
  """
  lastAccessTime: DateTime

  """
  The date and time of the account's latest recorded network activity. This
  takes into account both the data reported by external sources and the actual
  traffic seen by the system.
  """
  mostRecentActivity: DateTime

  """
  The domain name of the application publisher.
  """
  publisherDomain: String
  registeredTenantType: RegisteredTenantType
  servicePrincipalObjectId: UUID

  """
  The type of access this application allows.
  """
  signInAudience: SignInAudience
  tenant: String
}

type AzureCredentialsPrivilegesRole implements AzurePrivilegedRole & AdminAccountRole & EntityRole {
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  authorizingRoleIds: [UUID!]!
  builtin: Boolean!
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

type AzureDistributionGroupRole implements EntityRole {
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

type AzureGlobalPrivilegesRole implements AzurePrivilegedRole & AdminAccountRole & EntityRole {
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  authorizingRoleIds: [UUID!]!
  builtin: Boolean!
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

type AzureLegacyProtocolUsageRiskFactor implements EntityRiskFactor {
  clientDataSourceIdentifiers: [String!]!
  score: ZeroToOneNumber!
  severity: ScoreSeverity!
  type: RiskFactorType!
}

type AzureMicrosoft365GroupRole implements EntityRole {
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

type AzurePrivilegedApplicationControllerRole implements EffectiveAdminRole & AdminAccountRole & EntityRole {
  affectedEntities: [Entity!]!
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  builtin: Boolean!
  confirmed: Boolean!
  effectedEntityIds: [UUID!] @deprecated(reason: "Use affectedEntities instead")
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

interface AzurePrivilegedRole {
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  authorizingRoleIds: [UUID!]!
  builtin: Boolean!
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

type AzureSecurityGroupRole implements EntityRole {
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

type AzureSecurityPrivilegesRole implements AzurePrivilegedRole & AdminAccountRole & EntityRole {
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  authorizingRoleIds: [UUID!]!
  builtin: Boolean!
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

"""
An account descriptor provides data associated with an external entity source,
such as an entry in an identity management system.
"""
type AzureSsoGroupAccountDescriptor implements SsoGroupAccountDescriptor & AccountDescriptor {
  """
  If `true`, the account no longer exists; if `false`, the account is currently enabled.
  """
  archived: Boolean!
  containingGroupEntities: [EntityContainerEntity!]!
  containingGroupIds: [UUID!]!
  containingRoleEntities: [EntityContainerEntity!]!
  creationTime: DateTime!

  """
  The data source of this account. Together with the entity type, the data
  source determines the account descriptor subtype to be used.
  """
  dataSource: DataSource!
  dataSourceConfigurationIdentifier: UUID!
  dataSourceParticipantIdentifier: String!
  description: String

  """
  If `true`, the account is currently enabled; if `false`, the account no longer exists.
  """
  enabled: Boolean!
  flattenedContainingGroupEntities: [EntityContainerEntity!]!
  flattenedContainingGroupIds: [UUID!]!
  flattenedContainingRoleEntities: [EntityContainerEntity!]!
  tenant: String
}

"""
An account descriptor provides data associated with an external entity source,
such as an entry in an identity management system.
"""
type AzureSsoRoleAccountDescriptor implements SsoRoleAccountDescriptor & AccountDescriptor {
  """
  If `true`, the account no longer exists; if `false`, the account is currently enabled.
  """
  archived: Boolean!
  creationTime: DateTime!

  """
  The data source of this account. Together with the entity type, the data
  source determines the account descriptor subtype to be used.
  """
  dataSource: DataSource!
  dataSourceConfigurationIdentifier: UUID!
  dataSourceParticipantIdentifier: String!
  description: String

  """
  If `true`, the account is currently enabled; if `false`, the account no longer exists.
  """
  enabled: Boolean!
  tenant: String
    @deprecated(
      reason: "Tenant is deprecated and will be removed in a future release. Use AzureSsoRoleAccountDescriptor.tenant instead"
    )
}

"""
A specialized `AccountDescriptor` for SSO user accounts.
"""
type AzureSsoUserAccountDescriptor implements SsoUserAccountDescriptor & ActivityParticipatingAccountDescriptor & UserAccountDescriptor & AccountDescriptor {
  """
  If `true`, the account no longer exists; if `false`, the account is currently enabled.
  """
  archived: Boolean!
  containingEntities: [EntityContainerEntity!]!
  containingGroupEntities: [EntityContainerEntity!]!
  containingGroupIds: [UUID!]!
  containingRoleEntities: [EntityContainerEntity!]!
  creationTime: DateTime!
  credentialsDataSource: DataSource

  """
  The data source of this account. Together with the entity type, the data
  source determines the account descriptor subtype to be used.
  """
  dataSource: DataSource!

  """
  The ID of the connector configuration associated with this account.
  """
  dataSourceConfigurationIdentifier: UUID!
  dataSourceLoginIdentifier: String

  """
  A unique identifier used by the connector to identify this account.
  """
  dataSourceParticipantIdentifier: String!
  department: String
  description: String

  """
  If `true`, the account is currently enabled; if `false`, the account no longer exists.
  """
  enabled: Boolean!
  flattenedContainingGroupEntities: [EntityContainerEntity!]!
  flattenedContainingGroupIds: [UUID!]!
  flattenedContainingRoleEntities: [EntityContainerEntity!]!

  """
  The date and time of the account's latest recorded network activity. This
  takes into account both the data reported by external sources and the actual
  traffic seen by the system.
  """
  mostRecentActivity: DateTime

  """
  Information regarding the account's password.
  """
  passwordAttributes: PasswordAttributes
  tenant: String
  title: String
}

type BackupOperatorsAdminRole implements OperatorLevelAdminRole & AdminAccountRole & EntityRole {
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  builtin: Boolean!
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

"""
The binding type of an `Association` between two entities.

Binding types can be **Symmetric** or **Asymmetric** (see `Association` for a detailed explanation).
"""
enum BindingType {
  """
  A non-interactive, regular-usage origin association between a `UserEntity` and an `EndpointEntity`.

  * **Symmetric**: yes
  * **Association subtype**: `OriginAssociation`
  """
  ACTIVITY_ORIGIN

  """
  An interactive regular-usage origin association between a `UserEntity` and an `EndpointEntity`.

  * **Symmetric**: yes
  * **Association subtype**: `OriginAssociation`
  """
  LOGIN

  """
  An interactive *mostly-exclusive* regular-usage origin association between a `UserEntity` and an `EndpointEntity`.

  * **Symmetric**: yes
  * **Association subtype**: `OriginAssociation`
  """
  OWNERSHIP

  """
  An origin association between a `UserEntity` and an `EndpointEntity` briefly
  established after a user explicitly confirms the usage of an endpoint.

  * **Symmetric**: yes
  * **Association subtype**: `RecentlyVerifiedLoginBindingAssociation`
  """
  RECENTLY_VERIFIED_LOGIN

  """
  A regular target-access association. When set on a `UserEntity`, the
  SERVICE_ACCESS binding implies that the user regularly accesses the
  destination using their credentials. When set on an `EndpointEntity`, it
  implies that the endpoint is regularly used to access a service.

  * **Symmetric**: no
  * **Association subtype**: `ServiceAssociation`
  """
  SERVICE_ACCESS

  """
  This association represents a regular LDAP authentication of a `UserEntity` on an `EndpointEntity`.

  * **Symmetric**: no
  * **Association subtype**: `OriginAssociation`
  """
  LDAP_AUTHENTICATION

  """
  A *structural* association indicating that a `UserEntity` is configured to execute a service on an `EndpointEntity`.

  * **Symmetric**: yes
  * **Association subtype**: `ServiceAssociation`
  """
  SERVICE_EXECUTION

  """
  A *structural* origin association indicating that a `UserEntity` is allowed to log into an `EndpointEntity`.

  * **Symmetric**: yes
  * **Association subtype**: `OriginAssociation`
  """
  ENDPOINT_AUTHORIZATION

  """
  A regular target-access association for cloud services. This association can be set on `UserEntity` only.

  * **Symmetric**: no
  * **Association subtype**: `CloudServiceAssociation`
  """
  CLOUD_SERVICE_ACCESS

  """
  A regular origin association indicating that the user regularly performs
  network activities from a certain geographical location.

  * **Symmetric**: no
  * **Association subtype**: `GeoLocationAssociation`
  """
  GEO_LOCATION
  LOCAL_ADMINISTRATOR
  MANAGE
  MANAGED
  AUTHORIZER
  AUTHORIZED
  RBAC_ASSIGNMENT
  LINKED_ACCOUNT
}

type BrowserInfo {
  name: String!
  version: String
}

type BuiltinAdministratorRole implements DomainLevelAdminRole & AdminAccountRole & EntityRole {
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  builtin: Boolean!
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

"""
A descriptor object for an error applying an action to one or more `Entity` objects.
"""
type BulkEntityActionFailure {
  """
  The entity-ids for which the action wasn't applied successfully.
  """
  entityIds: [UUID!]!

  """
  The failure reason.
  """
  errorDetails: ErrorDetails!
}

"""
Input object for mutations applying an action to multiple entities at once.
"""
input BulkEntityActionInput {
  clientMutationId: String

  """
  Query criteria to match the subject entities by.

  Usually the query should match entities by selective attributes such as
  entity-id (see ```EntityQueryInput:entityIds```) or sam-account-name (see
  ```EntityQueryInput:samAccountNames```). Only 1000 entities may be updated at
  once - the entire operation is aborted with an error if the query criteria
  exceeds this limit.
  """
  entityQuery: EntityQueryInput!
}

"""
Result object for mutation APIs applying an action to multiple entities at once.
"""
type BulkEntityActionResult {
  clientMutationId: String

  """
  List of failures applying the action, grouped by the failure reason.
  """
  failures: [BulkEntityActionFailure!]!

  """
  List of successfully updated entities.

  **Note:** Entity actions are idempotent - even if the said action is
  effectively a no-op for some entity, it would still be considered
  *successfully updated*.
  """
  updatedEntities: [Entity!]!
}

type BusinessPrivilege {
  authorizingGroupIds: [UUID!]!
  businessPrivilegeId: UUID!
  impact: BusinessPrivilegeImpact!
}

enum BusinessPrivilegeImpact {
  LOW
  MEDIUM
  HIGH
}

type BusinessPrivilegeRole implements AdminAccountRole & EntityRole {
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  builtin: Boolean!
  businessPrivileges: [BusinessPrivilege!]!
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

enum BusinessRole {
  REGULAR
  EXECUTIVE
  ADMIN
  FINANCE
  IT
  GUEST
}

type CertificateAuthenticationAsAnyDomainUserRole implements EffectiveAdminRole & AdminAccountRole & EntityRole {
  affectedEntities: [Entity!]!
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  builtin: Boolean!
  certificateAuthorityEndpoints: [UUID!]!
  certificateTemplateNames: [String!]!
  confirmed: Boolean!
  effectedEntityIds: [UUID!] @deprecated(reason: "Use affectedEntities instead")
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

type CertificateAuthority {
  _id: UUID!
  dnsHostName: String!
  name: String!
  publishedCertificateTemplates: [CertificateTemplate!]
}

type CertificateAuthorityAdminRole implements AdminAccountRole & EntityRole {
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  builtin: Boolean!
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

type CertificateAuthorityServerRole implements ServerRole & ClassificationRole & EntityRole {
  certificateAuthority: CertificateAuthority!
  confirmed: Boolean!
  fullPath: String
  impersonator: Boolean!
  probability: Float
  type: EntityRoleType!
}

type CertificateTemplate {
  _id: UUID!
  name: String!
  pkiExtendedKeyUsageNames: [String!]!
}

type CertificateTemplateAuthenticationBasedRiskFactor implements EntityRiskFactor {
  certificateTemplateNames: [String!]!
  involvedEntitiesQueryInfo: InvolvedEntitiesQueryInfo!
  score: ZeroToOneNumber!
  severity: ScoreSeverity!
  type: RiskFactorType!
}

scalar CIDR

interface ClassificationRole {
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

type ClassificationRoleImpl implements ClassificationRole & EntityRole {
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

input ClassifyEndpointEntityInput {
  classifications: [EndpointEntityClassification!]!
  clientMutationId: String
  entityQuery: EntityQueryInput!
}

input ClassifyUserEntityInput {
  classifications: [UserEntityClassification!]!
  clientMutationId: String
  entityQuery: EntityQueryInput!
}

type CloudActivityOnVulnerableOsRiskFactor implements EntityRiskFactor {
  score: ZeroToOneNumber!
  severity: ScoreSeverity!
  type: RiskFactorType!
  usedVulnerableOperatingSystems: [OperatingSystemInfo!]!
}

"""
A specialized `AccountDescriptor` for SSO cloud service accounts.
"""
interface CloudServiceAdapterDescriptor {
  """
  The ID of the tenant in which the application is registered.
  """
  appOwnerOrganizationId: UUID
    @deprecated(
      reason: "AppOwnerOrganizationId is deprecated and will be removed in a future release. Use AzureCloudServiceAdapterDescriptor.appOwnerOrganizationId instead"
    )

  """
  The ID of the registered application.
  """
  appRegistrationObjectId: UUID
    @deprecated(
      reason: "AppRegistrationObjectId is deprecated and will be removed in a future release. Use AzureCloudServiceAdapterDescriptor.appRegistrationObjectId instead"
    )

  """
  If `true`, the account no longer exists; if `false`, the account is currently enabled.
  """
  archived: Boolean!
  containingGroupEntities: [EntityContainerEntity!]!
  containingGroupIds: [UUID!]!
  containingRoleEntities: [EntityContainerEntity!]!
  creationTime: DateTime!

  """
  The data source of this account. Together with the entity type, the data
  source determines the account descriptor subtype to be used.
  """
  dataSource: DataSource!

  """
  The ID of the connector configuration associated with this account.
  """
  dataSourceConfigurationIdentifier: UUID!

  """
  A unique identifier the connector uses to identify this account.
  """
  dataSourceParticipantIdentifier: String!
  description: String

  """
  If `true`, the account is currently enabled; if `false`, the account no longer exists.
  """
  enabled: Boolean!
  flattenedContainingGroupEntities: [EntityContainerEntity!]!
  flattenedContainingGroupIds: [UUID!]!
  flattenedContainingRoleEntities: [EntityContainerEntity!]!

  """
  The last time the service principal was accessed.
  """
  lastAccessTime: DateTime

  """
  The date and time of the account's latest recorded network activity. This
  takes into account both the data reported by external sources and the actual
  traffic seen by the system.
  """
  mostRecentActivity: DateTime

  """
  The domain name of the application publisher.
  """
  publisherDomain: String
    @deprecated(
      reason: "PublisherDomain is deprecated and will be removed in a future release. Use AzureCloudServiceAdapterDescriptor.publisherDomain instead"
    )
  registeredTenantType: RegisteredTenantType
    @deprecated(
      reason: "RegisteredTenantType is deprecated and will be removed in a future release. Use AzureCloudServiceAdapterDescriptor.registeredTenantType instead"
    )
  servicePrincipalObjectId: UUID
    @deprecated(
      reason: "ServicePrincipalObjectId is deprecated and will be removed in a future release. Use AzureCloudServiceAdapterDescriptor.servicePrincipalObjectId instead"
    )

  """
  The type of access this application allows.
  """
  signInAudience: SignInAudience
    @deprecated(
      reason: "SignInAudience is deprecated and will be removed in a future release. Use AzureCloudServiceAdapterDescriptor.signInAudience instead"
    )
  tenant: String
    @deprecated(
      reason: "Tenant is deprecated and will be removed in a future release. Use AzureCloudServiceAdapterDescriptor.tenant instead"
    )
}

type CloudServiceAdapterDescriptorImpl implements CloudServiceAdapterDescriptor & ActivityParticipatingAccountDescriptor & AccountDescriptor {
  appOwnerOrganizationId: UUID
    @deprecated(
      reason: "AppOwnerOrganizationId is deprecated and will be removed in a future release. Use AzureCloudServiceAdapterDescriptor.appOwnerOrganizationId instead"
    )
  appRegistrationObjectId: UUID
    @deprecated(
      reason: "AppRegistrationObjectId is deprecated and will be removed in a future release. Use AzureCloudServiceAdapterDescriptor.appRegistrationObjectId instead"
    )
  archived: Boolean!
  containingGroupEntities: [EntityContainerEntity!]!
  containingGroupIds: [UUID!]!
  containingRoleEntities: [EntityContainerEntity!]!
  creationTime: DateTime!
  dataSource: DataSource!
  dataSourceConfigurationIdentifier: UUID!
  dataSourceParticipantIdentifier: String!
  description: String
  enabled: Boolean!
  flattenedContainingGroupEntities: [EntityContainerEntity!]!
  flattenedContainingGroupIds: [UUID!]!
  flattenedContainingRoleEntities: [EntityContainerEntity!]!
  lastAccessTime: DateTime
  mostRecentActivity: DateTime
  publisherDomain: String
    @deprecated(
      reason: "PublisherDomain is deprecated and will be removed in a future release. Use AzureCloudServiceAdapterDescriptor.publisherDomain instead"
    )
  registeredTenantType: RegisteredTenantType
    @deprecated(
      reason: "RegisteredTenantType is deprecated and will be removed in a future release. Use AzureCloudServiceAdapterDescriptor.registeredTenantType instead"
    )
  servicePrincipalObjectId: UUID
    @deprecated(
      reason: "ServicePrincipalObjectId is deprecated and will be removed in a future release. Use AzureCloudServiceAdapterDescriptor.servicePrincipalObjectId instead"
    )
  signInAudience: SignInAudience
    @deprecated(
      reason: "SignInAudience is deprecated and will be removed in a future release. Use AzureCloudServiceAdapterDescriptor.signInAudience instead"
    )
  tenant: String
    @deprecated(
      reason: "Tenant is deprecated and will be removed in a future release. Use AzureCloudServiceAdapterDescriptor.tenant instead"
    )
}

"""
A specialized `Association` type for entity associations
"""
type CloudServiceAssociation implements EntityAssociation & Association {
  """
  The association binding type, which also determines the specific `Association` subtype of this instance.
  """
  bindingType: BindingType!

  """
  The associated entity.
  """
  entity: Entity!
}

"""
An abstract `Entity` interface common to all entities that participate in the
network activity, as opposed to entities defined by their place in the
organization structure.
"""
type CloudServiceEntity implements ActivityParticipatingEntity & Entity {
  """
  A list of external, elementary account descriptors used to construct this
  entity. For instance, the list for a `UserEntity` which is backed by an LDAP
  domain entry and an IDAAS account will include
  `ActiveDirectoryAccountDescriptor` and `SsoUserAccountDescriptor` entries.
  """
  accounts: [AccountDescriptor!]!

  """
  If `true`, the system considers this entity *archived*. It means that the entity no longer exists and can only be viewed.

  For entities derived with external data sources, such as LDAP users, an entity
  is considered archived if its primary account (see `Entity:primaryAccount` is
  deleted. Entities not associated with any external sources, such as unmanaged
  endpoints, may also be archived based on a long period of inactivity. Except
  the `archived` attribute itself, no other attribute of an archived entity is
  updated. The attributes of an archived entity represent the state of the
  entity at the time when it was archived.
  """
  archived: Boolean!

  """
  A list of associations of various types (see `Association:bindingType`) that
  this entity has with other objects, most commonly with other entities. For
  example, a `UserEntity` may have an `OWNERSHIP` association with an
  `EndpointEntity`, alongside a `GEO_LOCATION` association with a `GeoLocation`.
  The semantics for each association type are detailed in `BindingType`.
  """
  associations(bindingTypes: [BindingType!]): [Association!]!
  creationTime: DateTime!

  """
  The date and time of the entity's earliest recorded network activity. This
  takes into account both the data reported by external sources and the actual
  traffic seen by the system.
  """
  earliestSeenTraffic: DateTime

  """
  The entity's unique identifier.
  """
  entityId: UUID!
  hasADDomainAdminRole: Boolean

  """
  A convenience function that checks the `roles` field for the existence of at least one role matching the criteria.

  ```graphql
  {
    entities(minRiskScoreSeverity: MEDIUM, archived: false, first: 5)
    {
      nodes
      {
        type
        primaryDisplayName
        ... on UserEntity
        {
          isHuman: hasRole(type: HumanUserAccountRole)
          isProgrammatic: hasRole(type: ProgrammaticUserAccountRole)
          isAdmin: hasRole(type: AdminAccountRole)
        }
        ... on EndpointEntity
        {
          isWorkstation: hasRole(type: WorkstationRole)
          isServer: hasRole(type: WorkstationRole)
        }
        isManuallyClassified: hasRole(confirmed: true)
      }
    }
  }
  ```
  """
  hasRole(
    confirmed: Boolean
    fullPath: String
    probability: Float
    type: EntityRoleType
  ): Boolean

  """
  If `true`, the entity is inactive. An entity is considered inactive after 21
  days since its latest recorded network activity (see `mostRecentActivity`).
  """
  inactive: Boolean!

  """
  If `true`, the system has gathered enough information to consider this entity *learned*.
  """
  learned: Boolean!

  """
  For marked entities, this is set to the last time the entity was marked.
  """
  markTime: DateTime

  """
  The date and time of the entity's latest recorded network activity. This takes
  into account both the data reported by external sources and the actual traffic
  seen by the system.
  """
  mostRecentActivity: DateTime

  """
  Query open incidents for this entity.
  """
  openIncidents(
    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Query by any value of `AlertType`. At least one of the alerts for an
    incident should be of any of the given alert types for the incident to match.
    """
    alertTypes: [AlertType!]

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Query for incidents created on or after the specific date.
    """
    createdAfter: DateTimeInput

    """
    Query for incidents created before the specific date.
    """
    createdBefore: DateTimeInput

    """
    Query by the attributes of any entity involved in a `compromisedEntities` incident (see `Incident:compromisedEntities`).
    """
    entityQuery: EntityQueryInput

    """
    Query up to the first specified number of entries.
    """
    first: Int

    """
    Query up to the last specified number of entries.
    """
    last: Int

    """
    Query by any value of `Incident:lifeCycleStage`.
    """
    lifeCycleStages: [IncidentLifeCycleStage!]
    nameSearch: String
    patternIds: [Int!]

    """
    Query by any value of `Incident:severity`.
    """
    severities: [IncidentSeverity!]

    """
    Use the specified key as the primary sort-key to sort the results by.
    """
    sortKey: IncidentSortKey = INCIDENT_ID

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING

    """
    Query by any value of `Incident:type`.
    """
    types: [IncidentType!]

    """
    Query for incidents updated on or after the specific date.
    """
    updatedAfter: DateTimeInput

    """
    Query for incidents updated before the specific date.
    """
    updatedBefore: DateTimeInput
  ): IncidentConnection
    @deprecated(
      reason: "\"openIncidents\" is deprecated and will be removed in a future release"
    )

  """
  The primary display name used to represent this entity in user-facing data.

  The primary display name is typically shorter than the secondary display name,
  but is much less likely to be unique across the organization or network. For
  further details on the semantics, see the documentation for specific types.
  """
  primaryDisplayName: String!

  """
  A list of risk factors contributing to the overall risk of this entity, sorted
  by `RiskFactorContribution:score` in descending order.
  """
  riskFactors(types: [RiskFactorType!]): [EntityRiskFactor!]!

  """
  The entity's risk score represented as a number from 0 (no or unknown risk) through 1 (maximum risk).
  """
  riskScore: ZeroToOneNumber!

  """
  The entity's risk score derived from `riskScore`.
  """
  riskScoreSeverity: ScoreSeverity!

  """
  A list of roles fulfilled by this entity, each defining the entity's classification or organizational-function aspect.

  For example, a `UserEntity` representing an *account operator* in an Active
  Directory domain should have an `AccountOperatorsAdminRole` entry on this
  list. Should the system later learn this privileged account is used by a
  script rather than a human, its associated entity will also have a
  `ProgrammaticUserAccountRole`. Similarly, when the system learns that some
  `EndpointEntity` belongs to a VDI cluster, it tags it with a
  `VdiEndpointRole`.The model for roles is hierarchical. For example, the
  aforementioned `AccountOperatorsAdminRole` is a specialization of
  `OperatorLevelAdminRole`, which by itself is a specialization of
  `AdminAccountRole`.

  When roles are queried, this hierarchy is always taken into account.
  Therefore, querying an entity about the existence of a role also implies that
  all of its direct and indirect specializations will be queried too. This
  hierarchy is completely reflected by GraphQL inheritance. For instance, you
  can see that `ExchangeServerRole` implements `ApplicationServerRole`,  and
  that the latter implements `ServerRole`.

  For your convenience, `EntityRole:fullPath` can be projected on the role
  itself, reperesenting the role type ancestry as breadcrumbs. See
  `EntityRoleType` for query examples.
  """
  roles: [EntityRole!]

  """
  The secondary display name is used to represent unique name for this entity in the organization or the network.
  """
  secondaryDisplayName: String!

  """
  If `true`, the entity is stale. An entity is considered stale after 90 days of
  inactivity (see `mostRecentActivity`), as long as it is still effectively part
  of the network. An account-based entity is not considered part of the network
  when all of its base accounts are disabled (see `primaryAccount` and
  `secondaryAccounts`).
  """
  stale: Boolean!

  """
  The entity type, which also determines the specialized Entity subclass to be returned (see `EntityType`).
  """
  type: EntityType!

  """
  If `true`, this entity appears on the system watchlist.
  """
  watched: Boolean!
}

type CommonEngagementSummary implements EngagementSummary {
  engagementType: EngagementType!
}

enum ConnectorStatus {
  INITIAL
  SUCCESS
  COMMON_ERROR
  COMMON_CONNECTION_ERROR
  AUTHENTICATION_ERROR
  AUTHORIZATION_ERROR
  DOMAIN_NOT_IN_WHITELIST_ERROR
  INVALID_CLIENT_ID_OR_SECRET_ERROR
  MISSING_PERMISSION
  MISSING_PARTIAL_PERMISSION
  RATE_LIMIT_EXCEEDED
  LICENSE_WILL_EXPIRE_SOON
  LICENSE_EXPIRED
}

type ConstrainedServiceDelegationAdminRole implements ServiceDelegationAdminRole & EffectiveAdminRole & AdminAccountRole & EntityRole {
  affectedEntities: [Entity!]!
  allowedServices: [ServiceDescriptor!]!
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  builtin: Boolean!
  confirmed: Boolean!
  effectedEntityIds: [UUID!] @deprecated(reason: "Use affectedEntities instead")
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

interface ContainerRole {
  builtin: Boolean!
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

scalar Cursor

"""
Enumeration of data sources in which system data may originate.

`SNIFFER` is the data source used for on-premises traffic monitored by sensors.
Otherwise, most entries are well-known vendor names the system accepts as input.
"""
enum DataSource {
  SNIFFER
  ACTIVE_DIRECTORY
  ADFS
  OKTA
  AZURE
  PING_IDENTITY
  AWS
}

enum DataSourceCategory {
  ON_PREMISES_TRAFFIC
  IDAAS
  ON_PREMISES_SSO
  PAM
  TRAFFIC
  SSO
}

"""
[ISO-8601](https://www.iso.org/iso-8601-date-and-time-format.html) date string.
"""
scalar DateTime

"""
Input type used for all data arguments instead of `DataTime`, allowing
additional syntax. The input value may be either an
[ISO-8601](https://www.iso.org/iso-8601-date-and-time-format.html) date string
or an [ISO-8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Time_intervals)
string relative to the current date. For example, `P-10D` means "10 days ago".
This option is especially useful when querying the API interactively using
GraphiQL or a similar tool.

Both options are demonstrated below.

```graphql
{
  # First option - simple ISO Date strings
  newUsersIn2018: entities(accountCreationStartTime: "2018-01-01T00:00:00.000Z"
               accountCreationEndTime:  "2019-01-01T00:00:00.000Z"
               types: [USER]
               sortKey: CREATION_TIME
               sortOrder: ASCENDING
               first: 3) {
    nodes {
      primaryDisplayName
      ... on ActivityParticipatingEntity {
        mostRecentActivity
      }
    }
  }

  # Second option - using relative duration strings
  programmaticUsersNotActiveThisWeek: entities(mostRecentActivityEndTime: "P-1W"
                         roles: [ProgrammaticUserAccountRole]
                         sortKey: MOST_RECENT_ACTIVITY
                         sortOrder: DESCENDING
                         first: 3) {
    nodes {
      primaryDisplayName
      ... on ActivityParticipatingEntity {
        mostRecentActivity
      }
    }
  }
}
```
"""
scalar DateTimeInput

"""
An enumeration of [DCE/RPC](http://www.dcerpc.org/) activity signatures.
"""
enum DcerpcSignature {
  DC_SYNC
  SPN_MODIFICATION
  REPLICATION_SERVER_REGISTRATION
  SCHEDULED_TASK_CREATION
  REMOTE_SERVICE_INTERFACE
  NET_SESSION_ENUMERATION
  SAMR_INTERFACE
  DCOM_INTERFACE
  TASK_SCHDULE_INTERFACE
  IREMOTE_WINSPOOL_INTERFACE
  ZEROLOGON_EXPLOIT
  CREATE_SERVICE
}

type DefaultPasswordAttributesImpl implements PasswordAttributes {
  aged: Boolean!
  exposed: Boolean!
  lastChange: DateTime
  mayExpire: Boolean!
  strength: PasswordStrength!
}

type DistributionGroupRole implements ActiveDirectoryGroupRole & MailingListRole & ContainerRole & EntityRole {
  builtin: Boolean!
  confirmed: Boolean!
  emailAddresses: [String!]!
  fullPath: String
  probability: Float
  scope: ActiveDirectoryGroupScope!
  type: EntityRoleType!
}

type DnsServerRole implements ServerRole & ClassificationRole & EntityRole {
  confirmed: Boolean!
  fullPath: String
  impersonator: Boolean!
  probability: Float
  type: EntityRoleType!
}

type DomainAdminsRole implements DomainLevelAdminRole & AdminAccountRole & EntityRole {
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  builtin: Boolean!
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

type DomainControllerRole implements ApplicationServerRole & ServerRole & ClassificationRole & EntityRole {
  confirmed: Boolean!
  fullPath: String
  impersonator: Boolean!
  pdc: Boolean
  probability: Float
  siteEntity: UUID
  type: EntityRoleType!
}

interface DomainControllersAdminRole {
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  builtin: Boolean!
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

type DomainControllersAdminRoleImpl implements DomainControllersAdminRole & DomainLevelAdminRole & AdminAccountRole & EntityRole {
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  builtin: Boolean!
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

interface DomainLevelAdminRole {
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  builtin: Boolean!
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

type DuplicatePasswordRiskEntityFactor implements EntityRiskFactor {
  groupId: String!
  score: ZeroToOneNumber!
  severity: ScoreSeverity!
  type: RiskFactorType!
}

interface EffectiveAdminRole {
  affectedEntities: [Entity!]!
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  builtin: Boolean!
  confirmed: Boolean!
  effectedEntityIds: [UUID!] @deprecated(reason: "Use affectedEntities instead")
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

type EffectiveGpo {
  domain: String
  gpoName: String
}

type EffectiveReplicatorsAdminRole implements EffectiveAdminRole & AdminAccountRole & EntityRole {
  affectedEntities: [Entity!]!
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  builtin: Boolean!
  confirmed: Boolean!
  effectedEntityIds: [UUID!] @deprecated(reason: "Use affectedEntities instead")
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

"""
A specialized `Entity` interface for the endpoint, used when `Entity:type` is `ENDPOINT`.

The entity type, as opposed to its classification, is a structural attribute. To
differentiate between various kinds of endpoints, check their classification
(see `roles` field).
"""
type EndpointEntity implements UserOrEndpointEntity & ActivityParticipatingEntity & Entity {
  """
  A list of external, elementary account descriptors used to construct this
  entity. For instance, the list for a `UserEntity` which is backed by an LDAP
  domain entry and an IDAAS account will include
  `ActiveDirectoryAccountDescriptor` and `SsoUserAccountDescriptor` entries.
  """
  accounts: [AccountDescriptor!]!
  agentId: AgentId
  agentVersion: String

  """
  If `true`, the system considers this entity *archived*. It means that the entity no longer exists and can only be viewed.

  For entities derived with external data sources, such as LDAP users, an entity
  is considered archived if its primary account (see `Entity:primaryAccount` is
  deleted. Entities not associated with any external sources, such as unmanaged
  endpoints, may also be archived based on a long period of inactivity. Except
  the `archived` attribute itself, no other attribute of an archived entity is
  updated. The attributes of an archived entity represent the state of the
  entity at the time when it was archived.
  """
  archived: Boolean!

  """
  A list of associations of various types (see `Association:bindingType`) that
  this entity has with other objects, most commonly with other entities. For
  example, a `UserEntity` may have an `OWNERSHIP` association with an
  `EndpointEntity`, alongside a `GEO_LOCATION` association with a `GeoLocation`.
  The semantics for each association type are detailed in `BindingType`.
  """
  associations(bindingTypes: [BindingType!]): [Association!]!
  cid: String
  creationTime: DateTime!

  """
  The date and time of the entity's earliest recorded network activity. This
  takes into account both the data reported by external sources and the actual
  traffic seen by the system.
  """
  earliestSeenTraffic: DateTime

  """
  The entity's unique identifier.
  """
  entityId: UUID!
  guestAccountEnabled: Boolean
  hasADDomainAdminRole: Boolean

  """
  A convenience function that checks the `roles` field for the existence of at least one role matching the criteria.

  ```graphql
  {
    entities(minRiskScoreSeverity: MEDIUM, archived: false, first: 5)
    {
      nodes
      {
        type
        primaryDisplayName
        ... on UserEntity
        {
          isHuman: hasRole(type: HumanUserAccountRole)
          isProgrammatic: hasRole(type: ProgrammaticUserAccountRole)
          isAdmin: hasRole(type: AdminAccountRole)
        }
        ... on EndpointEntity
        {
          isWorkstation: hasRole(type: WorkstationRole)
          isServer: hasRole(type: WorkstationRole)
        }
        isManuallyClassified: hasRole(confirmed: true)
      }
    }
  }
  ```
  """
  hasRole(
    confirmed: Boolean
    fullPath: String
    probability: Float
    type: EntityRoleType
  ): Boolean

  """
  The latest recorded host name for this endpoint.
  """
  hostName: String

  """
  The latest calculated impact score for this entity.
  """
  impactScore: ZeroToOneNumber!

  """
  If `true`, the entity is inactive. An entity is considered inactive after 21
  days since its latest recorded network activity (see `mostRecentActivity`).
  """
  inactive: Boolean!

  """
  The latest recorded IP address for this endpoint.
  """
  lastIpAddress: IpAddress

  """
  If `true`, the system has gathered enough information to consider this entity *learned*.
  """
  learned: Boolean!

  """
  For marked entities, this is set to the last time the entity was marked.
  """
  markTime: DateTime

  """
  The date and time of the entity's latest recorded network activity. This takes
  into account both the data reported by external sources and the actual traffic
  seen by the system.
  """
  mostRecentActivity: DateTime

  """
  Query open incidents for this entity.
  """
  openIncidents(
    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Query by any value of `AlertType`. At least one of the alerts for an
    incident should be of any of the given alert types for the incident to match.
    """
    alertTypes: [AlertType!]

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Query for incidents created on or after the specific date.
    """
    createdAfter: DateTimeInput

    """
    Query for incidents created before the specific date.
    """
    createdBefore: DateTimeInput

    """
    Query by the attributes of any entity involved in a `compromisedEntities` incident (see `Incident:compromisedEntities`).
    """
    entityQuery: EntityQueryInput

    """
    Query up to the first specified number of entries.
    """
    first: Int

    """
    Query up to the last specified number of entries.
    """
    last: Int

    """
    Query by any value of `Incident:lifeCycleStage`.
    """
    lifeCycleStages: [IncidentLifeCycleStage!]
    nameSearch: String
    patternIds: [Int!]

    """
    Query by any value of `Incident:severity`.
    """
    severities: [IncidentSeverity!]

    """
    Use the specified key as the primary sort-key to sort the results by.
    """
    sortKey: IncidentSortKey = INCIDENT_ID

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING

    """
    Query by any value of `Incident:type`.
    """
    types: [IncidentType!]

    """
    Query for incidents updated on or after the specific date.
    """
    updatedAfter: DateTimeInput

    """
    Query for incidents updated before the specific date.
    """
    updatedBefore: DateTimeInput
  ): IncidentConnection
    @deprecated(
      reason: "\"openIncidents\" is deprecated and will be removed in a future release"
    )

  """
  The latest information about the operating system running on this endpoint.
  """
  operatingSystemInfo: OperatingSystemInfo

  """
  The primary display name used to represent this endpoint in user-facing data.

  For endpoints based on domain accounts, this is derived from the explicit
  display name, or an analogous attribute, of their primary account. Very often
  that's the host part of their full DNS host name. Otherwise this is either the
  `hostName`, if available, or `lastIpAddress`.
  """
  primaryDisplayName: String!

  """
  A list of risk factors contributing to the overall risk of this entity, sorted
  by `RiskFactorContribution:score` in descending order.
  """
  riskFactors(types: [RiskFactorType!]): [EntityRiskFactor!]!

  """
  The entity's risk score represented as a number from 0 (no or unknown risk) through 1 (maximum risk).
  """
  riskScore: ZeroToOneNumber!

  """
  The entity's risk score derived from `riskScore`.
  """
  riskScoreSeverity: ScoreSeverity!

  """
  A list of roles fulfilled by this entity, each defining the entity's classification or organizational-function aspect.

  For example, a `UserEntity` representing an *account operator* in an Active
  Directory domain should have an `AccountOperatorsAdminRole` entry on this
  list. Should the system later learn this privileged account is used by a
  script rather than a human, its associated entity will also have a
  `ProgrammaticUserAccountRole`. Similarly, when the system learns that some
  `EndpointEntity` belongs to a VDI cluster, it tags it with a
  `VdiEndpointRole`.The model for roles is hierarchical. For example, the
  aforementioned `AccountOperatorsAdminRole` is a specialization of
  `OperatorLevelAdminRole`, which by itself is a specialization of
  `AdminAccountRole`.

  When roles are queried, this hierarchy is always taken into account.
  Therefore, querying an entity about the existence of a role also implies that
  all of its direct and indirect specializations will be queried too. This
  hierarchy is completely reflected by GraphQL inheritance. For instance, you
  can see that `ExchangeServerRole` implements `ApplicationServerRole`,  and
  that the latter implements `ServerRole`.

  For your convenience, `EntityRole:fullPath` can be projected on the role
  itself, reperesenting the role type ancestry as breadcrumbs. See
  `EntityRoleType` for query examples.
  """
  roles: [EntityRole!]

  """
  The secondary display name used to represent this endpoint in user-facing data.

  For endpoints based on domain accounts, this is set to the same value as
  `hostName`. Otherwise, this is set to the same value as `lastIpAddress`.
  """
  secondaryDisplayName: String!

  """
  Returns `true` if the system considers this entity shared.
  """
  shared: Boolean!

  """
  If `true`, the entity is stale. An entity is considered stale after 90 days of
  inactivity (see `mostRecentActivity`), as long as it is still effectively part
  of the network. An account-based entity is not considered part of the network
  when all of its base accounts are disabled (see `primaryAccount` and
  `secondaryAccounts`).
  """
  stale: Boolean!

  """
  List of static IP addresses associated with by this endpoint, as recorded by the system.
  """
  staticIpAddresses: [IpAddress!]!

  """
  The entity type, which also determines the specialized Entity subclass to be returned (see `EntityType`).
  """
  type: EntityType!

  """
  If `true`, the system considers this endpoint unmanaged.

  Unmanaged endpoints are, first and foremost, entities lacking an account in
  any organization domain (`primaryAccount` would also be null in this case).
  Since, by their nature, such endpoints are not properly reporting their
  status, certain restrictions are applied to them.
  """
  unmanaged: Boolean!

  """
  If `true`, this entity appears on the system watchlist.
  """
  watched: Boolean!

  """
  The ZTA Score of this endpoint.
  """
  ztaScore: Int
}

enum EndpointEntityClassification {
  WORKSTATION
  SERVER
  IMPERSONATOR
  APPLICATION_SERVER
  FILE_SERVER
  VDI_ENDPOINT
}

enum EngagementAuthenticationStatus {
  PENDING
  APPROVE
  AUTO_APPROVE
  AUTO_DENY
  DENY_AND_NOT_FRAUD
  DENY_AND_FRAUDULENT
  DENY_AND_UNKNOWN
  INVALID_USER_INPUT
  USER_RESPONSE_TIMEOUT
  USER_NOT_ENROLLED
  NO_VALID_AUTHORIZER
  ERROR
}

interface EngagementSummary {
  engagementType: EngagementType!
}

enum EngagementType {
  GOOGLE_AUTH_ENROLL
  EMAIL_VERIFICATION
    @deprecated(
      reason: "`EMAIL_VERIFICATION` is deprecated and will be removed in a future release"
    )
  EMAIL_NOTIFICATION
  SMS_NOTIFICATION
    @deprecated(
      reason: "`SMS_NOTIFICATION` is deprecated and will be removed in a future release"
    )
  SMS_VERIFICATION
    @deprecated(
      reason: "`SMS_VERIFICATION` is deprecated and will be removed in a future release"
    )
  MFA
}

type EnterpriseAdminsRole implements ForestLevelAdminRole & AdminAccountRole & EntityRole {
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  builtin: Boolean!
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

"""
An *Entity* object encapsulates and summarizes all the system information on an
organizational or network entity. The most common entities are users and
endpoints, but there are also entities representing cloud services and entity
groups, such as Active Directory groups. More entity types are expected to be
added in the future.

Entity objects are usually derived from external data sources. For instance, all
covered user accounts in an Active Directory domain are represented as entities.
However, entities very often integrate data from multiple sources. The network
traffic monitored by the system is a primary source for behavioral attributes of
entities, such as the human versus programmatic classification or the
association of owned endpoints (see `roles`, `associations`). Moreover, entities
not always represent a single account: an LDAP user, for example, may be
correlated with an IDaaS account, resulting in a single, unified entity.

Entities are polymorphic. Attributes for specific entity types can be projected
from a specialized interface (e.g. `UserOrEndpointEntity`, `EndpointEntity`).
See the `EntityType` enum documentation for the mapping between entity types and
entity interfaces.
"""
interface Entity {
  """
  A list of external, elementary account descriptors used to construct this
  entity. For instance, the list for a `UserEntity` which is backed by an LDAP
  domain entry and an IDAAS account will include
  `ActiveDirectoryAccountDescriptor` and `SsoUserAccountDescriptor` entries.
  """
  accounts: [AccountDescriptor!]!

  """
  If `true`, the system considers this entity *archived*. It means that the entity no longer exists and can only be viewed.

  For entities derived with external data sources, such as LDAP users, an entity
  is considered archived if its primary account (see `Entity:primaryAccount` is
  deleted. Entities not associated with any external sources, such as unmanaged
  endpoints, may also be archived based on a long period of inactivity. Except
  the `archived` attribute itself, no other attribute of an archived entity is
  updated. The attributes of an archived entity represent the state of the
  entity at the time when it was archived.
  """
  archived: Boolean!

  """
  A list of associations of various types (see `Association:bindingType`) that
  this entity has with other objects, most commonly with other entities. For
  example, a `UserEntity` may have an `OWNERSHIP` association with an
  `EndpointEntity`, alongside a `GEO_LOCATION` association with a `GeoLocation`.
  The semantics for each association type are detailed in `BindingType`.
  """
  associations(bindingTypes: [BindingType!]): [Association!]!
  creationTime: DateTime!

  """
  The entity's unique identifier.
  """
  entityId: UUID!
  hasADDomainAdminRole: Boolean

  """
  A convenience function that checks the `roles` field for the existence of at least one role matching the criteria.

  ```graphql
  {
    entities(minRiskScoreSeverity: MEDIUM, archived: false, first: 5)
    {
      nodes
      {
        type
        primaryDisplayName
        ... on UserEntity
        {
          isHuman: hasRole(type: HumanUserAccountRole)
          isProgrammatic: hasRole(type: ProgrammaticUserAccountRole)
          isAdmin: hasRole(type: AdminAccountRole)
        }
        ... on EndpointEntity
        {
          isWorkstation: hasRole(type: WorkstationRole)
          isServer: hasRole(type: WorkstationRole)
        }
        isManuallyClassified: hasRole(confirmed: true)
      }
    }
  }
  ```
  """
  hasRole(
    confirmed: Boolean
    fullPath: String
    probability: Float
    type: EntityRoleType
  ): Boolean

  """
  If `true`, the system has gathered enough information to consider this entity *learned*.
  """
  learned: Boolean!

  """
  For marked entities, this is set to the last time the entity was marked.
  """
  markTime: DateTime

  """
  Query open incidents for this entity.
  """
  openIncidents(
    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Query by any value of `AlertType`. At least one of the alerts for an
    incident should be of any of the given alert types for the incident to match.
    """
    alertTypes: [AlertType!]

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Query for incidents created on or after the specific date.
    """
    createdAfter: DateTimeInput

    """
    Query for incidents created before the specific date.
    """
    createdBefore: DateTimeInput

    """
    Query by the attributes of any entity involved in a `compromisedEntities` incident (see `Incident:compromisedEntities`).
    """
    entityQuery: EntityQueryInput

    """
    Query up to the first specified number of entries.
    """
    first: Int

    """
    Query up to the last specified number of entries.
    """
    last: Int

    """
    Query by any value of `Incident:lifeCycleStage`.
    """
    lifeCycleStages: [IncidentLifeCycleStage!]
    nameSearch: String
    patternIds: [Int!]

    """
    Query by any value of `Incident:severity`.
    """
    severities: [IncidentSeverity!]

    """
    Use the specified key as the primary sort-key to sort the results by.
    """
    sortKey: IncidentSortKey = INCIDENT_ID

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING

    """
    Query by any value of `Incident:type`.
    """
    types: [IncidentType!]

    """
    Query for incidents updated on or after the specific date.
    """
    updatedAfter: DateTimeInput

    """
    Query for incidents updated before the specific date.
    """
    updatedBefore: DateTimeInput
  ): IncidentConnection
    @deprecated(
      reason: "\"openIncidents\" is deprecated and will be removed in a future release"
    )

  """
  The primary display name used to represent this entity in user-facing data.

  The primary display name is typically shorter than the secondary display name,
  but is much less likely to be unique across the organization or network. For
  further details on the semantics, see the documentation for specific types.
  """
  primaryDisplayName: String!

  """
  A list of risk factors contributing to the overall risk of this entity, sorted
  by `RiskFactorContribution:score` in descending order.
  """
  riskFactors(types: [RiskFactorType!]): [EntityRiskFactor!]!

  """
  The entity's risk score represented as a number from 0 (no or unknown risk) through 1 (maximum risk).
  """
  riskScore: ZeroToOneNumber!

  """
  The entity's risk score derived from `riskScore`.
  """
  riskScoreSeverity: ScoreSeverity!

  """
  A list of roles fulfilled by this entity, each defining the entity's classification or organizational-function aspect.

  For example, a `UserEntity` representing an *account operator* in an Active
  Directory domain should have an `AccountOperatorsAdminRole` entry on this
  list. Should the system later learn this privileged account is used by a
  script rather than a human, its associated entity will also have a
  `ProgrammaticUserAccountRole`. Similarly, when the system learns that some
  `EndpointEntity` belongs to a VDI cluster, it tags it with a
  `VdiEndpointRole`.The model for roles is hierarchical. For example, the
  aforementioned `AccountOperatorsAdminRole` is a specialization of
  `OperatorLevelAdminRole`, which by itself is a specialization of
  `AdminAccountRole`.

  When roles are queried, this hierarchy is always taken into account.
  Therefore, querying an entity about the existence of a role also implies that
  all of its direct and indirect specializations will be queried too. This
  hierarchy is completely reflected by GraphQL inheritance. For instance, you
  can see that `ExchangeServerRole` implements `ApplicationServerRole`,  and
  that the latter implements `ServerRole`.

  For your convenience, `EntityRole:fullPath` can be projected on the role
  itself, reperesenting the role type ancestry as breadcrumbs. See
  `EntityRoleType` for query examples.
  """
  roles: [EntityRole!]

  """
  The secondary display name is used to represent unique name for this entity in the organization or the network.
  """
  secondaryDisplayName: String!

  """
  The entity type, which also determines the specialized Entity subclass to be returned (see `EntityType`).
  """
  type: EntityType!

  """
  If `true`, this entity appears on the system watchlist.
  """
  watched: Boolean!
}

"""
Query criteria for entity accounts.
"""
input EntityAccountQuery {
  archived: Boolean

  """
  Query for any value of the account's `dataSourceLoginIdentifier` field. The search is case-insensitive.
  """
  dataSourceLoginIdentifiers: [String!]

  """
  Query for any value of the account's `dataSourceParticipantIdentifier` field. The search is case-insensitive.
  """
  dataSourceParticipantIdentifiers: [String!]

  """
  Query for any value of the account's `dataSource` field.
  """
  dataSources: [DataSource!]

  """
  Query for any value of the account's `department` field. The search is case-insensitive.
  """
  departments: [String!]

  """
  Query for any value of the account's `domain` using a `WildcardPattern` search. The search is case-insensitive.
  """
  domainPattern: WildcardPattern

  """
  Query for any value of the account's `domain` field. The search is case-insensitive.
  """
  domains: [String!]

  """
  Query for the value of the account's `enabled` field.
  """
  enabled: Boolean

  """
  Query for any value of the account's `objectGuid` field. The search is case-insensitive.
  """
  objectGuids: [UUID!]

  """
  Query for any value of the account's `objectSid` field. The search is case-insensitive.
  """
  objectSids: [String!]
  ouPattern: WildcardPattern
  ous: [String!]

  """
  Query for any value of the account's `samAccountName` using a `WildcardPattern` search. The search is case-insensitive.
  """
  samAccountNamePattern: WildcardPattern

  """
  Query for any value of the account's `samAccountName` field. The search is case-insensitive.
  """
  samAccountNames: [String!]
  userAccountControlFlags: [UserAccountControlFlags!]
}

"""
A specialized `Association` type for entity associations
"""
interface EntityAssociation {
  """
  The association binding type, which also determines the specific `Association` subtype of this instance.
  """
  bindingType: BindingType!

  """
  The associated entity.
  """
  entity: Entity!
}

type EntityAssociationImpl implements EntityAssociation & Association {
  bindingType: BindingType!
  entity: Entity!
}

"""
Query criteria for `Association` type for entity associations.
"""
input EntityAssociationQuery {
  """
  Query for any value of `Association:bindingType`. A matching entity must have
  at least one `Association` of any of the specified binding types.
  """
  bindingTypes: [BindingType!]

  """
  Query for associated `EntityAssociation:entity` matching all entity query criteria.

  ```graphql
  ##### List users regularly accessing Azure Portal
  {
      entities(
          associationQuery: {
              bindingTypes: [CLOUD_SERVICE_ACCESS]
              entityQuery: {
                  # Querying by primaryDisplayNames for demonstration purposes - It's generally recommended to use
                  # more reliable identifiers, such as the entityId (queryable via the entityIds argument)
                  primaryDisplayNames: ["Azure Portal"]
              }
          }
          types: [USER]
          archived: false
          first: 2)
      {
          nodes {
              primaryDisplayName
              secondaryDisplayName
          }
      }
  }
  ```
  """
  entityQuery: EntityQueryInput
}

"""
A [Relay-Compatible](https://facebook.github.io/relay/graphql/connections.htm)
Connection type for paginating over `Entity` elements.
"""
type EntityConnection {
  """
  List of `Entity` edges.
  """
  edges: [EntityEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A convenience extension to the standard Relay Connection type, directly
  exposing the `Entity` elements, which may be used *instead* of edges. It is
  primarily useful in conjunction with `startCursor` and `endCursor`, or when
  exploring the API interactively (e.g. in GraphiQL).
  """
  nodes: [Entity!]!
}

"""
An *Entity* object encapsulates and summarizes all the system information on an
organizational or network entity. The most common entities are users and
endpoints, but there are also entities representing cloud services and entity
groups, such as Active Directory groups. More entity types are expected to be
added in the future.

Entity objects are usually derived from external data sources. For instance, all
covered user accounts in an Active Directory domain are represented as entities.
However, entities very often integrate data from multiple sources. The network
traffic monitored by the system is a primary source for behavioral attributes of
entities, such as the human versus programmatic classification or the
association of owned endpoints (see `roles`, `associations`). Moreover, entities
not always represent a single account: an LDAP user, for example, may be
correlated with an IDaaS account, resulting in a single, unified entity.

Entities are polymorphic. Attributes for specific entity types can be projected
from a specialized interface (e.g. `UserOrEndpointEntity`, `EndpointEntity`).
See the `EntityType` enum documentation for the mapping between entity types and
entity interfaces.
"""
type EntityContainerEntity implements Entity {
  """
  A list of external, elementary account descriptors used to construct this
  entity. For instance, the list for a `UserEntity` which is backed by an LDAP
  domain entry and an IDAAS account will include
  `ActiveDirectoryAccountDescriptor` and `SsoUserAccountDescriptor` entries.
  """
  accounts: [AccountDescriptor!]!

  """
  If `true`, the system considers this entity *archived*. It means that the entity no longer exists and can only be viewed.

  For entities derived with external data sources, such as LDAP users, an entity
  is considered archived if its primary account (see `Entity:primaryAccount` is
  deleted. Entities not associated with any external sources, such as unmanaged
  endpoints, may also be archived based on a long period of inactivity. Except
  the `archived` attribute itself, no other attribute of an archived entity is
  updated. The attributes of an archived entity represent the state of the
  entity at the time when it was archived.
  """
  archived: Boolean!

  """
  A list of associations of various types (see `Association:bindingType`) that
  this entity has with other objects, most commonly with other entities. For
  example, a `UserEntity` may have an `OWNERSHIP` association with an
  `EndpointEntity`, alongside a `GEO_LOCATION` association with a `GeoLocation`.
  The semantics for each association type are detailed in `BindingType`.
  """
  associations(bindingTypes: [BindingType!]): [Association!]!
  containerType: EntityContainerType!
  creationTime: DateTime!

  """
  The entity's unique identifier.
  """
  entityId: UUID!
  hasADDomainAdminRole: Boolean

  """
  A convenience function that checks the `roles` field for the existence of at least one role matching the criteria.

  ```graphql
  {
    entities(minRiskScoreSeverity: MEDIUM, archived: false, first: 5)
    {
      nodes
      {
        type
        primaryDisplayName
        ... on UserEntity
        {
          isHuman: hasRole(type: HumanUserAccountRole)
          isProgrammatic: hasRole(type: ProgrammaticUserAccountRole)
          isAdmin: hasRole(type: AdminAccountRole)
        }
        ... on EndpointEntity
        {
          isWorkstation: hasRole(type: WorkstationRole)
          isServer: hasRole(type: WorkstationRole)
        }
        isManuallyClassified: hasRole(confirmed: true)
      }
    }
  }
  ```
  """
  hasRole(
    confirmed: Boolean
    fullPath: String
    probability: Float
    type: EntityRoleType
  ): Boolean

  """
  If `true`, the system has gathered enough information to consider this entity *learned*.
  """
  learned: Boolean!

  """
  For marked entities, this is set to the last time the entity was marked.
  """
  markTime: DateTime

  """
  Query open incidents for this entity.
  """
  openIncidents(
    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Query by any value of `AlertType`. At least one of the alerts for an
    incident should be of any of the given alert types for the incident to match.
    """
    alertTypes: [AlertType!]

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Query for incidents created on or after the specific date.
    """
    createdAfter: DateTimeInput

    """
    Query for incidents created before the specific date.
    """
    createdBefore: DateTimeInput

    """
    Query by the attributes of any entity involved in a `compromisedEntities` incident (see `Incident:compromisedEntities`).
    """
    entityQuery: EntityQueryInput

    """
    Query up to the first specified number of entries.
    """
    first: Int

    """
    Query up to the last specified number of entries.
    """
    last: Int

    """
    Query by any value of `Incident:lifeCycleStage`.
    """
    lifeCycleStages: [IncidentLifeCycleStage!]
    nameSearch: String
    patternIds: [Int!]

    """
    Query by any value of `Incident:severity`.
    """
    severities: [IncidentSeverity!]

    """
    Use the specified key as the primary sort-key to sort the results by.
    """
    sortKey: IncidentSortKey = INCIDENT_ID

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING

    """
    Query by any value of `Incident:type`.
    """
    types: [IncidentType!]

    """
    Query for incidents updated on or after the specific date.
    """
    updatedAfter: DateTimeInput

    """
    Query for incidents updated before the specific date.
    """
    updatedBefore: DateTimeInput
  ): IncidentConnection
    @deprecated(
      reason: "\"openIncidents\" is deprecated and will be removed in a future release"
    )

  """
  The primary display name used to represent this entity in user-facing data.

  The primary display name is typically shorter than the secondary display name,
  but is much less likely to be unique across the organization or network. For
  further details on the semantics, see the documentation for specific types.
  """
  primaryDisplayName: String!

  """
  A list of risk factors contributing to the overall risk of this entity, sorted
  by `RiskFactorContribution:score` in descending order.
  """
  riskFactors(types: [RiskFactorType!]): [EntityRiskFactor!]!

  """
  The entity's risk score represented as a number from 0 (no or unknown risk) through 1 (maximum risk).
  """
  riskScore: ZeroToOneNumber!

  """
  The entity's risk score derived from `riskScore`.
  """
  riskScoreSeverity: ScoreSeverity!

  """
  A list of roles fulfilled by this entity, each defining the entity's classification or organizational-function aspect.

  For example, a `UserEntity` representing an *account operator* in an Active
  Directory domain should have an `AccountOperatorsAdminRole` entry on this
  list. Should the system later learn this privileged account is used by a
  script rather than a human, its associated entity will also have a
  `ProgrammaticUserAccountRole`. Similarly, when the system learns that some
  `EndpointEntity` belongs to a VDI cluster, it tags it with a
  `VdiEndpointRole`.The model for roles is hierarchical. For example, the
  aforementioned `AccountOperatorsAdminRole` is a specialization of
  `OperatorLevelAdminRole`, which by itself is a specialization of
  `AdminAccountRole`.

  When roles are queried, this hierarchy is always taken into account.
  Therefore, querying an entity about the existence of a role also implies that
  all of its direct and indirect specializations will be queried too. This
  hierarchy is completely reflected by GraphQL inheritance. For instance, you
  can see that `ExchangeServerRole` implements `ApplicationServerRole`,  and
  that the latter implements `ServerRole`.

  For your convenience, `EntityRole:fullPath` can be projected on the role
  itself, reperesenting the role type ancestry as breadcrumbs. See
  `EntityRoleType` for query examples.
  """
  roles: [EntityRole!]

  """
  The secondary display name is used to represent unique name for this entity in the organization or the network.
  """
  secondaryDisplayName: String!

  """
  The entity type, which also determines the specialized Entity subclass to be returned (see `EntityType`).
  """
  type: EntityType!

  """
  If `true`, this entity appears on the system watchlist.
  """
  watched: Boolean!
}

enum EntityContainerType {
  ACTIVE_DIRECTORY_GROUP
  AZURE_GROUP
  AZURE_ROLE
  AWS_GROUP
}

"""
A `Entity` edge in a connection.
"""
type EntityEdge {
  """
  Cursor pointing to this edge, to be used in standard pagination query arguments (`before`, `after`).
  """
  cursor: Cursor!

  """
  The `Entity` item at the end of this edge.
  """
  node: Entity!
}

type EntityImpl implements Entity {
  accounts: [AccountDescriptor!]!
  archived: Boolean!
  associations(bindingTypes: [BindingType!]): [Association!]!
  creationTime: DateTime!
  entityId: UUID!
  hasADDomainAdminRole: Boolean
  hasRole(
    confirmed: Boolean
    fullPath: String
    probability: Float
    type: EntityRoleType
  ): Boolean
  learned: Boolean!
  markTime: DateTime
  openIncidents(
    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Query by any value of `AlertType`. At least one of the alerts for an
    incident should be of any of the given alert types for the incident to match.
    """
    alertTypes: [AlertType!]

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Query for incidents created on or after the specific date.
    """
    createdAfter: DateTimeInput

    """
    Query for incidents created before the specific date.
    """
    createdBefore: DateTimeInput

    """
    Query by the attributes of any entity involved in a `compromisedEntities` incident (see `Incident:compromisedEntities`).
    """
    entityQuery: EntityQueryInput

    """
    Query up to the first specified number of entries.
    """
    first: Int

    """
    Query up to the last specified number of entries.
    """
    last: Int

    """
    Query by any value of `Incident:lifeCycleStage`.
    """
    lifeCycleStages: [IncidentLifeCycleStage!]
    nameSearch: String
    patternIds: [Int!]

    """
    Query by any value of `Incident:severity`.
    """
    severities: [IncidentSeverity!]

    """
    Use the specified key as the primary sort-key to sort the results by.
    """
    sortKey: IncidentSortKey = INCIDENT_ID

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING

    """
    Query by any value of `Incident:type`.
    """
    types: [IncidentType!]

    """
    Query for incidents updated on or after the specific date.
    """
    updatedAfter: DateTimeInput

    """
    Query for incidents updated before the specific date.
    """
    updatedBefore: DateTimeInput
  ): IncidentConnection
    @deprecated(
      reason: "\"openIncidents\" is deprecated and will be removed in a future release"
    )
  primaryDisplayName: String!
  riskFactors(types: [RiskFactorType!]): [EntityRiskFactor!]!
  riskScore: ZeroToOneNumber!
  riskScoreSeverity: ScoreSeverity!
  roles: [EntityRole!]
  secondaryDisplayName: String!
  type: EntityType!
  watched: Boolean!
}

enum EntityMembershipType {
  USER_IN_DEPARTMENT
  USER_IN_ORGANIZATIONAL_UNIT
}

"""
Query criteria for filtering results by `Entity` attributes.

All specified criteria must be met for a result to match.
"""
input EntityQueryInput {
  """
  Query for entities which were created before the specified date.
  """
  accountCreationEndTime: DateTimeInput

  """
  Query for entities which were created on or after the specified date.
  """
  accountCreationStartTime: DateTimeInput

  """
  Query for entities that have an account set to expire before the specified
  date (see `ActiveDirectoryAccountDescriptor::expirationTime`).

  ```graphql
  {
    ##### Accounts expiring in the next 3 months
    entities(accountExpirationStartTime: "P0D", # Now
             accountExpirationEndTime: "P3M", # Now + 3 months
             first: 100)
    {
      nodes
      {
        primaryDisplayName
        accounts
        {
          ... on ActiveDirectoryAccountDescriptor
          {
            expirationTime
          }
        }
      }
    }
  }
  ```
  """
  accountExpirationEndTime: DateTimeInput

  """
  Query for entities that have an account set to expire on or after the
  specified date (see `ActiveDirectoryAccountDescriptor::expirationTime`).

  ```graphql
  {
    ##### Accounts expiring in the next 3 months
    entities(accountExpirationStartTime: "P0D", # Now
             accountExpirationEndTime: "P3M", # Now + 3 months
             first: 100)
    {
      nodes
      {
        primaryDisplayName
        accounts
        {
          ... on ActiveDirectoryAccountDescriptor
          {
            expirationTime
          }
        }
      }
    }
  }
  ```
  """
  accountExpirationStartTime: DateTimeInput

  """
  Query for entities which are currently locked out of one of their accounts
  (see `ActiveDirectoryAccountDescriptor:enabled`). If `false`, query for all
  other entities.
  """
  accountLocked: Boolean

  """
  Query for entities having at least one account matching all of the specified query criteria.
  """
  accountQuery: EntityAccountQuery
  agentIds: [AgentId!]

  """
  The query is a match if all specified conditions are true
  """
  all: [EntityQueryInput!]

  """
  The query is a match if any of the specified conditions are true
  """
  any: [EntityQueryInput!]

  """
  Query for entities whose `Entity` attribute is set as `Entity:archived`.
  """
  archived: Boolean

  """
  Query for any value of `Entity:associations:bindingType`. A matching entity
  must have at least one `Association` of any of the specified binding types.
  """
  associationBindingTypes: [BindingType!]

  """
  Query for entities having at least one association matching all query criteria.

  ```graphql
  ##### List users regularly accessing Azure Portal
  {
      entities(
          associationQuery: {
              bindingTypes: [CLOUD_SERVICE_ACCESS]
              entityQuery: {
                  # Querying by primaryDisplayNames for demonstration purposes - It's generally recommended to use
                  # more reliable identifiers, such as the entityId (queryable via the entityIds argument)
                  primaryDisplayNames: ["Azure Portal"]
              }
          }
          types: [USER]
          archived: false
          first: 2)
      {
          nodes {
              primaryDisplayName
              secondaryDisplayName
          }
      }
  }
  ```
  """
  associationQuery: EntityAssociationQuery

  """
  Query for any value of `HumanUserAccountRole:businessRole`. Only entities classified as Human can be matched.
  """
  businessRoles: [BusinessRole!]

  """
  Query for entities that have at least one SSO account on a cloud service.
  """
  cloudEnabled: Boolean

  """
  Query for entities that have accounts only on cloud directories.
  """
  cloudOnly: Boolean
  containerTypes: [EntityContainerType!]

  """
  Query for any value of `AccountDescriptor.dataSource` in all entity's accounts.
  """
  dataSources: [DataSource!]

  """
  Query for any value of `ActiveDirectoryAccountDescriptor:department` in all
  entity's accounts. The search is case-insensitive.
  """
  departments: [String!]

  """
  Query for entities which are directly member of any of the Active Directory
  group entities matched by the given query input. To query all members, use the
  `memberOfActiveDirectoryGroups` query argument instead.

  #### Examples
  ```graphql
  #### Querying for group membership - direct vs. all memebers
  {
      # We're using then primaryDisplayName argument here for the sake of the demo. In production code, it's much
      # better to use a more reliable identifier, such as the entityIds or the secondaryDisplayNames query arguments.

      direct: entities(
          first: 2
          directMemberOfActiveDirectoryGroups: {
              primaryDisplayNames: ["Administrators"]
          }) {
          nodes {
              type
              primaryDisplayName
              secondaryDisplayName
          }
      }

      directAndIndirect: entities(
          first: 2
          memberOfActiveDirectoryGroups: {
             primaryDisplayNames: ["Administrators"]
          }) {
          nodes {
              type
              primaryDisplayName
              secondaryDisplayName
          }
      }
  }
  ```
  """
  directMemberOfActiveDirectoryGroups: EntityQueryInput

  """
  Query for entities which are member of any of the entity containers matched by the given query input.
  """
  directMemberOfContainers: EntityQueryInput

  """
  Query for any value of `ActiveDirectoryEntryDescriptor:domain` in all entity's
  accounts using a `WildcardPattern` search. The search is case-insensitive.
  """
  domainPattern: WildcardPattern

  """
  Query for any value of `ActiveDirectoryEntryDescriptor:domain` in all entity's accounts. The search is case-insensitive.
  """
  domains: [String!]
  duplicatePasswordGroupId: String

  """
  Query for any value of `UserEndpoint:emailAddress` using a `WildcardPattern` search. The search is case-insensitive.
  """
  emailAddressPattern: WildcardPattern
  emailAddresses: [String!]

  """
  Query for value of `AccountDescriptor:enabled` in all entity's accounts.
  """
  enabled: Boolean

  """
  Query for entities which are either `enabled` or `unmanaged`.
  """
  enabledOrUnmanaged: Boolean

  """
  Query for any value of `Entity:entityId`.
  """
  entityIds: [UUID!]
  hasAccount: Boolean

  """
  Query for entities one of whose accounts has an aged password (see `PasswordAttributes:aged`).
  """
  hasAgedPassword: Boolean
  hasAgent: Boolean
  hasAnySPN: Boolean
  hasEmailAddress: Boolean

  """
  Query for entities one of whose accounts has an exposed password (see `PasswordAttributes:exposed`).
  """
  hasExposedPassword: Boolean
  hasLinkedAccounts: Boolean

  """
  Query for entities one of whose accounts has a never-expiring password (see `PasswordAttributes:mayExpire`).
  """
  hasNeverExpiringPassword: Boolean

  """
  Query for entities which participate in at least one open incident (see `Incident:state`).
  """
  hasOpenIncidents: Boolean
  hasStaticIpAddress: Boolean

  """
  Query for endpoint entities with a vulnerable operating system (see `EndpointEntity::operatingSystemInfo`).

  All `OperatingSystemVulnerability` values except `NONE` and `UNKNOWN` are considered *vulnerable*.
  """
  hasVulnerableOs: Boolean

  """
  Query for entities one of whose accounts has a weak password (see `PasswordAttributes:strength`).
  """
  hasWeakPassword: Boolean

  """
  Query for any value of `EndpointEntity:hostName` using a `WildcardPattern` search. The search is case-insensitive.
  """
  hostNamePattern: WildcardPattern

  """
  Query for any value of `EndpointEntity:hostName`. The search is case-insensitive.
  """
  hostNames: [String!]
  id: UUID
  ids: [UUID!]

  """
  Query for endpoints typically used for impersonation. An `impersonator `
  endpoint has at least one `ServerRole` (or one of its sub-types) for which
  `ServerRole:impersonator` is set to `true`.
  """
  impersonator: Boolean

  """
  Query for entities whose `ActivityParticipatingEntity` attribute is set as `ActivityParticipatingEntity:inactive`.
  """
  inactive: Boolean
  insightCounterId: ObjectId
  insightsQuery: JSON
  lastUpdateEndTime: DateTimeInput
  lastUpdateStartTime: DateTimeInput

  """
  Query for a value of `Entity:learned`.
  """
  learned: Boolean
  linkingSuggestions: UUID
  localAdminEntityIds: [UUID!]

  """
  Query for marked entities (see `Entity:markTime`).
  """
  marked: Boolean

  """
  Query for a maximal value of `Entity:riskScoreSeverity`.
  """
  maxRiskScoreSeverity: ScoreSeverity

  """
  Query for entities which are member of any of the Active Directory group
  entities matched by the given query input, directly via another group. To
  query for direct members only, use the `directMemberOfActiveDirectoryGroups`
  query argument instead.

  #### Examples
  ```graphql
  #### Querying for group membership - direct vs. all memebers
  {
      # We're using then primaryDisplayName argument here for the sake of the demo. In production code, it's much
      # better to use a more reliable identifier, such as the entityIds or the secondaryDisplayNames query arguments.

      direct: entities(
          first: 2
          directMemberOfActiveDirectoryGroups: {
              primaryDisplayNames: ["Administrators"]
          }) {
          nodes {
              type
              primaryDisplayName
              secondaryDisplayName
          }
      }

      directAndIndirect: entities(
          first: 2
          memberOfActiveDirectoryGroups: {
             primaryDisplayNames: ["Administrators"]
          }) {
          nodes {
              type
              primaryDisplayName
              secondaryDisplayName
          }
      }
  }
  ```
  """
  memberOfActiveDirectoryGroups: EntityQueryInput

  """
  Query for entities which are member of any of the entity containers matched by
  the given query input, directly via another group. To query for direct members
  only, use the `directMemberOfContainers` query argument instead.
  """
  memberOfContainers: EntityQueryInput

  """
  Query for a minimal value of `Entity:riskScoreSeverity`.
  """
  minRiskScoreSeverity: ScoreSeverity

  """
  Query for entities with any recorded network activity before the specified date.
  """
  mostRecentActivityEndTime: DateTimeInput

  """
  Query for entities with any recorded network activity on of after the specified date.
  """
  mostRecentActivityStartTime: DateTimeInput

  """
  Query for entities with any recorded on premise network activity before the specified date.
  """
  mostRecentOnPremiseActivityEndTime: DateTimeInput

  """
  Query for entities with any recorded on premise network activity on of after the specified date.
  """
  mostRecentOnPremiseActivityStartTime: DateTimeInput

  """
  Query for entities with any recorded SSO network activity before the specified date.
  """
  mostRecentSSOActivityEndTime: DateTimeInput

  """
  Query for entities with any recorded SSO network activity on of after the specified date.
  """
  mostRecentSSOActivityStartTime: DateTimeInput
  nameSearch: String
  neverLoggedOn: Boolean

  """
  The query is a match if this conditions are not true

  ```graphql
  ##### List privileged entities, except those who have Extensive Local Administrators role
  {
      entities(roles: [AdminAccountRole]
               not: {roles: [LocalAdminRole]}
               archived: false
               first: 2)
      {
          nodes {
              primaryDisplayName
              secondaryDisplayName
              roles {
                  type
              }
          }
      }
  }
  ```
  """
  not: EntityQueryInput
  objectSids: [String!]
  operatingSystemFamilies: [String!]
  ouPattern: WildcardPattern
  ous: [String!]

  """
  Query for user entities whose password changed before the specified date.
  """
  passwordLastChangeEndTime: DateTimeInput

  """
  Query for user entities whose password changed on or after the specified date.
  """
  passwordLastChangeStartTime: DateTimeInput
  passwordTokens: [Token!]

  """
  Query for any value of `Entity:primaryDisplayName` using a `WildcardPattern` search. The search is case-insensitive.
  """
  primaryDisplayNamePattern: WildcardPattern

  """
  Query for any value of `Entity:primaryDisplayName`.
  """
  primaryDisplayNames: [String!]

  """
  Query for any value of `RiskFactorContribution:type` given each entity's risk factors (see `riskFactors`).
  """
  riskFactorTypes: [RiskFactorType!]

  """
  Query for entities whose risk-score is equal or greater than the specified value.
  """
  riskScoreLowerBound: ZeroToOneNumber

  """
  Query for entities whose risk-score is lower than the specified value.
  """
  riskScoreUpperBound: ZeroToOneNumber

  """
  Query for user entities having a RBAC role assignment association matching query criteria

  ```graphql
  ##### List role display names associated with the following scope id
  {
      entities(first:1, associationBindingTypes: [RBAC_ASSIGNMENT],
          roleAssignmentAssociationQuery: {
              scopeIds: ["dedf3e09-aa9a-4f7e-b3f1-9a30ea597797"]
          }) {
          nodes {
              associations {
                  ... on SsoRbacAssignmentAssociation {
                      roles {
                          displayName
                      }
                  }
              }
          }
      }
  }
  ```
  """
  roleAssignmentAssociationQuery: RoleAssignmentAssociationQuery

  """
  **Deprecated**. Use `roles`, `all` instead.
  """
  roleGroups: [[EntityRoleType!]!]

  """
  Query `Entity:roles`. A matching entity is guaranteed to have at least one of the specified role types.
  """
  roles: [EntityRoleType!]

  """
  Query for any value of `ActiveDirectoryAccountDescriptor:samAccountName` in
  all entity's accounts using a `WildcardPattern` search. The search is
  case-insensitive.
  """
  samAccountNamePattern: WildcardPattern

  """
  Query for any value of `ActiveDirectoryAccountDescriptor:samAccountName` in
  all entity's accounts. The search is case-insensitive.

  ```graphql
  ##### Look up a user by their sam-account-name
  {
    # Query for the built-in "Administrator" account.
    # This is merely an illustration of the samAccountNames query argument.
    # See the roles query argument for more powerful options to query
    # privileged accounts
    entities(samAccountNames: ["administrator"]
             # Uncomment and fill in your domain here to ensure
             # a single match
             # domain: "MY.DOMAIN"
             archived: false
             first: 1)
    {
      nodes {
        entityId
        primaryDisplayName
        secondaryDisplayName
        roles
        {
          type
        }
          ... on UserOrEndpointEntity
          {
            riskScoreSeverity
          }
      }
    }
  }
  ```
  """
  samAccountNames: [String!]

  """
  Query for any value of `Entity:secondaryDisplayName` using a `WildcardPattern` search. The search is case-insensitive.
  """
  secondaryDisplayNamePattern: WildcardPattern

  """
  Query for any value of `Entity:secondaryDisplayName`.
  """
  secondaryDisplayNames: [String!]

  """
  Query for entities whose `UserOrEndpointEntity` attribute is set as `UserOrEndpointEntity:shared`.
  """
  shared: Boolean

  """
  Query for entities whose `ActivityParticipatingEntity` attribute is set as `ActivityParticipatingEntity:stale`.
  """
  stale: Boolean
  tenants: [String!]
  type: EntityType

  """
  Query for any value of `Entity:type`.
  """
  types: [EntityType!]

  """
  Query for unmanaged endpoints (see `EndpointEntity:unmanaged`).
  """
  unmanaged: Boolean
  userAccountControlFlags: [UserAccountControlFlags!]

  """
  Query for any instance of `Entity:watched`.
  """
  watched: Boolean
}

interface EntityRiskFactor {
  score: ZeroToOneNumber!
  severity: ScoreSeverity!
  type: RiskFactorType!
}

type EntityRiskFactorImpl implements EntityRiskFactor {
  score: ZeroToOneNumber!
  severity: ScoreSeverity!
  type: RiskFactorType!
}

interface EntityRole {
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

type EntityRoleImpl implements EntityRole {
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

enum EntityRoleType {
  OperatorLevelAdminRole
  AdminAccountRole
  AzurePrivilegedRole
  AzureGlobalPrivilegesRole
  AzureCredentialsPrivilegesRole
  AzureAccessPrivilegesRole
  AzureApplicationPrivilegesRole
  AzureSecurityPrivilegesRole
  AzurePrivilegedApplicationControllerRole
  AzureSecurityGroupRole
  AzureMicrosoft365GroupRole
  AzureDistributionGroupRole
  EffectiveAdminRole
  ServerRole
  ClassificationRole
  DomainLevelAdminRole
  ProgrammaticUserAccountRole
  ForestLevelAdminRole
  ApplicationServerRole
  AccountOperatorsAdminRole
  EffectiveReplicatorsAdminRole
  KrbtgtAccountAdminRole
  DomainControllersAdminRole
  ReadOnlyDomainControllersAdminRole
  ReplicatorsAdminRole
  MailboxRole
  PrivilegedGroupControllerAdminRole
  DnsServerRole
  DomainAdminsRole
  SchemaAdminsRole
  AdministratorsRole
  BuiltinAdministratorRole
  EnterpriseAdminsRole
  PasswordResetterAdminRole
  PermissionsControllerAdminRole
  ObjectSidTakeoverAdminRole
  BackupOperatorsAdminRole
  PrintOperatorsAdminRole
  ServerOperatorsAdminRole
  ServiceDelegationAdminRole
  UnconstrainedServiceDelegationAdminRole
  ConstrainedServiceDelegationAdminRole
  FileServerRole
  HumanUserAccountRole
  WorkstationRole
  NtlmMovementRole
  DomainControllerRole
  VdiEndpointRole
  ExchangeServerRole
  LocalAdminRole
  BusinessPrivilegeRole
  ContainerRole
  PermissionAssignerRole
  MailingListRole
  SecurityGroupRole
  DistributionGroupRole
  HoneytokenRole
  CertificateAuthorityServerRole
  CertificateAuthorityAdminRole
  AuthenticationCertificateTemplateControllerRole
  KeyCredentialAdminRole
  OwnerAdminRole
  CertificateAuthenticationAsAnyDomainUserRole
  AuthenticationAsAnyUserWithCertificateRequestAgentRole
}

"""
Enumeration of sort options for the `entities` query API.
"""
enum EntitySortKey {
  ENTITY_ID
  RISK_SCORE
  MOST_RECENT_ACTIVITY
  CREATION_TIME
  EXPIRATION_TIME
  OPEN_INCIDENT_COUNT
    @deprecated(
      reason: "`OPEN_INCIDENT_COUNT` is deprecated and will be removed in a future release"
    )
  PRIMARY_DISPLAY_NAME
  SECONDARY_DISPLAY_NAME
  OU
  DEPARTMENT
  LAST_UPDATE_TIME
}

"""
Enumeration of entity types.
"""
enum EntityType {
  """
  A user entity represents a user account by the `UserEntity` interface.
  """
  USER

  """
  An endpoint entity represents an endpoint in the network or in a directory by the `EndpointEntity` interface.
  """
  ENDPOINT

  """
  A cloud service entity represents a cloud application participating in SSO
  activities by the `CloudServiceEntity` interface.
  """
  CLOUD_SERVICE

  """
  An entity-container entity represents an entity group, such as an LDAP group
  of users, by the `EntityContainerEntity` interface.
  """
  ENTITY_CONTAINER
}

"""
An error descriptor. This common interface contains just a human-readable error
message. For more structural data which can be used programmatically, see the
specialized sub-types of this interface.
"""
interface ErrorDetails {
  """
  A human-readable error message describing an error or failure.
  """
  message: String!
}

type ErrorDetailsImpl implements ErrorDetails {
  message: String!
}

"""
A unique identifier for `timeline` events.
"""
scalar EventId

type ExchangeServerRole implements ApplicationServerRole & ServerRole & ClassificationRole & EntityRole {
  confirmed: Boolean!
  fullPath: String
  impersonator: Boolean!
  probability: Float
  type: EntityRoleType!
}

type ExposedLocalAdminsEntityRiskFactor implements EntityRiskFactor {
  exposedUsers: [ExposedLocalUserData!]!
  score: ZeroToOneNumber!
  severity: ScoreSeverity!
  type: RiskFactorType!
}

type ExposedLocalUserData {
  accountName: String!
  domain: String
  gpoName: String
}

enum FileOperationType {
  GENERIC_ACCESS
  MODIFY
  DOWNLOAD
  MOVE
  COPY
  RENAME
  DELETE
  UPLOAD
}

type FileServerRole implements ApplicationServerRole & ServerRole & ClassificationRole & EntityRole {
  confirmed: Boolean!
  fullPath: String
  impersonator: Boolean!
  probability: Float
  type: EntityRoleType!
}

interface ForestLevelAdminRole {
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  builtin: Boolean!
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

type GeoJsonProperties {
  countryCode: JSON
  stateCode: JSON
  cityCode: JSON
  accuracyRadius: JSON
}

enum GeoJsonType {
  Point
  MultiPoint
  LineString
  MultiLineString
  Polygon
  MultiPolygon
  GeometryCollection
}

"""
An object representing a geographical location.

The fields `coordinates`, `type`, and `properties` should be used only for
compatibility with [GeoJSON](http://geojson.org/) compatibility. Otherwise, they
can be replaced with more user-friendly fields that retrieve the same information.

```graphql
{
  # An IDAAS connector must be configured for this query to return any results.
  timeline(
    first: 1
    categories: ACTIVITY
    dataSourceCategories: [IDAAS]
    sortOrder: DESCENDING)
  {
    nodes
    {
      ... on TimelineUserOnEndpointActivityEvent
      {
        geoLocation
        {
          longitude
          latitude
          longitude
          countryCode
          stateCode
          cityCode
          accuracyRadius

          # These fields are not available in geo-json form
          country
          city
          blacklisted
          whitelisted
          timeZone
        }

        # Alternative, geo-json projection
        geoJsonFrom: geoLocation {
          type
          coordinates
          properties {
            countryCode
            stateCode
            cityCode
            accuracyRadius
          }
        }
      }
    }
  }
}
```
"""
type GeoLocation {
  """
  The accuracy radius reported for this location.
  """
  accuracyRadius: Int

  """
  Returns `true` if the country associated with this location appears on the user-configured blacklist.
  """
  blacklisted: Boolean

  """
  If the city for this location is identified, its name is returned. Prefer `cityCode` for programmatic usage.
  """
  city: String

  """
  If the city for this location is identified, the respective city code is presented.
  """
  cityCode: Int

  """
  Location coordinates ordered as `(longitude, latitude)`.

  This field should be used only for GeoJSON compatibility. It retrieves the
  same data as the `longitude` and `latitude` properties.
  """
  coordinates: [Float!]!

  """
  If the country for this location is identified, its name is returned. Prefer `countryCode` for programmatic usage.
  """
  country: String

  """
  If the country for this location is identified, it is represented as a
  [two-letter ISO-3166-1 country
  code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
  """
  countryCode: String

  """
  The location latitude
  """
  latitude: Float!

  """
  The location longitude
  """
  longitude: Float!

  """
  Additional properties (besides coordinates) known for this location.

  This field should be used only for GeoJSON compatibility. It retrieves the same data as non-nested fields,
  """
  properties: GeoJsonProperties

  """
  If the state for this location is identified, the respective state code is presented.
  """
  stateCode: String

  """
  GeoJSON's `type` field (always returns `Point`)
  """
  type: GeoJsonType!

  """
  Returns `true` if the country associated with this location appears on the user-configured whitelist.
  """
  whitelisted: Boolean
}

"""
An association between two entities. The nature of the association and the specific subtype are determined by `bindingType`.

**Symmetric vs. Asymmetric**: Depending on the binding type, an association can
be symmetric or asymmetric. A symmetric association is set on both participating
entities, each pointing to the other one. For example, the `LOGIN` association
is symmetric. Therefore, if a user has a `LOGIN` association with an endpoint,
the endpoint should have the same association with the user. Conversely, if a
user has a `SERVICE_ACCESS` association with a server, the server is not
supposed to have the same association with the user, because the
`SERVICE_ACCESS` association is asymmetric. The documentation for `BindingType`
specifies which binding types are symmetric and which are asymmetric.
"""
type GeoLocationAssociation implements Association {
  """
  The association binding type, which also determines the specific `Association` subtype of this instance.
  """
  bindingType: BindingType!
  geoLocation: GeoLocation!
}

type GpoBasedRiskEntityFactor implements EntityRiskFactor {
  effectiveGpos: [EffectiveGpo!]!
  score: ZeroToOneNumber!
  severity: ScoreSeverity!
  type: RiskFactorType!
}

type HoneytokenRole implements ClassificationRole & EntityRole {
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

type HumanUserAccountRole implements ClassificationRole & EntityRole {
  businessRole: BusinessRole!
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

"""
A malicious event or a sequence of related events that may lead or have already
led to a significant disruption or degradation of network availability and
security or business continuity.
"""
type Incident {
  """
  List of all alert events contained by this incident. This is a simplified
  version of the `timeline` field, restricting the query to alert events and
  avoiding inner pagination.
  """
  alertEvents: [TimelineAlertEvent!]!

  """
  Comments attached to this incident.
  """
  comments: [IncidentComment!]!

  """
  Consolidated list of entities which are considered compromised in the context
  of this incident. The list items are sorted by importance in descending order.
  """
  compromisedEntities: [Entity!]!

  """
  The incident end time.
  """
  endTime: DateTime!

  """
  The incident unique identifier. This identifier can be later used to refetch the incident using the `incident` API.
  """
  incidentId: String!

  """
  The current incident life cycle stage.
  """
  lifeCycleStage: IncidentLifeCycleStage

  """
  If `true`, the incident is marked as read. An incident is automatically marked
  as read once it is opened in the user interface.
  """
  markedAsRead: Boolean!

  """
  The incident severity.
  """
  severity: IncidentSeverity!

  """
  The incident start time.
  """
  startTime: DateTime!

  """
  Fetches events associated with this incident. By default, only alerts (see
  `TimelineEventAlert`) are filtered. For a broader context, list additional
  events associated with the entities involved in this incident during its
  lifecyles by setting `includeContextualEvents` to `true`.

  If you wish to query alert events only, you may prefer to project
  `alertEvents`, which is a simplified, unpaginated version of this field.
  """
  timeline(
    """
    If `true`, contextual events will be listed in addition to alerts. Such
    events are typically associated with one or more of the compromised
    entities, and may happen either during or close to the incident time-window.
    """
    includeContextualEvents: Boolean = false

    """
    Event types to be excluded from the query. Usually used in conjunction with `includeContextualEvents`.
    """
    excludedTypes: [TimelineEventType!] = []

    """
    Query criteria for activity events. The query criteria are only applied to
    activity events and ignored otherwise. If you wish to only query activity
    events, specify either `types` or `categories`.
    """
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Query criteria for alert events. The query criteria are only applied to
    alert events and ignored otherwise. If you wish to only query activity
    events, specify either `types` or `categories`.
    """
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Query by any category of `TimelineEvent:type`.
    """
    categories: [TimelineEventCategory!]

    """
    Query by any value of `TimelineEvent:eventId`.
    """
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int

    """
    Query up to the last specified number of entries.
    """
    last: Int

    """
    If `true`, query only *open* events or events without a state notion at all.
    If `false`, query only closed events (e.g. closed
    `TimelineNotificationEvent` events)

    The exact semantics of `open` depends on the matched event type.
    """
    open: Boolean

    """
    Query criteria for policy events. The query criteria are only applied to
    policy events and ignored otherwise. If you wish to only query activity
    events, specify either `types` or `categories`.
    """
    policyQuery: PolicyQueryInput

    """
    Query for events related to another event by its event ID.
    """
    relatedTo: EventId

    """
    Query by any value of `TimelineEvent:severity`.
    """
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING

    """
    Query criteria for the *source endpoint* entity. The matched entity may be any of the following:
    * `TimelineUserOnEndpointActivityEvent:endpointEntity`
    * `TimelinePolicyRuleMatchEvent:sourceEndpointEntity`
    * `TimelineAlertEvent:endpointEntity`
    """
    sourceEndpointQuery: EntityQueryInput

    """
    Query criteria for the *source* entity. The matched entity may be any of the following:
    * `TimelineEntityEvent:entity`
    * `TimelineUserOnEndpointActivityEvent:userEntity`
    * `TimelinePolicyRuleMatchEvent:sourceEntity`
    * `TimelineAlertEvent:userEntity`
    """
    sourceEntityQuery: EntityQueryInput

    """
    Query criteria for system notification events. The query criteria are only
    applied to  system notification events and ignored otherwise. If you wish to
    only query activity events, specify either `types` or `categories`.
    """
    systemNotificationQuery: SystemNotificationQueryInput

    """
    Query criteria for the *target endpoint* entity. The matched entity may be any of the following:
    * `TimelineUserOnEndpointActivityEvent:targetEndpointEntity`
    * `TimelinePolicyRuleMatchEvent:targetEndpoint`
    """
    targetEndpointQuery: EntityQueryInput

    """
    Query criteria for the *target entity* entity. The matched entity may be any of the following:
    * `TimelineServiceAccessEvent:targetServiceEntity`
    * `TimelinePolicyRuleMatchEvent:targetEntity`
    """
    targetEntityQuery: EntityQueryInput
  ): TimelineEventConnection!

  """
  The incident type.
  """
  type: IncidentType!
}

"""
Descriptor of an `Incident` comment.
"""
type IncidentComment {
  """
  The system user who added this comment.
  """
  author: SystemUser!

  """
  The comment.
  """
  text: String!

  """
  The time at which the comment was added.
  """
  timestamp: DateTime!
}

"""
A [Relay-Compatible](https://facebook.github.io/relay/graphql/connections.htm)
Connection type for paginating over `Incident` elements.
"""
type IncidentConnection {
  """
  List of `Incident` edges.
  """
  edges: [IncidentEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A convenience extension to the standard Relay Connection type, directly
  exposing the `Incident` elements, which may be used *instead* of edges. It is
  primarily useful in conjunction with `startCursor` and `endCursor`, or when
  exploring the API interactively (e.g. in GraphiQL).
  """
  nodes: [Incident!]!
}

"""
A `Incident` edge in a connection.
"""
type IncidentEdge {
  """
  Cursor pointing to this edge, to be used in standard pagination query arguments (`before`, `after`).
  """
  cursor: Cursor!

  """
  The `Incident` item at the end of this edge.
  """
  node: Incident!
}

"""
Enumeration of `Incident` life-cycle stages.
"""
enum IncidentLifeCycleStage {
  NEW
  IN_PROGRESS
  DISMISS
  FALSE_POSITIVE
  RESOLVED
  AUTO_RESOLVED
}

"""
An enumeration of incident life cycle stages valid as input for mutations (a subset of `IncidentLifeCycleStage`).
"""
enum IncidentLifeCycleStageInput {
  NEW
  IN_PROGRESS
  DISMISS
  FALSE_POSITIVE
    @deprecated(
      reason: "`FALSE_POSITIVE` is deprecated and will be removed in a future release"
    )
  RESOLVED
}

"""
Enumeration of incident severities.
"""
enum IncidentSeverity {
  INFO
  LOW
  MEDIUM
  HIGH
}

"""
Enumeration of sort options for the `Incidents` query API.
"""
enum IncidentSortKey {
  """
  Sort by a value of `Incident:incidentId`.
  """
  INCIDENT_ID

  """
  Sort by a value of `Incident:severity`.
  """
  SEVERITY

  """
  Sort by a value of `Incident:startTime`.
  """
  START_TIME

  """
  Sort by a value of `Incident:endTime`.
  """
  END_TIME

  """
  Sort by a value of `Incident:type`.
  """
  TYPE

  """
  Sort by a value of `Incident:lifeCycleStage`.
  """
  STATUS
}

type IncidentState {
  author: SystemUser
  lifeCycleStage: IncidentLifeCycleStage!
  reason: String!
  timestamp: DateTime!
}

"""
Enumeration of `Incident` types.
"""
enum IncidentType {
  """
  Activity is classified as anomalous behavior pattern based on baseline and user similarity.
  """
  UNUSUAL_ENDPOINT_ACCESS

  """
  A user request to service is classified as anomalous behavior pattern based on learned profile and user similarity.
  """
  UNUSUAL_SERVICE_ACCESS

  """
  User seen coming from a location that deviates from their baseline.
  """
  UNUSUAL_ENDPOINT_USE

  """
  Some activity may indicate start of reconnaissance. This happens when
  adversaries try to gather information on your domain.
  """
  SUSPICIOUS_DOMAIN_ACTIVITY

  """
  Anomalous user access patterns were detected. Such activities may indicate
  potential threats, such as endpoint infection, compromised account or other risks.
  """
  POTENTIAL_RISKY_ACTIVITY

  """
  In an advanced attack, a Domain Controller vulnerability was exploited and the entire domain has been compromised.
  """
  DOMAIN_COMPROMISE

  """
  An account's credentials may have been stolen.
  """
  CREDENTIAL_THEFT

  """
  An endpoint may be infected and controlled by a malicious party.
  """
  ENDPOINT_COMPROMISE

  """
  User is accessing and connecting from multiple locations, that are anomalous
  to the user baseline and their peer users. Such behavior may indicate
  potential lateral movement, domain reconnaissance, credentials theft and other risks.
  """
  SUSPICIOUS_MOVEMENT

  """
  Anomalous user access patterns were detected. Such activities may indicate
  potential threats, such as endpoint infection, compromised account or other risks.
  """
  UNUSUAL_ACTIVITY
}

type IncidentUpdateResult {
  clientMutationId: String
  incident: Incident!
}

type InvolvedEntitiesQueryInfo {
  archived: Boolean!
  domains: String!
  roles: String!
  types: String!
}

scalar IpAddress

input IpInfoList {
  ipList: [TrafficInspectionExclusionListInput!]!
  tag: String
}

input IpList {
  ipList: [String!]!
  tag: String
}

enum IpReputation {
  ANONYMOUS_ACTIVE
  ANONYMOUS_SUSPECT
  ANONYMOUS_INACTIVE
  ANONYMOUS_PRIVATE
  DICTIONARY_ATTACK
  DDOS_ATTACK
  SPAM
  HOSTING_FACILITY
}

type IpStatusOutput {
  ip: String!
  port: Int
  protocol: TrafficInspectionExclusionListProtocol
  status: TrafficInspectionExclusionListStatus!
}

enum IspClassification {
  COM
  ORG
  GOV
  MIL
  EDU
  LIB
  CDN
  ISP
  MOB
  DCH
  SES
  RSV
  ISP_MOB
  NONE
}

scalar JSON

enum KerberosEncryptionType {
  DES_CBC_CRC
  DES_CBC_MD4
  DES_CBC_MD5
  DES_CBC_RAW
  DES3_CBC_SHA
  DES3_CBC_RAW
  DES_HMAC_SHA1
  DSA_SHA1_CMS
  MD5_RSA_CMS
  SHA1_RSA_CMS
  RC2_CBC_ENV
  RSA_ENV
  RSA_ES_OAEP_ENV
  DES3_CBC_ENV
  DES3_CBC_SHA1
  AES128_CTS_HMAC_SHA1_96
  AES256_CTS_HMAC_SHA1_96
  AES128_CTS_HMAC_SHA256_128
  DES_CBC_MD5_NT
  RC4_HMAC_NT
  RC4_HMAC_NT_EXP
  CAMELLIA128_CTS_CMAC
  CAMELLIA256_CTS_CMAC
  RC4_MD4
  RC4_PLAIN2
  RC4_LM
  RC4_SHA
  DES_PLAIN
  RC4_HMAC_OLD
  RC4_PLAIN_OLD
  RC4_HMAC_OLD_EXP
  RC4_PLAIN_OLD_EXP
  RC4_PLAIN
  RC4_PLAIN_EXP
  AES128_CTS_HMAC_SHA1_96_PLAIN
  AES256_CTS_HMAC_SHA1_96_PLAIN
}

"""
A specialized `ErrorDetails` type for Kerberos activities.
"""
type KerberosErrorDetails implements ErrorDetails {
  """
  The standard Kerberos error code associated with the error.
  """
  krbError: KrbErrCode!

  """
  A human-readable error message describing an error or failure.
  """
  message: String!

  """
  The extended Microsoft-specific error code associated with the error, if any.
  """
  msSpecificError: ApplicationSpecificError
}

type KeyCredentialAdminRole implements EffectiveAdminRole & AdminAccountRole & EntityRole {
  affectedEntities: [Entity!]!
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  builtin: Boolean!
  confirmed: Boolean!
  effectedEntityIds: [UUID!] @deprecated(reason: "Use affectedEntities instead")
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

"""
An enumeration of the Kerberos protocol standard error codes.
"""
enum KrbErrCode {
  KDC_ERR_NONE
  KDC_ERR_NAME_EXP
  KDC_ERR_SERVICE_EXP
  KDC_ERR_BAD_PVNO
  KDC_ERR_C_OLD_MAST_KVNO
  KDC_ERR_S_OLD_MAST_KVNO
  KDC_ERR_C_PRINCIPAL_UNKNOWN
  KDC_ERR_S_PRINCIPAL_UNKNOWN
  KDC_ERR_PRINCIPAL_NOT_UNIQUE
  KDC_ERR_NULL_KEY
  KDC_ERR_CANNOT_POSTDATE
  KDC_ERR_NEVER_VALID
  KDC_ERR_POLICY
  KDC_ERR_BADOPTION
  KDC_ERR_ENCTYPE_NOSUPP
  KDC_ERR_SUMTYPE_NOSUPP
  KDC_ERR_PADATA_TYPE_NOSUPP
  KDC_ERR_TRTYPE_NOSUPP
  KDC_ERR_CLIENT_REVOKED
  KDC_ERR_SERVICE_REVOKED
  KDC_ERR_TGT_REVOKED
  KDC_ERR_CLIENT_NOTYET
  KDC_ERR_SERVICE_NOTYET
  KDC_ERR_KEY_EXP
  KDC_ERR_PREAUTH_FAILED
  KDC_ERR_PREAUTH_REQUIRED
  KDC_ERR_SERVER_NOMATCH
  KDC_ERR_MUST_USE_USER2USER
  KDC_ERR_PATH_NOT_ACCEPTED
  KDC_ERR_SVC_UNAVAILABLE
  KRB_AP_ERR_BAD_INTEGRITY
  KRB_AP_ERR_TKT_EXPIRED
  KRB_AP_ERR_TKT_NYV
  KRB_AP_ERR_REPEAT
  KRB_AP_ERR_NOT_US
  KRB_AP_ERR_BADMATCH
  KRB_AP_ERR_SKEW
  KRB_AP_ERR_BADADDR
  KRB_AP_ERR_BADVERSION
  KRB_AP_ERR_MSG_TYPE
  KRB_AP_ERR_MODIFIED
  KRB_AP_ERR_BADORDER
  KRB_AP_ERR_BADKEYVER
  KRB_AP_ERR_NOKEY
  KRB_AP_ERR_MUT_FAIL
  KRB_AP_ERR_BADDIRECTION
  KRB_AP_ERR_METHOD
  KRB_AP_ERR_BADSEQ
  KRB_AP_ERR_INAPP_CKSUM
  KRB_AP_PATH_NOT_ACCEPTED
  KRB_ERR_RESPONSE_TOO_BIG
  KRB_ERR_GENERIC
  KRB_ERR_FIELD_TOOLONG
  KDC_ERR_CLIENT_NOT_TRUSTED
  KDC_ERR_KDC_NOT_TRUSTED
  KDC_ERR_INVALID_SIG
  KDC_ERR_DH_KEY_PARAMETERS_NOT_ACCEPTED
  KDC_ERR_CERTIFICATE_MISMATCH
  KRB_AP_ERR_NO_TGT
  KDC_ERR_WRONG_REALM
  KRB_AP_ERR_USER_TO_USER_REQUIRED
  KDC_ERR_CANT_VERIFY_CERTIFICATE
  KDC_ERR_INVALID_CERTIFICATE
  KDC_ERR_REVOKED_CERTIFICATE
  KDC_ERR_REVOCATION_STATUS_UNKNOWN
  KDC_ERR_REVOCATION_STATUS_UNAVAILABLE
  KDC_ERR_CLIENT_NAME_MISMATCH
  KDC_ERR_INCONSISTENT_KEY_PURPOSE
  KDC_ERR_DIGEST_IN_CERT_NOT_ACCEPTED
  KDC_ERR_PA_CHECKSUM_MUST_BE_INCLUDED
  KDC_ERR_DIGEST_IN_SIGNED_DATA_NOT_ACCEPTED
  KDC_ERR_PUBLIC_KEY_ENCRYPTION_NOT_SUPPORTED
  KRB_AP_ERR_IAKERB_KDC_NOT_FOUND
  KRB_AP_ERR_IAKERB_KDC_NO_RESPONSE
  KRB_ERR_MAX
}

type KrbtgtAccountAdminRole implements DomainLevelAdminRole & AdminAccountRole & EntityRole {
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  builtin: Boolean!
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

enum LdapBindResult {
  SUCCESS
  OPERATION_ERROR
  PROTOCOL_ERROR
  TIME_LIMIT_EXCEEDED
  SIZE_LIMIT_EXCEEDED
  COMPARE_FALSE
  COMPARE_TRUE
  AUTH_METHOD_NOT_SUPPORTED
  STRONGER_AUTH_REQUIRED
  REFERRAL
  ADMIN_LIMIT_EXCEEDED
  UNAVAILABLE_CRITICIAL_EXTENSION
  CONFIDENTIALITY_REQUIRED
  SASL_BIND_IN_PROGRESS
  NO_SUCH_ATTRIBUTE
  UNDEFINED_TYPE
  INAPPROPRIATE_MATCHING
  CONSTANT_VIOLATION
  TYPE_OR_VALUE_EXISTS
  INVALID_SYNTAX
  NO_SUCH_OBJECT
  ALIAS_PROBLEM
  INVALID_DN_SYNTAX
  IS_LEAF
  ALIAS_DEREF_PROBLEM
  INAPPROPRIATE_AUTH
  INVALID_CREDENTIALS
  INSUFFICIENT_ACCESS
  BUSY
  UNAVAILABLE
  UNWILLING_TO_PERFORM
  LOOP_DETECT
  NAMING_VIOLATION
  OBJECT_CLASS_VIOLATION
  NOT_ALLOWED_ON_NONLEAF
  NOT_ALLOWED_ON_RDN
  ALREADY_EXISTS
  NO_OBJECT_CLASS_MODS
  RESULTS_TOO_LARGE
  AFFECTS_TO_MULTIPLE_DSAS
  BUILTIN_OTHER_CODE
  TLS_NOT_SUPPORTED
  OTHER
}

"""
A specialized `ErrorDetails` implementation for LDAP activities.
"""
type LdapErrorDetails implements ErrorDetails {
  """
  The LDAP operation result associated with the error.
  """
  ldapError: LdapOperationResult!

  """
  A human-readable error message describing an error or failure.
  """
  message: String!
}

enum LdapOperationResult {
  LDAP_SUCCESS
  LDAP_OPERATIONS_ERROR
  LDAP_PROTOCOL_ERROR
  LDAP_TIMELIMIT_EXCEEDED
  LDAP_SIZELIMIT_EXCEEDED
  LDAP_COMPARE_FALSE
  LDAP_COMPARE_TRUE
  LDAP_AUTH_METHOD_NOT_SUPPORTED
  LDAP_STRONG_AUTH_REQUIRED
  LDAP_REFERRAL
  LDAP_ADMINLIMIT_EXCEEDED
  LDAP_UNAVAILABLE_CRITICAL_EXTENSION
  LDAP_CONFIDENTIALITY_REQUIRED
  LDAP_SASL_BIND_IN_PROGRESS
  LDAP_NO_SUCH_ATTRIBUTE
  LDAP_UNDEFINED_TYPE
  LDAP_INAPPROPRIATE_MATCHING
  LDAP_CONSTRAINT_VIOLATION
  LDAP_TYPE_OR_VALUE_EXISTS
  LDAP_INVALID_SYNTAX
  LDAP_NO_SUCH_OBJECT
  LDAP_ALIAS_PROBLEM
  LDAP_INVALID_DN_SYNTAX
  LDAP_ALIAS_DEREF_PROBLEM
  LDAP_INAPPROPRIATE_AUTH
  INVALID_CREDENTIALS
  WRONG_USERNAME_CASING_OR_PASSWORD
  ACCOUNT_DOES_NOT_EXIST
  ACCOUNT_IS_LOCKED_OR_DISABLED
  CLOCK_SKEW
  ACCOUNT_PASSWORD_EXPIRED
  LDAP_INSUFFICIENT_ACCESS
  LDAP_BUSY
  LDAP_UNAVAILABLE
  LDAP_UNWILLING_TO_PERFORM
  LDAP_LOOP_DETECT
  LDAP_NAMING_VIOLATION
  LDAP_OBJECT_CLASS_VIOLATION
  LDAP_NOT_ALLOWED_ON_NONLEAF
  LDAP_NOT_ALLOWED_ON_RDN
  LDAP_ALREADY_EXISTS
  LDAP_NO_OBJECT_CLASS_MODS
  LDAP_AFFECTS_MULTIPLE_DSAS
  LDAP_DOMAIN_NOT_FOUND
  LDAP_CERTIFICATE_NOT_FOUND
  LDAP_CONNECT_ERROR
  LDAP_OTHER
}

enum LdapQuerySignature {
  GPO_SEARCH
  GROUP_MEMBERSHIP_ENUMERATION
  ACL_ENUMERATION
  SINGLE_ENTRY_QUERY
  SPN_ENUMERATION
  TRUST_ENUMERATION
  GPO_ENUMERATION
  USER_ENUMERATION
  ENDPOINT_ENUMERATION
  DC_ENUMERATION
  GROUP_ENUMERATION
  OU_ENUMERATION
  ALL_OBJECTS_ENUMERATION
  ADCS_ENUMERATION
  ADCS_MISCONFIG_ENUMERATION
  BLOODHOUND_SHARPHOUND
  SPN_ENUMERATION_IMPACKET
  BLOODHOUND_POWERSHELL
  SPN_ENUMERATION_KERBEROASTING
  SPN_ENUMERATION_EMPIRE
  SPN_ENUMERATION_POWERSPLOIT
  SPN_ENUMERATION_RUBEUS
  PREAUTH_ENUMERATION
  PREAUTH_ENUMERATION_RUBEUS
  DELEGATION_RECONNAISSANCE
  DELEGATION_RECONNAISSANCE_IMPACKET
  PREAUTH_ENUMERATION_CME
  DELEGATION_RECONNAISSANCE_CME
  ADMIN_COUNT_ENUMERATION
  ADMIN_COUNT_ENUMERATION_CME
  BLOODHOUND_PYTHON
  SPN_ENUMERATION_KERBEROAST
  ADFIND
  KRB_RELAY
  CERTIPY
  ADCS_RECON_TOOLS
  RUBEUS_ENUMERATION_DOMAIN_POLICY
  ADRECON_RECONNAISSANCE
  ML_HIGH_CONFIDENCE
}

enum LdapSecurityType {
  UNKNOWN
  NONE
  TLS
  SASL_INTEGRITY
  SASL_CONFIDENTIALITY
}

type LinkedAccountsRiskEntityFactor implements EntityRiskFactor {
  riskyLinkId: UUID!
  score: ZeroToOneNumber!
  severity: ScoreSeverity!
  type: RiskFactorType!
}

"""
A specialized `Association` type for entity associations
"""
type LocalAdminDomainEntityAssociation implements EntityAssociation & Association {
  """
  The association binding type, which also determines the specific `Association` subtype of this instance.
  """
  bindingType: BindingType!

  """
  The associated entity.
  """
  entity: Entity!
  entityType: EntityType!
  lastDataRefresh: DateTime!
  lastLogin: DateTime
}

"""
An association between two entities. The nature of the association and the specific subtype are determined by `bindingType`.

**Symmetric vs. Asymmetric**: Depending on the binding type, an association can
be symmetric or asymmetric. A symmetric association is set on both participating
entities, each pointing to the other one. For example, the `LOGIN` association
is symmetric. Therefore, if a user has a `LOGIN` association with an endpoint,
the endpoint should have the same association with the user. Conversely, if a
user has a `SERVICE_ACCESS` association with a server, the server is not
supposed to have the same association with the user, because the
`SERVICE_ACCESS` association is asymmetric. The documentation for `BindingType`
specifies which binding types are symmetric and which are asymmetric.
"""
type LocalAdminLocalUserAssociation implements Association {
  accountEnabled: Boolean!
  accountName: String!
  adminsSharingPassword: Int!

  """
  The association binding type, which also determines the specific `Association` subtype of this instance.
  """
  bindingType: BindingType!
  lastDataRefresh: DateTime!
  lastLogin: DateTime
  lastPasswordChange: DateTime
  objectSid: String!
}

type LocalAdminRole implements AdminAccountRole & EntityRole {
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  builtin: Boolean!
  confirmed: Boolean!
  endpointCount: Int!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

scalar Long

type MailboxRole implements ProgrammaticUserAccountRole & ClassificationRole & EntityRole {
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

interface MailingListRole {
  builtin: Boolean!
  confirmed: Boolean!
  emailAddresses: [String!]!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

type MfaConnectorDescriptor {
  connectorType: MfaConnectorType!
  providerType: String
}

"""
An enumeration of Multi-Factor Authentication connector types.
"""
enum MfaConnectorType {
  DUO_AUTH
  SECURE_AUTH_AUTH
    @deprecated(
      reason: "`SECURE_AUTH_AUTH` is deprecated and will be removed in a future release"
    )
  OKTA_AUTH
  SYMANTEC_VIP_AUTH
  RSA_AUTH
  RSA_CAS
  GOOGLE_AUTH
  AZURE_MFA
  AZURE_AUTH
  RADIUS
  PING_IDENTITY_MFA
  CYBER_ARK
  ONE_LOGIN
  ENTRUST
  FORGEROCK
  OIDC
  CS_FALCON_AUTH
}

type MfaEngagementSummary implements EngagementSummary {
  authorized: Boolean!
  authorizerId: UUID
  connectorDescriptor: MfaConnectorDescriptor
  engagementType: EngagementType!
  factorTypeSequence: [MfaFactorType!]!
}

"""
An enumeration of Multi-Factor Authentication factor types.
"""
enum MfaFactorType {
  PUSH
  PUSH_WITH_NUMBER_MATCHING
  PUSH_WITH_OTP_FALLBACK
  OTP
  CALL_OTP
  CALL_VERIFY
  CALL_VERIFY_WITH_PASSCODE
  SMS_1WAY
  SMS_2WAY
  DYNAMIC
  BIOMETRICS
  HARDWARE_OTP
  EMERGENCY_OTP
  FIDO
  GRID_CARD
  OIDC_AUTH
}

type Mutation {
  """
  Adds a comment to an incident.

  ```graphql
  mutation {
      addCommentToIncident(input: { comment: "The comment goes here", incidentId: "INC-123"}){
          incident {
              comments {
                  author {
                      displayName
                  }
                  text
              }
          }
      }
  }
  ```
  """
  addCommentToIncident(
    """
    Mutation input.
    """
    input: AddCommentToIncidentInput!
  ): IncidentUpdateResult!

  """
  The watchlist is a list of entities that require special attention. Use this
  command to add entities to the watchlist (see `Entity:watched`).

  ```graphql
  mutation watchSomeUser {
    addEntitiesToWatchList(input: {
      entityQuery: {
        samAccountNames: ["Administrator"]
        # Good practice when using samAccountName to avoid unexpected matches.
        # domains: ["MYDOMAIN.TLD"]
        # You may match users by their id.
      }
    })
    {
      updatedEntities
      {
        primaryDisplayName
        secondaryDisplayName
        watched
      }

      failures
      {
        entityIds
        errorDetails
        {
          message
        }
      }
    }
  }
  ```
  """
  addEntitiesToWatchList(
    """
    Mutation Input.
    """
    input: BulkEntityActionInput!
  ): BulkEntityActionResult!

  """
  *Deprecated*: use addToTrafficInspectionExclusionList.
  """
  addToIpWhiteList(
    """
    Mutation input.
    """
    input: IpInfoList!
  ): [IpStatusOutput!]!
    @deprecated(
      reason: "`addToIpWhiteList` is deprecated and will be removed in a future release"
    )

  """
  add ips to traffic inspection exclusion list.

  ```graphql
  mutation {
      addToTrafficInspectionExclusionList(input : { ipList : [{ip  : "ip 1"} ,
  {ip : "ip 2" , protocol : UDP , port : 8080 }]}){
          ip,status,protocol,port
      }
  }
  ```
  """
  addToTrafficInspectionExclusionList(
    """
    Mutation input.
    """
    input: IpInfoList!
  ): [IpStatusOutput!]!

  """
  Add the users or groups matched by `input.authorizerEntityQuery` query
  criteria as authorizers of the users matched by `input.entityQuery`.

  * This is an additive API: User or group entities previously set as
  authorizers for the matched user entities are not affected.
  `clearUserEntityAuthorizers` and  `removeUserEntityAuthorizers` may be used to
  unset authorizers. If you wish to replace all of the authorizers for the
  matched users, first call `clearUserEntityAuthorizers`.
  * The entity query must be selective and match no more than `1000` entities.

  ```graphql
  mutation addAuthorizers {
    #### Add SomeAuthorizersAccounts as authorizers for SomeAuthorizedAccounts
    addUserEntityAuthorizers(input: {
      authorizerEntityQuery: {
          samAccountNames: ["SomeAuthorizerAccount1","SomeAuthorizerAccount2"]
      }
      entityQuery: {
        accountQuery: {
          samAccountNames: ["SomeAuthorizedAccount1","SomeAuthorizedAccount2"]
        }
      }
    })
    {
      updatedEntities
      {
        primaryDisplayName
        secondaryDisplayName
      }

      failures
      {
        entityIds
        errorDetails
        {
          message
        }
      }
    }
  }
  ```
  """
  addUserEntityAuthorizers(
    input: AddUserEntityAuthorizerInput!
  ): BulkEntityActionResult!

  """
  Manually classify endpoint entities matching entity query criteria by the specified classification.

  ### Notes

  * If an empty list is passed as `input.classifications`, any manual
  classification previously set for the matching entities is removed, and the
  the default, automated classification behavior will take place instead.
  * Endpoints classified as Domain Controllers or Exchange servers may not be classified manually.
  * The entity query must be selective and match no more than `1000` entities.

  ```graphql
  mutation classifyVdiCluster {
    #### Classify all members of an OU as VDI endpoints
    classifyEndpointEntities(input: {
      entityQuery: {
        ous: ["mydomain.tld/Some_VDI_Cluster"]
      }
      classifications: [VDI_ENDPOINT]
    })
    {
      updatedEntities
      {
        primaryDisplayName
        secondaryDisplayName
        roles
        {
          type
        }
      }

      failures
      {
        entityIds
        errorDetails
        {
          message
        }
      }
    }
  }
  ```
  """
  classifyEndpointEntities(
    """
    The input for the manual classification mutation to be applied.
    """
    input: ClassifyEndpointEntityInput!
  ): BulkEntityActionResult!

  """
  Manually classify user entities matching entity query criteria by the specified classification.

  ### Notes

  * If an empty list is passed as `input.classifications`, any manual
  classification previously set for the matching entities is removed, and the
  the default, automated classification behavior will take place instead.
  * The entity query must be selective and match no more than `1000` entities.

  ```graphql
  mutation classifyAdministratorUser {
    #### Classify the built-in AD "Administrator" user as Human
    classifyUserEntities(input: {
      entityQuery: {
        accountQuery: {
          samAccountNames: ["Administrator"]
          # Good practice when using samAccountName to avoid unexpected matches.
          # domains: ["MYDOMAIN.TLD"]
          # You may match users by their id.
        }
      }
      classifications: [HUMAN]
    })
    {
      updatedEntities
      {
        primaryDisplayName
        secondaryDisplayName
        roles
        {
          type
        }
      }

      failures
      {
        entityIds
        errorDetails
        {
          message
        }
      }
    }
  }
  ```
  """
  classifyUserEntities(
    """
    The input for the manual classification mutation to be applied.
    """
    input: ClassifyUserEntityInput!
  ): BulkEntityActionResult!

  """
  Clears any authorizers set on the user entities matched by `input.entityQuery` query criteria.
  """
  clearUserEntityAuthorizers(
    input: BulkEntityActionInput!
  ): BulkEntityActionResult!

  """
  Use this command to mark an entity so that it can be easily identified in the
  UI. By default, the entity remains marked for 48 hours (see
  `Entity:markTime`).

  ```graphql
  mutation markSomeUser {
    markEntities(input: {
      entityQuery: {
        samAccountNames: ["Administrator"]
        # Good practice when using samAccountName to avoid unexpected matches.
        # domains: ["MYDOMAIN.TLD"]
        # You may match users by their id.
      }
    })
    {
      updatedEntities
      {
        primaryDisplayName
        secondaryDisplayName
        markTime
      }

      failures
      {
        entityIds
        errorDetails
        {
          message
        }
      }
    }
  }
  ```
  """
  markEntities(
    """
    Mutation input.
    """
    input: BulkEntityActionInput!
  ): BulkEntityActionResult!

  """
  The watchlist is a list of entities that require special attention. Use this
  command to remove entities from the watchlist (see `Entity:watched`).

  ```graphql
  mutation unwatchSomeUser {
    removeEntitiesFromWatchList(input: {
      entityQuery: {
        samAccountNames: ["Administrator"]
        # Good practice when using samAccountName to avoid unexpected matches.
        # domains: ["MYDOMAIN.TLD"]
        # You may match users by their id.
      }
    })
    {
      updatedEntities
      {
        primaryDisplayName
        secondaryDisplayName
        watched
      }

      failures
      {
        entityIds
        errorDetails
        {
          message
        }
      }
    }
  }
  ```
  """
  removeEntitiesFromWatchList(
    """
    Mutation Input.
    """
    input: BulkEntityActionInput!
  ): BulkEntityActionResult!

  """
  *Deprecated*: use removeFromTrafficInspectionExclusionList.
  """
  removeFromIpWhiteList(
    """
    Mutation input.
    """
    input: IpList!
  ): [IpStatusOutput!]!
    @deprecated(
      reason: "`removeFromIpWhiteList` is deprecated and will be removed in a future release"
    )

  """
  remove ips from traffic inspection exclusion list.

  ```graphql
  mutation {
      removeFromTrafficInspectionExclusionList(input : { ipList : [ "ip 1", "ip 2" ]}){
          ip,status,protocol,port
      }
  }
  ```
  """
  removeFromTrafficInspectionExclusionList(
    """
    Mutation input.
    """
    input: IpList!
  ): [IpStatusOutput!]!

  """
  Unset the users or groups matched by `input.authorizerEntityQuery` query
  criteria as authorizers of the users matched by `input.entityQuery`. The
  entity query must be selective and match no more than `1000` entities.
  """
  removeUserEntityAuthorizers(
    input: RemoveUserEntityAuthorizerInput!
  ): BulkEntityActionResult!
  setEntityLinkedAccounts(
    input: SetEntityLinkedAccountInput!
  ): BulkEntityActionResult!

  """
  Updates the incident life cycle stage.

  ```graphql
  mutation {
      setIncidentState(input: { lifeCycleStage: RESOLVED, incidentId: "INC-123", reason: "The reason goes here" }) {
          incident {
              lifeCycleStage
          }
      }
  }
  ```
  """
  setIncidentState(
    """
    Mutation input.
    """
    input: SetStateIncidentInput!
  ): IncidentUpdateResult!

  """
  Use this command to unmark a marked entity. By default, the entity remains marked for 48 hours (see `Entity:markTime`).

  ```graphql
  mutation markSomeUser {
    unmarkEntities(input: {
      entityQuery: {
        samAccountNames: ["Administrator"]
        # Good practice when using samAccountName to avoid unexpected matches.
        # domains: ["MYDOMAIN.TLD"]
        # You may match users by their id.
      }
    })
    {
      updatedEntities
      {
        primaryDisplayName
        secondaryDisplayName
        markTime
      }

      failures
      {
        entityIds
        errorDetails
        {
          message
        }
      }
    }
  }
  ```
  """
  unmarkEntities(
    """
    Mutation input.
    """
    input: BulkEntityActionInput!
  ): BulkEntityActionResult!
}

"""
An enumeration of network types (aka subnet types).
"""
enum NetworkType {
  """
  The fallback value indicating the network type could not be recognized.
  """
  UNKNOWN

  """
  Configuration-based network-type specifying a VPN subnet.
  """
  VPN

  """
  Indicates that the activity has originated from a public IP address.
  """
  PUBLIC

  """
  Configuration-based network-type specifying a wireless subnet.
  """
  WIRELESS

  """
  Configuration-based network-type specifying an internal organization subnet.
  """
  INTERNAL

  """
  Configuration-based network-type specifying a NAT subnet.
  """
  NAT
}

type NotificationState {
  dismissed: Boolean!
  lastUpdateTime: DateTime!
  resolved: Boolean!
  systemUser: SystemUser
}

"""
An enumeration of well-known error codes Microsoft uses in their NTLM protocol implementation.
"""
enum NtlmErrorCode {
  NO_NTLM_ERROR
  ACCESS_DENIED
  ACCOUNT_EXPIRATION
  INVALID_PASSWORD
  LOGON_FAILURE
  NO_SUCH_USER
  ACCOUNT_RESTRICTION
  INVALID_LOGON_HOURS
  INVALID_WORKSTATION
  PASSWORD_EXPIRED
  ACCOUNT_DISABLED
  LOGON_NOT_GRANTED
  LOGON_TYPE_NOT_GRANTED
  ACCOUNT_LOCKED_OUT
  USER_CHANGE_PASSWORD_NEXT_LOGON
  OTHER
}

"""
A specialized `ErrorDetails` type for NTLM activities.
"""
type NtlmErrorDetails implements ErrorDetails {
  """
  If the NTLM error is part of an LDAP authentication over NTLM, this is set to
  LDAP operation result associated with the failed LDAP authentication.
  """
  ldapError: LdapOperationResult

  """
  A human-readable error message describing an error or failure.
  """
  message: String!

  """
  The NTLM error code associated with this error.
  """
  ntlmError: NtlmErrorCode
}

type NtlmMovementRole implements ClassificationRole & EntityRole {
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

scalar ObjectId

type ObjectSidTakeoverAdminRole implements EffectiveAdminRole & AdminAccountRole & EntityRole {
  affectedEntities: [Entity!]!
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  builtin: Boolean!
  confirmed: Boolean!
  effectedEntityIds: [UUID!] @deprecated(reason: "Use affectedEntities instead")
  fullPath: String
  probability: Float
  takeovers: [ObjectSidTakeoverEntry!]!
  type: EntityRoleType!
}

type ObjectSidTakeoverEntry {
  entity: Entity
  method: ObjectSidTakeoverMethod!
  objectSid: String!
  privileges: [EntityRoleType!]!
}

enum ObjectSidTakeoverMethod {
  OBJECT_SID_HISTORY
  UNKNOWN
}

enum OperatingSystemFamily {
  WINDOWS
  OSX
  UNIX
  LINUX
  IOS
  ANDROID
  OTHER
}

type OperatingSystemInfo {
  displayName: String!
  family: OperatingSystemFamily!
  name: String!
  servicePack: String
  target: OperatingSystemTarget!
  version: String
  vulnerability: OperatingSystemVulnerability!
}

enum OperatingSystemTarget {
  WORKSTATION
  SERVER
  INTEGRATED_SOLUTION_APPLIANCE
  MOBILE
  TABLET
  GAME_CONSOLE
  WEARABLE
  SMART_TV
  PDA
  UNDETERMINED
}

enum OperatingSystemVulnerability {
  NONE
  UNKNOWN
  LOW
  MEDIUM
  HIGH
}

interface OperatorLevelAdminRole {
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  builtin: Boolean!
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

"""
An `EntityAssociation` in which the associated party is an entity bound by origin (see `BindingType`).
"""
type OriginAssociation implements EntityAssociation & Association {
  """
  The association binding type, which also determines the specific `Association` subtype of this instance.
  """
  bindingType: BindingType!

  """
  The associated entity.
  """
  entity: Entity!
}

type OwnerAdminRole implements EffectiveAdminRole & AdminAccountRole & EntityRole {
  affectedEntities: [Entity!]!
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  builtin: Boolean!
  confirmed: Boolean!
  effectedEntityIds: [UUID!] @deprecated(reason: "Use affectedEntities instead")
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

"""
Relay Connection pagination information.
"""
type PageInfo {
  """
  Continuation cursor for forwards-pagination.
  """
  endCursor: Cursor

  """
  If `true` is returned, there are more items to be fetched when paginating forwards.
  """
  hasNextPage: Boolean!

  """
  If `true` is returned, there are more items to be fetched when paginating backwards.
  """
  hasPreviousPage: Boolean!

  """
  Continuation cursor for backwards-pagination.
  """
  startCursor: Cursor
}

interface PasswordAttributes {
  aged: Boolean!
  exposed: Boolean!
  lastChange: DateTime
  mayExpire: Boolean!
  strength: PasswordStrength!
}

type PasswordResetterAdminRole implements EffectiveAdminRole & AdminAccountRole & EntityRole {
  affectedEntities: [Entity!]!
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  builtin: Boolean!
  confirmed: Boolean!
  effectedEntityIds: [UUID!] @deprecated(reason: "Use affectedEntities instead")
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

"""
Enumeration of password strength values.
"""
enum PasswordStrength {
  UNKNOWN
  WEAK
  STRONG
}

type Permission {
  authorizingGroupIds: [UUID!]!
  caEndpointIds: [UUID!]!
  certificateAuthorityNames: [String!]!
  permissionName: String!
  templateNames: [String!]!
}

interface PermissionAssignerRole {
  builtin: Boolean!
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

type PermissionsControllerAdminRole implements EffectiveAdminRole & AdminAccountRole & EntityRole {
  affectedEntities: [Entity!]!
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  builtin: Boolean!
  confirmed: Boolean!
  effectedEntityIds: [UUID!] @deprecated(reason: "Use affectedEntities instead")
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

input PolicyQueryInput {
  enforcedExternally: Boolean
  mfaResults: [EngagementAuthenticationStatus!]
  ruleActions: [RuleAction!]
  ruleIds: [UUID!]
  verificationResults: [EngagementAuthenticationStatus!]
}

type PrintOperatorsAdminRole implements OperatorLevelAdminRole & AdminAccountRole & EntityRole {
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  builtin: Boolean!
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

type PrivilegedGroupControllerAdminRole implements EffectiveAdminRole & AdminAccountRole & EntityRole {
  affectedEntities: [Entity!]!
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  builtin: Boolean!
  confirmed: Boolean!
  effectedEntityIds: [UUID!] @deprecated(reason: "Use affectedEntities instead")
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

interface ProgrammaticUserAccountRole {
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

type ProgrammaticUserAccountRoleImpl implements ProgrammaticUserAccountRole & ClassificationRole & EntityRole {
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

enum ProtocolType {
  KERBEROS
  LDAP
  NTLM
  DCE_RPC
  SSL
  UNKNOWN
}

type Query {
  """
  Query for the number of entities matching the query criteria.

  ### Examples

  ```graphql
  ##### Count users who have a compromised password
  {
    countEntities(types: [USER] hasWeakPassword: true)
  }
  ```
  """
  countEntities(
    accountCreationEndTime: DateTimeInput
    accountCreationStartTime: DateTimeInput
    accountExpirationEndTime: DateTimeInput
    accountExpirationStartTime: DateTimeInput
    accountLocked: Boolean
    accountQuery: EntityAccountQuery
    agentIds: [AgentId!]
    all: [EntityQueryInput!]
    any: [EntityQueryInput!]
    archived: Boolean
    associationBindingTypes: [BindingType!]
    associationQuery: EntityAssociationQuery
    businessRoles: [BusinessRole!]
    cloudEnabled: Boolean
    cloudOnly: Boolean
    dataSources: [DataSource!]
    departments: [String!]
    directMemberOfActiveDirectoryGroups: EntityQueryInput
    directMemberOfContainers: EntityQueryInput
    domainPattern: WildcardPattern
    domains: [String!]
    duplicatePasswordGroupId: String
    emailAddressPattern: WildcardPattern
    emailAddresses: [String!]
    enabled: Boolean
    enabledOrUnmanaged: Boolean
    entityIds: [UUID!]
    hasAccount: Boolean
    hasAgedPassword: Boolean
    hasAgent: Boolean
    hasAnySPN: Boolean
    hasExposedPassword: Boolean
    hasLinkedAccounts: Boolean
    hasNeverExpiringPassword: Boolean
    hasOpenIncidents: Boolean
    hasVulnerableOs: Boolean
    hasWeakPassword: Boolean
    hostNamePattern: WildcardPattern
    hostNames: [String!]
    impersonator: Boolean
    inactive: Boolean
    lastUpdateEndTime: DateTimeInput
    lastUpdateStartTime: DateTimeInput
    learned: Boolean
    marked: Boolean
    maxRiskScoreSeverity: ScoreSeverity
    memberOfActiveDirectoryGroups: EntityQueryInput
    memberOfContainers: EntityQueryInput
    minRiskScoreSeverity: ScoreSeverity
    mostRecentActivityEndTime: DateTimeInput
    mostRecentActivityStartTime: DateTimeInput
    mostRecentOnPremiseActivityEndTime: DateTimeInput
    mostRecentOnPremiseActivityStartTime: DateTimeInput
    mostRecentSSOActivityEndTime: DateTimeInput
    mostRecentSSOActivityStartTime: DateTimeInput
    not: EntityQueryInput
    objectSids: [String!]
    ouPattern: WildcardPattern
    ous: [String!]
    passwordLastChangeEndTime: DateTimeInput
    passwordLastChangeStartTime: DateTimeInput
    primaryDisplayNamePattern: WildcardPattern
    primaryDisplayNames: [String!]
    riskFactorTypes: [RiskFactorType!]
    roleAssignmentAssociationQuery: RoleAssignmentAssociationQuery
    roleGroups: [[EntityRoleType!]!]
    roles: [EntityRoleType!]
    samAccountNamePattern: WildcardPattern
    samAccountNames: [String!]
    secondaryDisplayNamePattern: WildcardPattern
    secondaryDisplayNames: [String!]
    shared: Boolean
    stale: Boolean
    tenants: [String!]
    types: [EntityType!]
    unmanaged: Boolean
    userAccountControlFlags: [UserAccountControlFlags!]
    watched: Boolean
  ): Int!
  domains(dataSources: [DataSource!]): [String!]!

  """
  Query for entities matching the query criteria. `Entity` objects are a key
  abstraction in Identity Protection API, representing both organizational and
  network entities, such as users, endpoints and services.

  Either the `first` or the `last` query arguments must be set, specifying the
  number of elements to be retrieved at most. No more than 1000 items may be
  retrieved at once. Pagination is enabled by [Relay-style
  cursors](https://facebook.github.io/relay/graphql/connections.htm).


  Following are some query examples largely based on the reports provided by the management user interface.

  ### Examples

  ```graphql
  ##### Look up a user by their sam-account-name
  {
    # Query for the built-in "Administrator" account.
    # This is merely an illustration of the samAccountNames query argument.
    # See the roles query argument for more powerful options to query
    # privileged accounts
    entities(samAccountNames: ["administrator"]
             # Uncomment and fill in your domain here to ensure
             # a single match
             # domain: "MY.DOMAIN"
             archived: false
             first: 1)
    {
      nodes {
        entityId
        primaryDisplayName
        secondaryDisplayName
        roles
        {
          type
        }
          ... on UserOrEndpointEntity
          {
            riskScoreSeverity
          }
      }
    }
  }
  ```
  ```graphql
  ##### List privileged user owning endpoints, projecting data for those endpoints
  {
  entities(roles: [AdminAccountRole], 		     # entity with admin role
           associationBindingTypes: [OWNERSHIP], # entity with OWNERSHIP association
           archived: false
           first: 2) {
    nodes {
      owner: primaryDisplayName
      ownerSecondaryName: secondaryDisplayName

      # filter array with all associations to show only OWNERSHIP association
      # the entity filter only guarantees at least one association exists
      associations(bindingTypes: [OWNERSHIP])
      {
        ... on EntityAssociation
        {
          entity
          {
            endpoint: primaryDisplayName,
            endpointSecondaryName: secondaryDisplayName
            isServer: hasRole(type: ServerRole)
          }
        }
      }
    }
  }
  }
  ```
  ```graphql
  ##### Medium and high risk users with additional data
  {
    entities(types: [USER]
             minRiskScoreSeverity: MEDIUM,
             sortKey: RISK_SCORE
             sortOrder: DESCENDING,
             first: 5)
    {
       nodes
       {
         primaryDisplayName
         secondaryDisplayName
         isHuman: hasRole(type: HumanUserAccountRole)
         isProgrammatic: hasRole(type: ProgrammaticUserAccountRole)
         ... on UserEntity
         {
           emailAddresses
         }
         riskScore
         riskScoreSeverity
         riskFactors
         {
           type
           severity
         }
         openIncidents(first: 2)
         {
           nodes
           {
             type
           }
         }
      }
    }
  }
  ```
  ```graphql
  ##### List inactive servers, sorted by their last recorded activity time
  {
    entities(roles: [ServerRole]
             inactive: true
             sortKey: MOST_RECENT_ACTIVITY
             sortOrder: ASCENDING
             archived: false
             enabled: true
             first: 5)
    {
      nodes
      {
        ... on EndpointEntity
        {
          hostName
        }
      }
    }
  }
  ```
  ```graphql
  ##### List privileged groups
  {
      entities(types: [ENTITY_CONTAINER]
               roles: [AdminAccountRole]
               archived: false
               first: 2)
      {
          nodes {
              primaryDisplayName
              secondaryDisplayName
              roles {
                  type
              }
          }
      }
  }
  ```
  ```graphql
  ##### List accounts with poorly protected SPNs and display those SPNs
  {
    entities(riskFactorTypes: [HAS_SPNS]
      types: [USER]
      archived: false
      first: 2)
    {
      nodes {
        secondaryDisplayName
        accounts {
          ... on ActiveDirectoryAccountDescriptor {
            domain
            servicePrincipalNames
          }
        }
      }
    }
  }
  ```
  ```graphql
  ##### List endpoints with Vulnerable OS risk
  {
      entities(types: [ENDPOINT]
               archived: false
               first: 2
               riskFactorTypes: [VULNERABLE_OS])
      {
          nodes {
              secondaryDisplayName
              ... on EndpointEntity{
                  operatingSystemInfo{
                      displayName
                  }
              }
          }
      }
  }
  ```
  ```graphql
  ##### List privileged entities with Password Never Expires attribute and show their risk score
  {
      entities(roles: [AdminAccountRole]
               hasNeverExpiringPassword: true
               archived: false
               first: 2)
      {
          nodes {
              primaryDisplayName
              secondaryDisplayName
              riskScoreSeverity
          }
      }
  }
  ```
  ```graphql
  ##### List direct members of “Administrators” group
  {
      entities(first: 2
               # can use memberOfActiveDirectoryGroups to show inderect members instead
               directMemberOfActiveDirectoryGroups: {
                   primaryDisplayNames: ["Administrators"]
                })
      {
          nodes {
              primaryDisplayName
              secondaryDisplayName
              type
          }
      }
  }
  ```
  ```graphql
  ##### List endpoints that have local administrators
  {
      entities(types: [ENDPOINT]
               associationBindingTypes: [LOCAL_ADMINISTRATOR]
               sortKey: MOST_RECENT_ACTIVITY
               sortOrder: ASCENDING
               first: 2)
      {
          nodes {
              primaryDisplayName
              ... on EndpointEntity {
                  hostName
                  associations(bindingTypes: [LOCAL_ADMINISTRATOR]) {
                      bindingType
                      ... on LocalAdminLocalUserAssociation {
                          accountName
                      }
                      ... on LocalAdminDomainEntityAssociation {
                          entityType
                          entity {
                              primaryDisplayName
                              secondaryDisplayName
                              ExcessiveAccess: hasRole(type: LocalAdminRole)
                              ... on UserEntity {
                                  emailAddresses
                              }
                          }
                      }
                  }
              }
          }
      }
  }
  ```
  ```graphql
  ##### List endpoints, and for them retrieve information including risk factors, latest incidents and activities
  {
      entities(archived: false, types: [ENDPOINT], first: 1)
      {
          nodes {
              primaryDisplayName
              secondaryDisplayName
              isServer: hasRole(type: ServerRole)
              ... on EndpointEntity {
                  hostName
                  lastIpAddress
                  staticIpAddresses
                  mostRecentActivity
                  associations(bindingTypes: [OWNERSHIP, LOGIN, ACTIVITY_ORIGIN, LOCAL_ADMINISTRATOR]) {
                      bindingType
                      ... on EntityAssociation {
                          entity {
                              type
                              primaryDisplayName
                              isAdmin: hasRole(type: AdminAccountRole)
                              isHuman: hasRole(type: HumanUserAccountRole)
                              isProgrammatic: hasRole(type: ProgrammaticUserAccountRole)
                          }
                      }
                  }
                  riskScore
                  riskScoreSeverity
                  riskFactors {
                      type
                      severity
                  }
                  latestIncidents: openIncidents(first: 5, sortKey: END_TIME) {
                      nodes {
                          type
                          startTime
                          endTime
                          compromisedEntities {
                              primaryDisplayName
                          }
                      }
                  }
              }
          }
      }
  }
  ```
  ```graphql
  ##### List privileged entities, except those who have Extensive Local Administrators role
  {
      entities(roles: [AdminAccountRole]
               not: {roles: [LocalAdminRole]}
               archived: false
               first: 2)
      {
          nodes {
              primaryDisplayName
              secondaryDisplayName
              roles {
                  type
              }
          }
      }
  }
  ```
  ```graphql
  ##### List entities that have weak password
  {
    entities(
      hasWeakPassword:true
      archived: false
      first: 10)
    {
      nodes {
        primaryDisplayName
        secondaryDisplayName
      }
    }
  }
  ```
  ```graphql
  ##### List created users from last 30 days and display their OU, roles, and risks
  {
    entities(
      archived:false
      first: 10
      accountCreationStartTime: "P-30D"
      types: [USER]
    )
    {
      nodes {
        entityId
        primaryDisplayName
        secondaryDisplayName
        creationTime
        accounts
        {
          ... on ActiveDirectoryAccountDescriptor {
            ou
          }
        }
        roles
        {
          type
        }
        ... on UserOrEndpointEntity
        {
          riskScoreSeverity
        }
      }
    }
  }
  ```
  ```graphql
  ##### List entities with Attack Path to a Privileged Account risk, and show this path
  {
    entities(
      archived: false
      first: 5
      riskFactorTypes: [HAS_ATTACK_PATH]
      sortKey: RISK_SCORE
      sortOrder: DESCENDING
    )
    {
      nodes {
        primaryDisplayName
        secondaryDisplayName
        riskScoreSeverity
        riskFactors {
          type

          ... on AttackPathBasedRiskFactor {
            attackPath {
              entity {
                primaryDisplayName
                type
                riskScoreSeverity
              }
              relation
              nextEntity {
                primaryDisplayName
                type
                riskScoreSeverity
              }
            }
          }
        }
      }
    }
  }
  ```
  ```graphql
  ##### List 5 top risky endpoints that have exposed local administrator password and display the password GPO location
  {
    entities(
      archived: false
      first: 5
      riskFactorTypes: [EXPOSED_LOCAL_ADMIN])
    {
      nodes
      {
        primaryDisplayName
        riskScoreSeverity
        type
        riskFactors{
          type
          ... on ExposedLocalAdminsEntityRiskFactor
          {
            exposedUsers{
              gpoName
              domain
              accountName

            }
          }
        }
      }
    }
  }
  ```
  ```graphql
  ##### List Cloud Only entities without any SSO activity in the past 2 weeks
  {
    entities(cloudOnly: true, mostRecentSSOActivityEndTime: "P-2W", archived: false, first: 10) {
      nodes {
        primaryDisplayName
        secondaryDisplayName
        accounts {
          ... on SsoUserAccountDescriptor {
            dataSource
            mostRecentActivity
            title
            creationTime
            passwordAttributes
            {
              lastChange
            }
          }
        }
        entityId
      }
    }
  }
  ```
  ```graphql
  ##### Query effective policy for privileged users
  {
    entities(roles: [AdminAccountRole]
      types: [USER]
      archived: false
      first: 5
      sortKey: RISK_SCORE
      sortOrder: DESCENDING)
    {
      nodes {
        primaryDisplayName
        secondaryDisplayName
        accounts
        {
          ... on ActiveDirectoryAccountDescriptor
          {
            passwordAttributes
            {
              lastChange
              strength
              effectivePolicy {
                # Source info
                sourceType
                displayName
                # Policy rank
                policyRank
                policyRankLevel
                # Policy details
                complexityEnabled
                minLength
                minAge
                maxAge
                savedPreviousPasswordCount
                reversibleEncryptionEnabled
                failedAuthenticationAttemptsLockoutThreshold
                lockoutDuration
                lockoutObservationWindow
              }
            }
          }
        }
      }
    }
  }
  ```
  ```graphql
  ##### Accounts expiring in the next 3 months
  {
    entities(
      accountExpirationStartTime: "P0D", # Now
      accountExpirationEndTime: "P3M", # Now + 3 months
      first: 100)
    {
      nodes
      {
        primaryDisplayName
        accounts
        {
          ... on ActiveDirectoryAccountDescriptor
          {
            expirationTime
          }
        }
      }
    }
  }
  ```
  ```graphql
  ##### List accounts with poorly protected SPNs and display those SPNs
  {
    entities(riskFactorTypes: [HAS_SPNS]
      types: [USER]
      archived: false
      first: 2)
    {
      nodes {
        secondaryDisplayName
        accounts {
          ... on ActiveDirectoryAccountDescriptor {
            domain
            servicePrincipalNames
          }
        }
      }
    }
  }
  ```
  ```graphql
  ##### List endpoints with Falcon sensor installed, and show their details, sensor id, owner and local administrators
  {
    entities(types: [ENDPOINT], hasAgent: true, archived: false, first: 10) {
      nodes {
        ... on EndpointEntity {
          hostName
          agentId
          ztaScore
          isServer: hasRole(type: ServerRole)
          associations(bindingTypes: [LOCAL_ADMINISTRATOR, OWNERSHIP]) {
            bindingType
            ... on LocalAdminLocalUserAssociation {
              accountName
            }
            ... on LocalAdminDomainEntityAssociation {
              entityType
              entity {
                primaryDisplayName
                secondaryDisplayName
              }
            }
            ... on EntityAssociation {
              bindingType
              entity {
                primaryDisplayName
                secondaryDisplayName
              }
            }
          }
        }
      }
    }
  }
  ```
  ```graphql
  ##### List accounts with assigned Owner role for subscriptions in Azure
  {
    entities(roleAssignmentAssociationQuery: {roleDisplayNames: ["Owner"]}, archived: false, first: 10) {
      nodes {
        primaryDisplayName
        secondaryDisplayName
        accounts
        {
          ... on SsoUserAccountDescriptor
          {
            mostRecentActivity
            dataSource
            flattenedContainingRoleEntities
            {
              primaryDisplayName
            }
          }
        }
        associations {
          ... on SsoRbacAssignmentAssociation {
            roles {
              displayName
            }
            scope {
              displayName
              subscriptionId
            }
          }
        }
      }
    }
  }
  ```
  ```graphql
  ##### List accounts of Azure service principals
  {
    entities(types: [CLOUD_SERVICE], archived: false, first: 20) {
      nodes {
        primaryDisplayName
        secondaryDisplayName
        riskScore
        entityId
        accounts {
          ... on CloudServiceAdapterDescriptor {
            dataSourceParticipantIdentifier
          }
          ... on AzureCloudServiceAdapterDescriptor {
            registeredTenantType
            appOwnerOrganizationId
            publisherDomain
            signInAudience
          }
        }
      }
    }
  }
  ```
  ```graphql
  ##### List users that share the same password and related "groupID". Use this
  value to help identify which users share a password with each other
  {
    entities(first: 1000, domainPattern: "*", riskFactorTypes: [DUPLICATE_PASSWORD], archived: false) {
      edges {
        node {
          primaryDisplayName
          secondaryDisplayName
          ... on UserEntity{
            emailAddresses
          }
          riskFactors(types: DUPLICATE_PASSWORD) {
            ... on DuplicatePasswordRiskEntityFactor {
              groupId
            }
          }
        }
      }
    }
  }
  ```
  ```graphql
  ##### List endpoints where "Domain Users" is used as a Local Administrator
  {
      entities(associationQuery: {bindingTypes: [LOCAL_ADMINISTRATOR],
  entityQuery: {primaryDisplayNames: "Domain Users"}}, types: [ENDPOINT],
  archived: false, first: 100) {
        nodes {
          primaryDisplayName
          secondaryDisplayName
        }
      }
  }
  ```
  ```graphql
  ##### Get the list of machines owned by programmatic acccounts
  {
      entities(roles: ProgrammaticUserAccountRole, archived: false, first: 1000, associationBindingTypes: [OWNERSHIP]) {
        nodes {
          primaryDisplayName
          secondaryDisplayName
          ... on UserEntity {
            isProgrammatic: hasRole(type: ProgrammaticUserAccountRole)
            isAdmin: hasRole(type: AdminAccountRole)
          }
          associations(bindingTypes: [OWNERSHIP]) {
            ... on EntityAssociation {
              entity {
                endpoint: primaryDisplayName
                endpointSecondaryName: secondaryDisplayName
                isServer: hasRole(type: ServerRole)
              }
            }
          }
        }
      }
    }
  ```
  """
  entities(
    accountCreationEndTime: DateTimeInput
    accountCreationStartTime: DateTimeInput
    accountExpirationEndTime: DateTimeInput
    accountExpirationStartTime: DateTimeInput
    accountLocked: Boolean
    accountQuery: EntityAccountQuery

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    agentIds: [AgentId!]
    all: [EntityQueryInput!]
    any: [EntityQueryInput!]
    archived: Boolean
    associationBindingTypes: [BindingType!]
    associationQuery: EntityAssociationQuery

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    businessRoles: [BusinessRole!]
    cloudEnabled: Boolean
    cloudOnly: Boolean
    dataSources: [DataSource!]
    departments: [String!]
    directMemberOfActiveDirectoryGroups: EntityQueryInput
    directMemberOfContainers: EntityQueryInput
    domainPattern: WildcardPattern
    domains: [String!]
    duplicatePasswordGroupId: String
    emailAddressPattern: WildcardPattern
    emailAddresses: [String!]
    enabled: Boolean
    enabledOrUnmanaged: Boolean
    entityIds: [UUID!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    hasAccount: Boolean
    hasAgedPassword: Boolean
    hasAgent: Boolean
    hasAnySPN: Boolean
    hasExposedPassword: Boolean
    hasLinkedAccounts: Boolean
    hasNeverExpiringPassword: Boolean
    hasOpenIncidents: Boolean
    hasVulnerableOs: Boolean
    hasWeakPassword: Boolean
    hostNamePattern: WildcardPattern
    hostNames: [String!]
    impersonator: Boolean
    inactive: Boolean

    """
    Query up to the last specified number of entries.
    """
    last: Int
    lastUpdateEndTime: DateTimeInput
    lastUpdateStartTime: DateTimeInput
    learned: Boolean
    marked: Boolean
    maxRiskScoreSeverity: ScoreSeverity
    memberOfActiveDirectoryGroups: EntityQueryInput
    memberOfContainers: EntityQueryInput
    minRiskScoreSeverity: ScoreSeverity
    mostRecentActivityEndTime: DateTimeInput
    mostRecentActivityStartTime: DateTimeInput
    mostRecentOnPremiseActivityEndTime: DateTimeInput
    mostRecentOnPremiseActivityStartTime: DateTimeInput
    mostRecentSSOActivityEndTime: DateTimeInput
    mostRecentSSOActivityStartTime: DateTimeInput
    not: EntityQueryInput
    objectSids: [String!]
    ouPattern: WildcardPattern
    ous: [String!]
    passwordLastChangeEndTime: DateTimeInput
    passwordLastChangeStartTime: DateTimeInput
    primaryDisplayNamePattern: WildcardPattern
    primaryDisplayNames: [String!]
    riskFactorTypes: [RiskFactorType!]
    roleAssignmentAssociationQuery: RoleAssignmentAssociationQuery
    roleGroups: [[EntityRoleType!]!]
    roles: [EntityRoleType!]
    samAccountNamePattern: WildcardPattern
    samAccountNames: [String!]
    secondaryDisplayNamePattern: WildcardPattern
    secondaryDisplayNames: [String!]
    shared: Boolean

    """
    Use the specified key as the primary sort-key to sort the results by.
    """
    sortKey: EntitySortKey = ENTITY_ID

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    stale: Boolean
    tenants: [String!]
    types: [EntityType!]
    unmanaged: Boolean
    userAccountControlFlags: [UserAccountControlFlags!]
    watched: Boolean
  ): EntityConnection

  """
  Fetch a single `Incident` by its unique identifier (see `Incident:incidentId`).
  """
  incident(
    """
    Query by a value of `Incident:incidentId`.
    """
    incidentId: String!
  ): Incident
    @deprecated(
      reason: "`incident` is deprecated and will be removed in a future release"
    )

  """
  Query all `Incident` entries matching the query criteria.

  ### Examples

  ```graphql
  ##### Look up new incidents involving privileged users
  {
    incidents(lifeCycleStages: [NEW]
              entityQuery: { types: [USER], roles: [AdminAccountRole] }
              sortOrder: DESCENDING
              sortKey: END_TIME
              first: 5) {
      nodes {
        type
        startTime
        endTime
        compromisedEntities {
          primaryDisplayName
          type
          isHuman: hasRole(type: HumanUserAccountRole)
        }
        alertEvents {
          alertType
          eventLabel
          entities {
            primaryDisplayName
          }
        }
      }
    }
  }
  ```
  ```graphql
  ##### Query incident contextual events
  {
    incidents(first: 1, sortKey: END_TIME, sortOrder: DESCENDING)
    {
      nodes
      {
        type
        compromisedEntities
        {
          primaryDisplayName
          secondaryDisplayName
          riskScoreSeverity
        }
        # Rather than just the alerts (available as alertEvents),
        # project a timeline containing contextual events
        timeline(includeContextualEvents: true, first: 50)
        {
          nodes
          {
            timestamp
            eventLabel
            ... on TimelineEntityEvent
            {
              entity
              {
                primaryDisplayName
              }
            }
            ... on TimelineAlertEvent
            {
              entities {
                primaryDisplayName
              }
            }
          }
        }
      }
    }
  }
  ```
  ```graphql
  ##### Query incident alerts and their related events
  {
      incidents(first: 1, sortKey: END_TIME, sortOrder: DESCENDING) {
          nodes {
              type
              startTime
              endTime
              compromisedEntities {
                  primaryDisplayName
                  type
              }
              alertEvents {
                  alertType
                  eventLabel
                  entities {
                      primaryDisplayName
                  }
                  relatedEvents(first: 5) {
                      nodes {
                          eventType
                          timestamp
                          ... on TimelineUserOnEndpointActivityEvent {
                              userEntity {
                                  primaryDisplayName
                              }
                              endpointEntity {
                                  primaryDisplayName
                              }
                              targetEntity {
                                  primaryDisplayName
                              }
                          }
                      }
                  }
              }
          }
      }
  }
  ```
  """
  incidents(
    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Query by any value of `AlertType`. At least one of the alerts for an
    incident should be of any of the given alert types for the incident to match.
    """
    alertTypes: [AlertType!]

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Query for incidents created on or after the specific date.
    """
    createdAfter: DateTimeInput

    """
    Query for incidents created before the specific date.
    """
    createdBefore: DateTimeInput

    """
    Query by the attributes of any entity involved in a `compromisedEntities` incident (see `Incident:compromisedEntities`).
    """
    entityQuery: EntityQueryInput

    """
    Query up to the first specified number of entries.
    """
    first: Int

    """
    Query by any value of `Incident:incidentId`.
    """
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int

    """
    Query by any value of `Incident:lifeCycleStage`.
    """
    lifeCycleStages: [IncidentLifeCycleStage!]
    patternIds: [Int!]

    """
    Query by any value of `Incident:severity`.
    """
    severities: [IncidentSeverity!]

    """
    Use the specified key as the primary sort-key to sort the results by.
    """
    sortKey: IncidentSortKey = INCIDENT_ID

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING

    """
    Query by any value of `Incident:type`.
    """
    types: [IncidentType!]

    """
    Query for incidents updated on or after the specific date.
    """
    updatedAfter: DateTimeInput

    """
    Query for incidents updated before the specific date.
    """
    updatedBefore: DateTimeInput
  ): IncidentConnection
    @deprecated(
      reason: "`incidents` is deprecated and will be removed in a future release"
    )

  """
  *Deprecated*: use trafficInspectionExclusionListStatus.
  """
  ipWhiteListStatus: [IpStatusOutput!]!
    @deprecated(
      reason: "`ipWhiteListStatus` is deprecated and will be removed in a future release"
    )

  """
  Query the overall risk associated with groups of entities of various membership types.
  """
  riskByMembershipSummary(
    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Query by a value of `RiskByMembershipResult:domain`.
    """
    domain: String

    """
    Query up to the first specified number of entries.
    """
    first: Int

    """
    Query by a value of `RiskByMembershipResult:group`. To ensure that only a
    single group is matched, `domain` should also be specified.
    """
    group: String

    """
    Query up to the last specified number of entries.
    """
    last: Int

    """
    The membership type.
    """
    membershipType: EntityMembershipType!

    """
    Use the specified key as the primary sort-key to sort the results by.
    """
    sortKey: RiskByMembershipSortKey = GROUP

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
  ): RiskByMembershipResultConnection

  """
  Query the overall risk factors for the entities that match the criteria. The
  returned factors are ordered by severity in descending order.

  Only risk factors which apply to at least one matching entity are returned. If
  no entities are matched, the returned list is empty. If a single entity is
  matched, the result is equivalent to `Entity:riskScore`.

  ### Examples:

  ```graphql
  ##### Query overall risk factors for human privileged entities
  {
      riskFactors(entityQuery: { all:[ { roles:[AdminAccountRole]}, { roles:[HumanUserAccountRole] }], archived: false })
      {
          type
          severity
      }
  }
  ```
  ```graphql
  ##### Risk factors breakdown for medium and high risk users
  {
      riskFactors(entityQuery: { minRiskScoreSeverity: MEDIUM, types: [USER], archived: false })
      {
          type
          severity
      }
  }
  ```
  """
  riskFactors(
    """
    Entity query criteria to be matched.
    """
    entityQuery: EntityQueryInput!
  ): [RiskFactorContribution!]!

  """
  Query for the most recent security assessment data for the given domain.

  ### Examples

  ```graphql
  #### Get the the latest security assessment
  {
      securityAssessment(domain: "DOMAIN.TLD") # fill your domain here
      {
          overallScore
          overallScoreLevel
          assessmentFactors
          {
              riskFactorType
              likelihood
              severity
          }
      }
  }
  ```
  ```graphql
  #### Utilizing security assessment goals
  {
      securityAssessmentGoals
      {
          name
          goalId
      }


      # These goals can be used for restrict the assessed factors in both current and historical data APIs
      # To see the results, please fill the domain query argument
      pumCurrent:
      securityAssessment(domain: "DOMAIN.TLD" # fill your domain here
          goalIds: ["a48477ba-c645-4d7d-ad3a-b33ed488e03f"]) {
          overallScore
          overallScoreLevel
          assessmentFactors
          {
              riskFactorType
          }
      }

      penTetstingHistory:
      securityAssessmentHistory(domain: "DOMAIN.TLD" # fill your domain here
          goalIds: ["c9d1c1a3-0b95-4235-97d9-f12a748e5fa6"]
          first: 7
          startTime: "P-7D"
          timeResolution: DAY)
      {
          nodes
          {
              securityAssessment
              {
                  overallScore
                  overallScoreLevel
                  assessmentFactors
                  {
                      riskFactorType
                      lastUpdateTime
                  }
              }
          }
      }
  }
  ```
  """
  securityAssessment(
    """
    The assessed network domain.
    """
    domain: String

    """
    The security assessment goal represented as an ID number.
    """
    goalIds: [UUID!]

    """
    The risk factors detected by the security assessment.
    """
    riskFactorTypes: [RiskFactorType!]
    tenant: String
  ): SecurityAssessment!

  """
  Query for the available security assessment goals.

  ```graphql
  #### Utilizing security assessment goals
  {
      securityAssessmentGoals
      {
          name
          goalId
      }


      # These goals can be used for restrict the assessed factors in both current and historical data APIs
      # To see the results, please fill the domain query argument
      pumCurrent:
      securityAssessment(domain: "DOMAIN.TLD" # fill your domain here
          goalIds: ["a48477ba-c645-4d7d-ad3a-b33ed488e03f"]) {
          overallScore
          overallScoreLevel
          assessmentFactors
          {
              riskFactorType
          }
      }

      penTetstingHistory:
      securityAssessmentHistory(domain: "DOMAIN.TLD" # fill your domain here
          goalIds: ["c9d1c1a3-0b95-4235-97d9-f12a748e5fa6"]
          first: 7
          startTime: "P-7D"
          timeResolution: DAY)
      {
          nodes
          {
              securityAssessment
              {
                  overallScore
                  overallScoreLevel
                  assessmentFactors
                  {
                      riskFactorType
                      lastUpdateTime
                  }
              }
          }
      }
  }
  ```
  """
  securityAssessmentGoals: [SecurityAssessmentGoal!]!

  """
  Query security assessment data points within a specified period.

  ```graphql
  #### Get security assessment past data
  {
      # Last week's security assessment history, in daily resolution
      securityAssessmentHistory(domain: "DOMAIN.TLD" # fill your domain here
          first: 7
          startTime: "P-1W" # Or some ISO-8601 Date (see DateTimeInput documentation)
          timeResolution: DAY)
      {
          nodes
          {
              securityAssessment
              {
                  overallScore
                  overallScoreLevel
                  assessmentFactors
                  {
                      riskFactorType
                      likelihood
                      severity
                      lastUpdateTime
                  }
              }
          }
      }
  }
  ```
  """
  securityAssessmentHistory(
    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Monitored domain/tenant.
    """
    domain: String

    """
    The end of the required period.
    """
    endTime: DateTimeInput

    """
    Query up to the first specified number of entries.
    """
    first: Int

    """
    An ID of the security assessment goal. Multiple selection is available. If
    more than one goal ID is provided, consolidated results will be displayed.
    """
    goalIds: [UUID!]

    """
    Query up to the last specified number of entries.
    """
    last: Int

    """
    The risk factors detected by the security assessment(s).
    """
    riskFactorTypes: [RiskFactorType!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING

    """
    The beginning of the required period.
    """
    startTime: DateTimeInput
    tenant: String

    """
    A unit of time, such as hour, day, or week.
    """
    timeResolution: SecurityAssessmentTimeResolution!
  ): SecurityAssessmentHistoryEntryConnection

  """
  A unified API for querying all recorded events matching query criteria. The
  query combines all event sources into a single stream.

  The events returned are always ordered by timestamp. `ASCENDING` `SortOrder` is applied by default.

  ### Examples:

  ```graphql
  ##### Look up programmatic user interactive logins during the last week
  {
    timeline(types: [SUCCESSFUL_AUTHENTICATION]
             startTime: "P-1W"
             activityQuery: { authenticationTypes: [DOMAIN_LOGIN] }
             sourceEntityQuery: { roles: [ProgrammaticUserAccountRole] }
             first: 5)
    {
      nodes
      {
        ... on TimelineUserOnEndpointActivityEvent
        {
          userEntity
          {
            primaryDisplayName
            roles
            {
              type
            }
          }
          endpointEntity
          {
            primaryDisplayName
          }
          ipAddress
          deviceType
        }
      }
    }
  }
  ```
  ```graphql
  ##### Look up privilege changes events during the last month
  {
    timeline(types: [PRIVILEGE_ESCALATION, PRIVILEGE_DE_ESCALATION], startTime: "P-1M", first: 5, sortOrder: DESCENDING)
    {
      nodes
      {
        timestamp
        eventType
        eventLabel
        ... on TimelineEntityEvent
        {
          entity
          {
            primaryDisplayName
            secondaryDisplayName
          }
        }
        ... on TimelinePrivilegeEscalationEvent
        {
          addedPrivileges
        }
        ... on TimelinePrivilegeDeEscalationEvent
        {
          removedPrivileges
        }
      }
    }
  }
  ```
  ```graphql
  ##### Look up system-audit events
  {
    timeline(categories: [AUDIT], sortOrder: DESCENDING, first: 5)
    {
      nodes
      {
        timestamp
        eventType
        eventLabel
      }
    }
  }
  ```
  ```graphql
  ##### List service access events where NTLM v1 was used in the last 12 hour
  {
      timeline(startTime: "PT-12H"
               types: [SERVICE_ACCESS]
               activityQuery: {
                   protocolTypes: [NTLM]
                   protocolVersions: ["1"]
                }
               first: 2)
      {
          nodes {
              ... on TimelineServiceAccessEvent {
                  protocolVersion
                  protocolType
                  endpointEntity {
                      primaryDisplayName
                  }
              }
          }
      }
  }
  ```
  """
  timeline(
    """
    Query criteria for activity events. The query criteria are only applied to
    activity events and ignored otherwise. If you wish to only query activity
    events, specify either `types` or `categories`.
    """
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Query criteria for alert events. The query criteria are only applied to
    alert events and ignored otherwise. If you wish to only query activity
    events, specify either `types` or `categories`.
    """
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Query by any category of `TimelineEvent:type`.
    """
    categories: [TimelineEventCategory!]

    """
    Query by the maximal value of `TimelineEvent:timestamp`.
    """
    endTime: DateTimeInput

    """
    Query by any value of `TimelineEvent:eventId`.
    """
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int

    """
    Query for events which are considered part of any of the specified incident
    IDs, such as alerts and incident lifecycle changes.
    """
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int

    """
    If `true`, query only *open* events or events without a state notion at all.
    If `false`, query only closed events (e.g. closed
    `TimelineNotificationEvent` events)

    The exact semantics of `open` depends on the matched event type.
    """
    open: Boolean

    """
    Query criteria for policy events. The query criteria are only applied to
    policy events and ignored otherwise. If you wish to only query activity
    events, specify either `types` or `categories`.
    """
    policyQuery: PolicyQueryInput

    """
    Query for events related to another event by its event ID.
    """
    relatedTo: EventId

    """
    Query by any value of `TimelineEvent:severity`.
    """
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING

    """
    Query criteria for the *source endpoint* entity. The matched entity may be any of the following:
    * `TimelineUserOnEndpointActivityEvent:endpointEntity`
    * `TimelinePolicyRuleMatchEvent:sourceEndpointEntity`
    * `TimelineAlertEvent:endpointEntity`
    """
    sourceEndpointQuery: EntityQueryInput

    """
    Query criteria for the *source* entity. The matched entity may be any of the following:
    * `TimelineEntityEvent:entity`
    * `TimelineUserOnEndpointActivityEvent:userEntity`
    * `TimelinePolicyRuleMatchEvent:sourceEntity`
    * `TimelineAlertEvent:userEntity`
    """
    sourceEntityQuery: EntityQueryInput

    """
    Query by the minimal value of `TimelineEvent:timestamp`.
    """
    startTime: DateTimeInput

    """
    Query criteria for system notification events. The query criteria are only
    applied to  system notification events and ignored otherwise. If you wish to
    only query activity events, specify either `types` or `categories`.
    """
    systemNotificationQuery: SystemNotificationQueryInput

    """
    Query criteria for the *target endpoint* entity. The matched entity may be any of the following:
    * `TimelineUserOnEndpointActivityEvent:targetEndpointEntity`
    * `TimelinePolicyRuleMatchEvent:targetEndpoint`
    """
    targetEndpointQuery: EntityQueryInput

    """
    Query criteria for the *target entity* entity. The matched entity may be any of the following:
    * `TimelineServiceAccessEvent:targetServiceEntity`
    * `TimelinePolicyRuleMatchEvent:targetEntity`
    """
    targetEntityQuery: EntityQueryInput

    """
    Query by any value of `TimelineEvent:type`.
    """
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  Query for ips that is excluded from traffic inspection.

  ```graphql
  ##### get traffic inspection exclusion list status
  {
    trafficInspectionExclusionListStatus{
      ip,
      status,
      protocol,
      port
    }
  }
  ```
  """
  trafficInspectionExclusionListStatus: [IpStatusOutput!]!
}

"""
Description of Azure RBAC role definition.
"""
type RbacRoleDescriptor {
  """
  Role name
  """
  displayName: String!

  """
  Role Azure id
  """
  roleId: UUID!
}

"""
Description of Azure subscription.
"""
type RbacSubscriptionDescriptor {
  """
  Subscription name
  """
  displayName: String!

  """
  Subscription Azure id
  """
  subscriptionId: UUID!
}

type ReadOnlyDomainControllersAdminRole implements DomainControllersAdminRole & DomainLevelAdminRole & AdminAccountRole & EntityRole {
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  builtin: Boolean!
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

"""
A specialized `Association` type for entity associations
"""
type RecentlyVerifiedLoginBindingAssociation implements SimulatableAssociation & EntityAssociation & Association {
  """
  The association binding type, which also determines the specific `Association` subtype of this instance.
  """
  bindingType: BindingType!

  """
  The associated entity.
  """
  entity: Entity!
  simulated: Boolean!
  verificationTime: DateTime!
}

enum RegisteredTenantType {
  EXTERNAL
  REGISTERED_APP
  MANAGED_IDENTITY
}

enum RemoteCodeExecutionMethod {
  PS_EXEC
}

input RemoveUserEntityAuthorizerInput {
  authorizerEntityQuery: EntityQueryInput!
  clientMutationId: String
  entityQuery: EntityQueryInput!
}

type ReplicatorsAdminRole implements OperatorLevelAdminRole & AdminAccountRole & EntityRole {
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  builtin: Boolean!
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

"""
A descriptor for the overall risk associated with a group of entities in an
Active Directory domain. In this context, *group* does not imply an Active
Directory group, but a logical group of entities of various membership types
(see `EntityMembershipType`)
"""
type RiskByMembershipResult {
  """
  The Active Directory domain name.
  """
  domain: String!

  """
  The group name
  """
  group: String!

  """
  The number of entities in the group.
  """
  groupSize: Int!

  """
  The overall impact score associated with the group.
  """
  impact: ZeroToOneNumber!

  """
  The group type.
  """
  membershipType: EntityMembershipType!

  """
  Breakdown of score severities by their contribution to the overall risk score of this group.
  """
  riskContributionBreakdown: ScoreSeverityBreakdown

  """
  Breakdown of score severities by the percentage of members associated with each severity.
  """
  riskDistribution: ScoreSeverityBreakdown

  """
  The risk factors associated with this group.
  """
  riskFactors: [RiskFactorContribution!]!

  """
  The overall risk score associated with this group.
  """
  score: ZeroToOneNumber!
}

"""
A [Relay-Compatible](https://facebook.github.io/relay/graphql/connections.htm)
Connection type for paginating over `RiskByMembershipResult` elements.
"""
type RiskByMembershipResultConnection {
  """
  List of `RiskByMembershipResult` edges.
  """
  edges: [RiskByMembershipResultEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A convenience extension to the standard Relay Connection type, directly
  exposing the `RiskByMembershipResult` elements, which may be used *instead* of
  edges. It is primarily useful in conjunction with `startCursor` and
  `endCursor`, or when exploring the API interactively (e.g. in GraphiQL).
  """
  nodes: [RiskByMembershipResult!]!
}

"""
A `RiskByMembershipResult` edge in a connection.
"""
type RiskByMembershipResultEdge {
  """
  Cursor pointing to this edge, to be used in standard pagination query arguments (`before`, `after`).
  """
  cursor: Cursor!

  """
  The `RiskByMembershipResult` item at the end of this edge.
  """
  node: RiskByMembershipResult!
}

"""
Enumeration of sort options for the `riskByMembershipSummary` query API.
"""
enum RiskByMembershipSortKey {
  """
  Sort by the group name.
  """
  GROUP

  """
  Sort by the group risk score.
  """
  SCORE

  """
  Sort by the group impact score.
  """
  IMPACT
}

"""
Risk factor contribution descriptor.
"""
type RiskFactorContribution {
  """
  The severity value assigned to the risk factor type.
  """
  severity: ScoreSeverity!

  """
  The risk factor type.
  """
  type: RiskFactorType!
}

"""
An enumeration of risk factor types.
"""
enum RiskFactorType {
  ABNORMAL_SERVICE_ACCESS
  CREDENTIAL_THEFT
  DAILY_VOLUME_ANOMALY
  POLICY_RULE_MATCH
  FORBIDDEN_COUNTRY
  FORGED_PAC
  GOLDEN_TICKET
  IDENTITY_VERIFICATION_DENY
  IDENTITY_VERIFICATION_TIMEOUT
  LATERAL_MOVEMENT
  NEW_SERVER_ACCESS
  PASS_THE_HASH
  PASS_THE_TICKET
  PASSWORD_BRUTE_FORCE
  SKELETON_KEY
  STALE_ACCOUNT_USAGE
  STALE_HOST_USAGE
  STALE_SERVICE_USAGE
  CREDENTIAL_SCANNING
  GEO_ANOMALY
  NEW_ENTITY_VOLUME
  DC_SYNC
  HIDDEN_OBJECT
  BAD_IP_REPUTATION_USAGE
  ANOMALOUS_RPC
  REMOTE_CODE_EXECUTION
  NTLM_RELAY
  CREDSSP_ATTACK
  LDAP_RECONNAISSANCE
  BRONZE_BIT
  SUSPICIOUS_CLOUD_ACTIVITY_ML
  AGED_PASSWORD
  KRBTGT_AGED_PASSWORD
  ASSOCIATION_WITH_RISKY_ENDPOINT
  NEVER_EXPIRES_PASSWORD
    @deprecated(
      reason: "`NEVER_EXPIRES_PASSWORD` is deprecated and will be removed in a future release"
    )
  INSUFFICIENT_PASSWORD_ROTATION
  EXPOSED_PASSWORD
  INACTIVE_ACCOUNT
  SHARED_ENDPOINT
  SHARED_USER
  STALE_ACCOUNT
  UNMANAGED_HOST
  VPN_USAGE
  VULNERABLE_OS
  WEAK_PASSWORD
  WEAK_PASSWORD_POLICY
  DUPLICATE_PASSWORD
  WATCHED
  HAS_SPNS
  NTLM_MOVEMENTS
  STEALTHY_PRIVILEGES
  OBJECT_SID_HISTORY_PRIVILEGES_TAKEOVER
  PRIVILEGED_MACHINE
  GUEST_ACCOUNT_ENABLED
  VULNERABLE_NTLM_COMPATIBILITY_LEVEL
  SMB_SIGNING_DISABLED
  DUPLICATED_LOCAL_ADMINISTRATOR
  PRIVILEGED_USER_USING_UNMANAGED_ENDPOINT
  UNMANAGED_ENDPOINT_USED_BY_PRIVILEGED_USER
  SHARED_ENDPOINT_USED_BY_PRIVILEGED_USER
  KERBEROS_PREAUTH_NOT_REQUIRED
  DES_KEY_ONLY_KERBEROS_ENCRYPTION
  LDAP_SIGNING_DISABLED
  LDAPS_CHANNEL_BINDING
  SPOOLER_SERVICE_RUNNING
  NLA_DISABLED
  EXPOSED_LOCAL_ADMIN
  HAS_ATTACK_PATH
  USES_LOCALLY_ADMINISTRATED_MACHINES
  CLOUD_ACTIVITY_ON_VULNERABLE_OS
  AZURE_LEGACY_PROTOCOL_USAGE
  SUSPICIOUS_SPN
  SUSPICIOUS_UPN
  RISKY_LINKED_ACCOUNT
  CERTIFICATE_TEMPLATE_ALLOWS_AUTHENTICATION_AS_ANY_DOMAIN_USER
  AUTHENTICATE_AS_ANY_DOMAIN_USER_WITH_CERTIFICATE_REQUEST_AGENT_WITHOUT_ANY_RESTRICTIONS
}

"""
Query criteria for role assignment association. All specific criteria must be met for a result to match.
"""
input RoleAssignmentAssociationQuery {
  """
  The query is a match if the role display names match
  """
  roleDisplayNames: [String!]

  """
  The query is a match if the role ids match
  """
  roleIds: [UUID!]

  """
  The query is a match if the scope display names match
  """
  scopeDisplayNames: [String!]

  """
  The query is a match if the scope ids match
  """
  scopeIds: [UUID!]
}

enum RuleAction {
  ALLOW
  BLOCK
  MFA
  FORCE_PASSWORD_CHANGE
  EMAIL_VERIFICATION
    @deprecated(
      reason: "`EMAIL_VERIFICATION` is deprecated and will be removed in a future release"
    )
  ADD_TO_WATCH_LIST
  SMS_ALERT
    @deprecated(
      reason: "`SMS_ALERT` is deprecated and will be removed in a future release"
    )
  APPLY_SSO_POLICY
}

enum RuleTrigger {
  access
  accountEvent
  federatedAccess
  alert
}

type SchemaAdminsRole implements ForestLevelAdminRole & AdminAccountRole & EntityRole {
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  builtin: Boolean!
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

enum ScoreLevel {
  LOW
  MEDIUM
  HIGH
}

enum ScoreSeverity {
  NORMAL
  MEDIUM
  HIGH
}

type ScoreSeverityBreakdown {
  NORMAL: ZeroToOneNumber
  MEDIUM: ZeroToOneNumber
  HIGH: ZeroToOneNumber
}

"""
The *SecurityAssessment* data type holds data about a set of domain-level
security risk factors, along with an overall score for these factors.

### Examples

```graphql
#### Get the the latest security assessment
{
    securityAssessment(domain: "DOMAIN.TLD") # fill your domain here
    {
        overallScore
        overallScoreLevel
        assessmentFactors
        {
            riskFactorType
            likelihood
            severity
        }
    }
}
```
```graphql
#### Get security assessment past data
{
    # Last week's security assessment history, in daily resolution
    securityAssessmentHistory(domain: "DOMAIN.TLD" # fill your domain here
        first: 7
        startTime: "P-1W" # Or some ISO-8601 Date (see DateTimeInput documentation)
        timeResolution: DAY)
    {
        nodes
        {
            securityAssessment
            {
                overallScore
                overallScoreLevel
                assessmentFactors
                {
                    riskFactorType
                    likelihood
                    severity
                    lastUpdateTime
                }
            }
        }
    }
}
```
```graphql
#### Utilizing security assessment goals
{
    securityAssessmentGoals
    {
        name
        goalId
    }


    # These goals can be used for restrict the assessed factors in both current and historical data APIs
    # To see the results, please fill the domain query argument
    pumCurrent:
    securityAssessment(domain: "DOMAIN.TLD" # fill your domain here
        goalIds: ["a48477ba-c645-4d7d-ad3a-b33ed488e03f"]) {
        overallScore
        overallScoreLevel
        assessmentFactors
        {
            riskFactorType
        }
    }

    penTetstingHistory:
    securityAssessmentHistory(domain: "DOMAIN.TLD" # fill your domain here
        goalIds: ["c9d1c1a3-0b95-4235-97d9-f12a748e5fa6"]
        first: 7
        startTime: "P-7D"
        timeResolution: DAY)
    {
        nodes
        {
            securityAssessment
            {
                overallScore
                overallScoreLevel
                assessmentFactors
                {
                    riskFactorType
                    lastUpdateTime
                }
            }
        }
    }
}
```
"""
type SecurityAssessment {
  """
  List of risk factors matching the query criteria.
  """
  assessmentFactors: [SecurityAssessmentFactor!]!
  domain: String

  """
  The overall security score for the given `assessmentFactors`, as a number between 0 (no risk) to 1 (maximum risk).
  """
  overallScore: ZeroToOneNumber!

  """
  The overall security score level for the given `assessmentFactors`.
  """
  overallScoreLevel: ScoreLevel!
  tenant: String
}

type SecurityAssessmentFactor {
  """
  Human-readable description for the risk
  """
  description: String!

  """
  The domain associated with the risk factor.
  """
  domain: String

  """
  Human-readable label for the risk factor
  """
  label: String!

  """
  The time when the information about the risk factor was last updated.
  """
  lastUpdateTime: DateTime!

  """
  The risk factor likelihood level.
  """
  likelihood: ScoreLevel!

  """
  The actions recommended in order to reduce or neutralize the risk.
  """
  recommendations: [SecurityAssessmentFactorRecommendation!]!

  """
  The risk factor type.
  """
  riskFactorType: RiskFactorType!

  """
  The risk factor score level, taking into account both its severity and its likelihood.
  """
  scoreLevel: ScoreLevel!

  """
  The risk factor severity level.
  """
  severity: ScoreLevel!
  tenant: String
}

"""
The actions recommended in order to reduce or neutralize the risk.
"""
type SecurityAssessmentFactorRecommendation {
  """
  The link to the detailed recommendations.
  """
  link: URI

  """
  A detailed description of the actions recommended in order to reduce or neutralize the risk.
  """
  text: String!
}

"""
A goal associated with a `SecurityAssessment` result.

```graphql
#### Utilizing security assessment goals
{
    securityAssessmentGoals
    {
        name
        goalId
    }


    # These goals can be used for restrict the assessed factors in both current and historical data APIs
    # To see the results, please fill the domain query argument
    pumCurrent:
    securityAssessment(domain: "DOMAIN.TLD" # fill your domain here
        goalIds: ["a48477ba-c645-4d7d-ad3a-b33ed488e03f"]) {
        overallScore
        overallScoreLevel
        assessmentFactors
        {
            riskFactorType
        }
    }

    penTetstingHistory:
    securityAssessmentHistory(domain: "DOMAIN.TLD" # fill your domain here
        goalIds: ["c9d1c1a3-0b95-4235-97d9-f12a748e5fa6"]
        first: 7
        startTime: "P-7D"
        timeResolution: DAY)
    {
        nodes
        {
            securityAssessment
            {
                overallScore
                overallScoreLevel
                assessmentFactors
                {
                    riskFactorType
                    lastUpdateTime
                }
            }
        }
    }
}
```
"""
type SecurityAssessmentGoal {
  """
  The goal unique identifier, which can then be used for querying ```securityAssessment```.
  """
  goalId: UUID!

  """
  The goal name.
  """
  name: String!
}

"""
Analyzing results of previous security assessments enables you to see the
general direction of changes in the risk score and measure the security
enhancement progress.
"""
type SecurityAssessmentHistoryEntry {
  """
  The name of a previous security assessment.
  """
  securityAssessment: SecurityAssessment!

  """
  The time when a previous security assessment was performed.
  """
  timestamp: DateTime!
}

"""
A [Relay-Compatible](https://facebook.github.io/relay/graphql/connections.htm)
Connection type for paginating over `SecurityAssessmentHistoryEntry` elements.
"""
type SecurityAssessmentHistoryEntryConnection {
  """
  List of `SecurityAssessmentHistoryEntry` edges.
  """
  edges: [SecurityAssessmentHistoryEntryEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A convenience extension to the standard Relay Connection type, directly
  exposing the `SecurityAssessmentHistoryEntry` elements, which may be used
  *instead* of edges. It is primarily useful in conjunction with `startCursor`
  and `endCursor`, or when exploring the API interactively (e.g. in GraphiQL).
  """
  nodes: [SecurityAssessmentHistoryEntry!]!
}

"""
A `SecurityAssessmentHistoryEntry` edge in a connection.
"""
type SecurityAssessmentHistoryEntryEdge {
  """
  Cursor pointing to this edge, to be used in standard pagination query arguments (`before`, `after`).
  """
  cursor: Cursor!

  """
  The `SecurityAssessmentHistoryEntry` item at the end of this edge.
  """
  node: SecurityAssessmentHistoryEntry!
}

enum SecurityAssessmentTimeResolution {
  HOUR
  DAY
  WEEK
}

type SecurityGroupRole implements ActiveDirectoryGroupRole & PermissionAssignerRole & ContainerRole & EntityRole {
  builtin: Boolean!
  confirmed: Boolean!
  fullPath: String
  probability: Float
  scope: ActiveDirectoryGroupScope!
  type: EntityRoleType!
}

type ServerOperatorsAdminRole implements OperatorLevelAdminRole & AdminAccountRole & EntityRole {
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  builtin: Boolean!
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

interface ServerRole {
  confirmed: Boolean!
  fullPath: String
  impersonator: Boolean!
  probability: Float
  type: EntityRoleType!
}

type ServerRoleImpl implements ServerRole & ClassificationRole & EntityRole {
  confirmed: Boolean!
  fullPath: String
  impersonator: Boolean!
  probability: Float
  type: EntityRoleType!
}

"""
A specialized `Association` type for entity associations
"""
type ServiceAssociation implements EntityAssociation & Association {
  """
  The association binding type, which also determines the specific `Association` subtype of this instance.
  """
  bindingType: BindingType!

  """
  The associated entity.
  """
  entity: Entity!
  serviceClasses: [String!]!
}

interface ServiceDelegationAdminRole {
  affectedEntities: [Entity!]!
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  builtin: Boolean!
  confirmed: Boolean!
  effectedEntityIds: [UUID!] @deprecated(reason: "Use affectedEntities instead")
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

type ServiceDescriptor {
  entity: Entity
  identifier: String!
}

type ServicePrincipalNameBasedRiskFactor implements EntityRiskFactor {
  score: ZeroToOneNumber!
  servicePrincipalNames: [String!]!
  severity: ScoreSeverity!
  type: RiskFactorType!
}

enum ServiceType {
  LDAP
  WEB
  FILE_SHARE
  DB
  RPCSS
  REMOTE_DESKTOP
  SCCM
  SIP
  DNS
  MAIL
  NTLM
  COMPUTER_ACCESS
  GENERIC_CLOUD
  SERVICE_ACCOUNT
  UNKNOWN
}

input SetEntityLinkedAccountInput {
  clientMutationId: String
  entityQuery: EntityQueryInput!
  linkedAccountsAssociationEntityQuery: EntityQueryInput!
}

"""
Input for `setIncidentState`.
"""
input SetStateIncidentInput {
  clientMutationId: String

  """
  The unique identifier of the incident to be updated (see `Incident:incidentId`).
  """
  incidentId: String!

  """
  The updated lifecycle stage.
  """
  lifeCycleStage: IncidentLifeCycleStageInput!

  """
  The reason for this change.
  """
  reason: String
}

enum SignInAudience {
  AzureADMyOrg
  AzureADMultipleOrgs
  AzureADandPersonalMicrosoftAccount
  PersonalMicrosoftAccount
}

"""
The default implementation for `ErrorDetails`.
"""
type SimpleErrorDetails implements ErrorDetails {
  """
  A human-readable error message describing an error or failure.
  """
  message: String!
}

"""
A specialized `Association` type for entity associations
"""
interface SimulatableAssociation {
  """
  The association binding type, which also determines the specific `Association` subtype of this instance.
  """
  bindingType: BindingType!

  """
  The associated entity.
  """
  entity: Entity!
  simulated: Boolean!
}

enum SmbDialect {
  SMB_1
  SMB_2_0_2
  SMB_2_1
  SMB_3_0
  SMB_3_0_2
  SMB_3_1_1
}

enum SortOrder {
  ASCENDING
  DESCENDING
}

enum SsoError {
  INVALID_CREDENTIALS
  LOCKED_OUT
  BAD_PASSWORD
  BAD_USERNAME
  VERIFICATION_ERROR
  PASSWORD_EXPIRED
  SESSION_EXPIRED
  ACCOUNT_DISABLED
  AUTHORIZATION_ERROR
  MALICIOUS_IP
  UNKNOWN
}

"""
A specialized `ErrorDetails` type for SSO activities.
"""
type SsoErrorDetails implements ErrorDetails {
  """
  A human-readable error message describing an error or failure.
  """
  message: String!

  """
  SSO activity result reason.
  """
  ssoError: SsoError!
}

"""
An account descriptor provides data associated with an external entity source,
such as an entry in an identity management system.
"""
interface SsoGroupAccountDescriptor {
  """
  If `true`, the account no longer exists; if `false`, the account is currently enabled.
  """
  archived: Boolean!
  containingGroupEntities: [EntityContainerEntity!]!
  containingGroupIds: [UUID!]!
  containingRoleEntities: [EntityContainerEntity!]!
  creationTime: DateTime!

  """
  The data source of this account. Together with the entity type, the data
  source determines the account descriptor subtype to be used.
  """
  dataSource: DataSource!
  dataSourceConfigurationIdentifier: UUID!
  dataSourceParticipantIdentifier: String!
  description: String

  """
  If `true`, the account is currently enabled; if `false`, the account no longer exists.
  """
  enabled: Boolean!
  flattenedContainingGroupEntities: [EntityContainerEntity!]!
  flattenedContainingGroupIds: [UUID!]!
  flattenedContainingRoleEntities: [EntityContainerEntity!]!
  tenant: String
    @deprecated(
      reason: "Tenant is deprecated and will be removed in a future release. Use AzureSsoGroupAccountDescriptor.tenant instead"
    )
}

type SsoGroupAccountDescriptorImpl implements SsoGroupAccountDescriptor & AccountDescriptor {
  archived: Boolean!
  containingGroupEntities: [EntityContainerEntity!]!
  containingGroupIds: [UUID!]!
  containingRoleEntities: [EntityContainerEntity!]!
  creationTime: DateTime!
  dataSource: DataSource!
  dataSourceConfigurationIdentifier: UUID!
  dataSourceParticipantIdentifier: String!
  description: String
  enabled: Boolean!
  flattenedContainingGroupEntities: [EntityContainerEntity!]!
  flattenedContainingGroupIds: [UUID!]!
  flattenedContainingRoleEntities: [EntityContainerEntity!]!
  tenant: String
    @deprecated(
      reason: "Tenant is deprecated and will be removed in a future release. Use AzureSsoGroupAccountDescriptor.tenant instead"
    )
}

"""
An association to Azure RBAC role assignments, including role assignment inherited from groups.
"""
type SsoRbacAssignmentAssociation implements Association {
  """
  RBAC_ASSIGNMENT
  """
  bindingType: BindingType!

  """
  AZURE
  """
  dataSource: DataSource!

  """
  The Azure id of the assigned roles
  """
  roleIds: [UUID!]!

  """
  The assigned roles
  """
  roles: [RbacRoleDescriptor!]!

  """
  The assignment scope (e.g. subscription)
  """
  scope: RbacSubscriptionDescriptor

  """
  The Azure id of the assignment scope
  """
  scopeId: UUID!
}

"""
An account descriptor provides data associated with an external entity source,
such as an entry in an identity management system.
"""
interface SsoRoleAccountDescriptor {
  """
  If `true`, the account no longer exists; if `false`, the account is currently enabled.
  """
  archived: Boolean!
  creationTime: DateTime!

  """
  The data source of this account. Together with the entity type, the data
  source determines the account descriptor subtype to be used.
  """
  dataSource: DataSource!
  dataSourceConfigurationIdentifier: UUID!
  dataSourceParticipantIdentifier: String!
  description: String

  """
  If `true`, the account is currently enabled; if `false`, the account no longer exists.
  """
  enabled: Boolean!
  tenant: String
    @deprecated(
      reason: "Tenant is deprecated and will be removed in a future release. Use AzureSsoRoleAccountDescriptor.tenant instead"
    )
}

type SsoRoleAccountDescriptorImpl implements SsoRoleAccountDescriptor & AccountDescriptor {
  archived: Boolean!
  creationTime: DateTime!
  dataSource: DataSource!
  dataSourceConfigurationIdentifier: UUID!
  dataSourceParticipantIdentifier: String!
  description: String
  enabled: Boolean!
  tenant: String
    @deprecated(
      reason: "Tenant is deprecated and will be removed in a future release. Use AzureSsoRoleAccountDescriptor.tenant instead"
    )
}

"""
A specialized `AccountDescriptor` for SSO user accounts.
"""
interface SsoUserAccountDescriptor {
  """
  If `true`, the account no longer exists; if `false`, the account is currently enabled.
  """
  archived: Boolean!
  containingEntities: [EntityContainerEntity!]!
  containingGroupEntities: [EntityContainerEntity!]!
  containingGroupIds: [UUID!]!
  containingRoleEntities: [EntityContainerEntity!]!
  creationTime: DateTime!
  credentialsDataSource: DataSource

  """
  The data source of this account. Together with the entity type, the data
  source determines the account descriptor subtype to be used.
  """
  dataSource: DataSource!

  """
  The ID of the connector configuration associated with this account.
  """
  dataSourceConfigurationIdentifier: UUID!
  dataSourceLoginIdentifier: String

  """
  A unique identifier used by the connector to identify this account.
  """
  dataSourceParticipantIdentifier: String!
  department: String
  description: String

  """
  If `true`, the account is currently enabled; if `false`, the account no longer exists.
  """
  enabled: Boolean!
  flattenedContainingGroupEntities: [EntityContainerEntity!]!
  flattenedContainingGroupIds: [UUID!]!
  flattenedContainingRoleEntities: [EntityContainerEntity!]!

  """
  The date and time of the account's latest recorded network activity. This
  takes into account both the data reported by external sources and the actual
  traffic seen by the system.
  """
  mostRecentActivity: DateTime

  """
  Information regarding the account's password.
  """
  passwordAttributes: PasswordAttributes
  tenant: String
    @deprecated(
      reason: "Tenant is deprecated and will be removed in a future release. Use AzureSsoUserAccountDescriptor.tenant instead"
    )
  title: String
}

type SsoUserAccountDescriptorImpl implements SsoUserAccountDescriptor & ActivityParticipatingAccountDescriptor & UserAccountDescriptor & AccountDescriptor {
  archived: Boolean!
  containingEntities: [EntityContainerEntity!]!
  containingGroupEntities: [EntityContainerEntity!]!
  containingGroupIds: [UUID!]!
  containingRoleEntities: [EntityContainerEntity!]!
  creationTime: DateTime!
  credentialsDataSource: DataSource
  dataSource: DataSource!
  dataSourceConfigurationIdentifier: UUID!
  dataSourceLoginIdentifier: String
  dataSourceParticipantIdentifier: String!
  department: String
  description: String
  enabled: Boolean!
  flattenedContainingGroupEntities: [EntityContainerEntity!]!
  flattenedContainingGroupIds: [UUID!]!
  flattenedContainingRoleEntities: [EntityContainerEntity!]!
  mostRecentActivity: DateTime
  passwordAttributes: PasswordAttributes
  tenant: String
    @deprecated(
      reason: "Tenant is deprecated and will be removed in a future release. Use AzureSsoUserAccountDescriptor.tenant instead"
    )
  title: String
}

enum SystemComponent {
  MANAGEMENT
  ENFORCEMENT
  DETECTION
}

"""
An error descriptor. This common interface contains just a human-readable error
message. For more structural data which can be used programmatically, see the
specialized sub-types of this interface.
"""
type SystemLoginFailureDetails implements ErrorDetails {
  """
  A human-readable error message describing an error or failure.
  """
  message: String!
  result: SystemLoginFailureReason!
}

enum SystemLoginFailureReason {
  UNKNOWN
  INVALID_USERNAME
  WRONG_PASSWORD
  INVALID_CREDENTIALS
  UNAUTHORIZED
  MFA_DENY
  MFA_TIMEOUT
  TIMEOUT
}

input SystemNotificationQueryInput {
  ruleIds: [UUID!]
}

"""
The descriptor of a system user.
"""
type SystemUser {
  """
  The system user display name. `Entity:primaryDisplayName` is used if the user is associated with an entity.
  """
  displayName: String!

  """
  The system user type.
  """
  type: SystemUserType!

  """
  The user entity associated with the system user, if any.
  """
  userEntity: UserEntity
}

"""
An enumeration of `SystemUser` types.
"""
enum SystemUserType {
  CS
  CS_TOKEN
  LEGACY_USER
}

"""
A `timeline` event indicating the creation of an account in some data source (see `Entity:accounts`).
"""
type TimelineAccountCreatedEvent implements TimelineEntityEvent & TimelineEvent {
  """
  A descriptor of the new account
  """
  accountDescriptor: AccountDescriptor!

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  The `Entity` associated with this event.
  """
  entity: Entity!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A specialized `TimelineEvent` interface common to `timeline` events focused on a single `Entity`.
"""
type TimelineAccountDisabledEvent implements TimelineEntityEvent & TimelineEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  The `Entity` associated with this event.
  """
  entity: Entity!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A specialized `TimelineEvent` interface common to `timeline` events focused on a single `Entity`.
"""
type TimelineAccountEnabledEvent implements TimelineEntityEvent & TimelineEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  The `Entity` associated with this event.
  """
  entity: Entity!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A specialized `TimelineEvent` interface common to `timeline` events focused on a single `Entity`.
"""
type TimelineAccountLockedEvent implements TimelineEntityEvent & TimelineEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  The `Entity` associated with this event.
  """
  entity: Entity!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A `timeline` event indicating a primary account name change of an `Entity`. The
field used as the account name depends on the account type (see
`AccountDescriptor` subtypes). For Active Directory accounts,
`ActiveDirectoryAccountDescriptor:samAccountName` is used.
"""
type TimelineAccountNameChangeEvent implements TimelineEntityEvent & TimelineEvent {
  """
  The primary account name associated with the entity following the event.
  """
  currentName: String!

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  The `Entity` associated with this event.
  """
  entity: Entity!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  The primary account name associated with the entity prior to the event.
  """
  previousName: String!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A specialized `TimelineEvent` interface common to `timeline` events focused on a single `Entity`.
"""
type TimelineAccountUnlockedEvent implements TimelineEntityEvent & TimelineEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  The `Entity` associated with this event.
  """
  entity: Entity!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A `timeline` event indicating a new `Incident` alert.

Unlike most timeline events, this event is continuous. That is to say, the
`endTime` may differ significantly from the `startTime`, which is the value used
for sorting the events in timeline queries.
"""
type TimelineAlertEvent implements TimelineIncidentLifeCycleEvent & TimelineEvent {
  """
  A unique identifier of the alert.
  """
  alertId: UUID!

  """
  The alert type.
  """
  alertType: AlertType!

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  The single endpoint entity associated with the alert, if any. This is set to
  `null` if multiple endpoints are associated with the alert, of if no endpoint
  is associated with it at all. For a list of all entities involved in the
  alert, project the `Entities` field.
  """
  endpointEntity: EndpointEntity

  """
  A list of all entities associated with this alert.
  """
  entities: [Entity!]!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  The containing incident of the alert.
  """
  incident: Incident!
    @deprecated(
      reason: "`incident` is deprecated and will be removed in a future release"
    )
  patternId: Int!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  `True` is returned if the alert is resolved.
  """
  resolved: Boolean!
  sourceEntity: UserOrEndpointEntity

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!
  state: IncidentState!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!

  """
  The single user entity associated with the alert, if any. This is set to
  `null` if multiple users are associated with the alert, of if no user is
  associated with it at all. For a list of all entities involved in the alert,
  project the `Entities` field.
  """
  userEntity: UserEntity
}

"""
A common interface for all events exposed by the `timeline` API.
"""
type TimelineAlertExceptionModifiedEvent implements TimelineSystemConfigurationEvent & TimelineAuditEvent & TimelineEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!
  patternId: Int!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!
  systemComponent: SystemComponent!
  systemUser: SystemUser

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A common interface for all events exposed by the `timeline` API.
"""
interface TimelineAuditEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!
  systemComponent: SystemComponent!
  systemUser: SystemUser

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A `TimelineEvent` interface common to successful and failed authentication `timeline` events.
"""
interface TimelineAuthenticationEvent {
  """
  If the activity is known to have occurred within an Active Directory site, this is set to the site's name.
  """
  activeDirectorySiteName: String

  """
  The authentication type.
  """
  authenticationType: AuthenticationType!
  browserInfo: BrowserInfo

  """
  The data source associated with this activity. Because the `DataSource`
  enumeration contains some fallback values for generic sources,
  `dataSourceVendorName` is provided as an alternative.
  """
  dataSource: DataSource!

  """
  A display-oriented label for the data source associated with the activity.
  """
  dataSourceVendorName: String
  deviceName: String

  """
  A display-oriented label reflecting the origin endpoint operating system, as
  exposed by the `operatingSystemInfo` field. The semantics of this value are
  not rrigorously restricted.
  Therefore, the data is supposed to used programmatically, it is always
  recommended to project the underlying `operatingSystemInfo` field instead.
  """
  deviceType: String

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A display-oriented label reflecting the best available display name for the
  origin endpoint. `EndpointEntity:primaryDisplayName` is used if available,
  otherwise either `hostName` or `ipAddress` may be used as a fallback option.
  """
  endpointDisplayName: String

  """
  The origin endpoint entity associated with the activity, if available. Note
  that `endpointDisplayName` is available even when the entity is unknown.
  """
  endpointEntity: EndpointEntity

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  The geolocation associated with the activity, if any.
  """
  geoLocation: GeoLocation

  """
  The origin endpoint host name.
  """
  hostName: String

  """
  The origin endpoint IP address, if available.
  """
  ipAddress: IpAddress
  ipAddressReputations: [IpReputation!]!
  ispClassification: IspClassification
  ispDomain: String

  """
  The list of Kerberos encryption types specified by the client. Only set for
  activities performed over the Kerberos protocol (see `protocolType`),
  """
  kerberosEncryptionTypes: [KerberosEncryptionType!]
  ldapSecurityType: LdapSecurityType

  """
  If `true`, `userEntity` is associated with `geoLocation` by a `BindingType:GEO_LOCATION` `association`.

  Returns `null` if no location data is available for this activity or if the
  user associated with this activity couldn't be correlated with a user entity.
  """
  locationAssociatedWithUser: Boolean

  """
  The subnet label, as defined in the system configuration, associated with the
  origin endpoint IP address at the time the activity was performed.
  """
  networkTag: String

  """
  The subnet type, as defined in the system configuration, associated with the
  origin endpoint IP address at the time the activity was performed.
  """
  networkType: NetworkType!

  """
  Information about the origin endpoint operating system.
  """
  operatingSystemInfo: OperatingSystemInfo

  """
  The primary network protocol used for performing the activity.
  """
  protocolType: ProtocolType!
  protocolVersion: String

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection
  smbDialect: SmbDialect
  sourceEntity: UserOrEndpointEntity

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The target endpoint associated with this activity (such as a domain controller), if any.
  """
  targetEndpointEntity: EndpointEntity

  """
  The target service entity.
  """
  targetEntity: Entity
  targetServiceDescription: String
  targetServiceDisplayName: String

  """
  The target service raw identifier.
  """
  targetServiceIdentifier: String

  """
  A classification value of the service accessed, based on the raw identifier
  (`targetServiceIdentifier`) and the target entity (`targetServiceEntity`).
  """
  targetServiceType: ServiceType

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
  tlsVersion: TlsVersion

  """
  A display-oriented label of the best available display name for the user
  associated with this event. `UserEntity:primaryDisplayName` is used if
  available. Otherwise, the raw user identifier used for performing this
  activity is applied.
  """
  userDisplayName: String!

  """
  The user entity associated with the activity, if available. Note that
  `userDisplayName` is available even when the entity is unknown.
  """
  userEntity: UserEntity
}

"""
A specialized `TimelineEvent` interface common to `timeline` events focused on a single `Entity`.
"""
type TimelineAuthorizerChangeNotificationEvent implements TimelineEntityEvent & TimelineEvent {
  addedAuthorizers: [Entity!]!
  currentAuthorizer: UserEntity
    @deprecated(
      reason: "`currentAuthorizer` is deprecated and will be removed in a future release"
    )

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  The `Entity` associated with this event.
  """
  entity: Entity!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!
  previousAuthorizer: UserEntity
    @deprecated(
      reason: "`previousAuthorizer` is deprecated and will be removed in a future release"
    )

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection
  removedAuthorizers: [Entity!]!

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A common interface for all events exposed by the `timeline` API.
"""
interface TimelineConfigurationReportEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  A unique identifier for the report.
  """
  reportId: String!

  """
  The report name.
  """
  reportName: String!

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!
  systemComponent: SystemComponent!
  systemUser: SystemUser

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A common interface for all events exposed by the `timeline` API.
"""
type TimelineConnectorConfigurationAddedEvent implements TimelineConnectorConfigurationEvent & TimelineSystemConfigurationEvent & TimelineAuditEvent & TimelineEvent {
  category: String!

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!
  systemComponent: SystemComponent!
  systemUser: SystemUser

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
  type: String!
}

"""
A common interface for all events exposed by the `timeline` API.
"""
type TimelineConnectorConfigurationDeletedEvent implements TimelineConnectorConfigurationEvent & TimelineSystemConfigurationEvent & TimelineAuditEvent & TimelineEvent {
  category: String!

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!
  systemComponent: SystemComponent!
  systemUser: SystemUser

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
  type: String!
}

"""
A common interface for all events exposed by the `timeline` API.
"""
interface TimelineConnectorConfigurationEvent {
  category: String!

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!
  systemComponent: SystemComponent!
  systemUser: SystemUser

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
  type: String!
}

"""
A common interface for all events exposed by the `timeline` API.
"""
type TimelineConnectorConfigurationModifiedEvent implements TimelineConnectorConfigurationEvent & TimelineSystemConfigurationEvent & TimelineAuditEvent & TimelineEvent {
  category: String!

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!
  systemComponent: SystemComponent!
  systemUser: SystemUser

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
  type: String!
}

"""
A `TimelineEvent` interface common to system notification `timeline` events.
"""
type TimelineConnectorFailureEvent implements TimelineNotificationEvent & TimelineErrorEvent & TimelineEvent {
  connectorStatus: ConnectorStatus!
  connectorType: String!

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  Information regarding the error.
  """
  errorDetails: ErrorDetails!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!
  providerType: String

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The system notification status.
  """
  state: NotificationState!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A `timeline` event type indicating a [DCE/RPC](http://www.dcerpc.org/) activity associated with a particular signature.
"""
type TimelineDceRpcEvent implements TimelineUserOnEndpointActivityEvent & TimelineEvent {
  """
  If the activity is known to have occurred within an Active Directory site, this is set to the site's name.
  """
  activeDirectorySiteName: String
  browserInfo: BrowserInfo

  """
  The data source associated with this activity. Because the `DataSource`
  enumeration contains some fallback values for generic sources,
  `dataSourceVendorName` is provided as an alternative.
  """
  dataSource: DataSource!

  """
  A display-oriented label for the data source associated with the activity.
  """
  dataSourceVendorName: String

  """
  The DCE-RPC activity signature.
  """
  dcerpcSignature: DcerpcSignature!
  deviceName: String

  """
  A display-oriented label reflecting the origin endpoint operating system, as
  exposed by the `operatingSystemInfo` field. The semantics of this value are
  not rrigorously restricted.
  Therefore, the data is supposed to used programmatically, it is always
  recommended to project the underlying `operatingSystemInfo` field instead.
  """
  deviceType: String

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A display-oriented label reflecting the best available display name for the
  origin endpoint. `EndpointEntity:primaryDisplayName` is used if available,
  otherwise either `hostName` or `ipAddress` may be used as a fallback option.
  """
  endpointDisplayName: String

  """
  The origin endpoint entity associated with the activity, if available. Note
  that `endpointDisplayName` is available even when the entity is unknown.
  """
  endpointEntity: EndpointEntity

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  The geolocation associated with the activity, if any.
  """
  geoLocation: GeoLocation

  """
  The origin endpoint host name.
  """
  hostName: String

  """
  The origin endpoint IP address, if available.
  """
  ipAddress: IpAddress
  ipAddressReputations: [IpReputation!]!
  ispClassification: IspClassification
  ispDomain: String
  ldapSecurityType: LdapSecurityType

  """
  If `true`, `userEntity` is associated with `geoLocation` by a `BindingType:GEO_LOCATION` `association`.

  Returns `null` if no location data is available for this activity or if the
  user associated with this activity couldn't be correlated with a user entity.
  """
  locationAssociatedWithUser: Boolean

  """
  The subnet label, as defined in the system configuration, associated with the
  origin endpoint IP address at the time the activity was performed.
  """
  networkTag: String

  """
  The subnet type, as defined in the system configuration, associated with the
  origin endpoint IP address at the time the activity was performed.
  """
  networkType: NetworkType!

  """
  Information about the origin endpoint operating system.
  """
  operatingSystemInfo: OperatingSystemInfo

  """
  The primary network protocol used for performing the activity.
  """
  protocolType: ProtocolType!
  protocolVersion: String

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection
  sourceEntity: UserOrEndpointEntity

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The target endpoint associated with this activity (such as a domain controller), if any.
  """
  targetEndpointEntity: EndpointEntity

  """
  The target service entity.
  """
  targetEntity: Entity
  targetServiceDescription: String
  targetServiceDisplayName: String

  """
  The target service raw identifier.
  """
  targetServiceIdentifier: String

  """
  A classification value of the service accessed, based on the raw identifier
  (`targetServiceIdentifier`) and the target entity (`targetServiceEntity`).
  """
  targetServiceType: ServiceType

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
  tlsVersion: TlsVersion

  """
  A display-oriented label of the best available display name for the user
  associated with this event. `UserEntity:primaryDisplayName` is used if
  available. Otherwise, the raw user identifier used for performing this
  activity is applied.
  """
  userDisplayName: String!

  """
  The user entity associated with the activity, if available. Note that
  `userDisplayName` is available even when the entity is unknown.
  """
  userEntity: UserEntity
}

"""
A `timeline` event indicating a change in the `Department` field of an entity's primary account.
"""
type TimelineDepartmentChangeEvent implements TimelineEntityEvent & TimelineEvent {
  """
  The department associated with the primary account of the entity after the event.
  """
  currentDepartment: String

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  The `Entity` associated with this event.
  """
  entity: Entity!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  The department associated with the primary account of the entity prior to the event.
  """
  previousDepartment: String

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A common interface for all events exposed by the `timeline` API.
"""
type TimelineDetectionAggressionConfigurationModifiedEvent implements TimelineSystemConfigurationEvent & TimelineAuditEvent & TimelineEvent {
  currentAggressionLevel: AggressionLevel

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!
  previousAggressionLevel: AggressionLevel

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!
  systemComponent: SystemComponent!
  systemUser: SystemUser

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A specialized `TimelineEvent` interface common to system notifications
concerning a specific Active Directory domain controller.
"""
interface TimelineDomainControllerNotificationEvent {
  """
  The domain controller entity.
  """
  domainControllerEntity: EndpointEntity!

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The system notification status.
  """
  state: NotificationState!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A `TimelineEvent` interface common to system notification `timeline` events.
"""
type TimelineDomainRemovalEvent implements TimelineNotificationEvent & TimelineEvent {
  domain: String!

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The system notification status.
  """
  state: NotificationState!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A `timeline` event indicating a change in a user's `UserEntity:emailAddresses` list.
"""
type TimelineEmailAddressChangeEvent implements TimelineEntityEvent & TimelineEvent {
  """
  The list of email addresses associated with the entity after the event.
  """
  currentEmailAddresses: [String!]!

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  The `Entity` associated with this event.
  """
  entity: Entity!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  The list of email addresses associated with the entity prior to the event.
  """
  previousEmailAddresses: [String!]!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A common interface for all events exposed by the `timeline` API.
"""
type TimelineEmailNotificationConfigurationModifiedEvent implements TimelineSystemConfigurationEvent & TimelineAuditEvent & TimelineEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!
  systemComponent: SystemComponent!
  systemUser: SystemUser

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A specialized `TimelineEvent` interface common to `timeline` events focused on a single `Entity`.
"""
type TimelineEntityArchivedEvent implements TimelineEntityEvent & TimelineEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  The `Entity` associated with this event.
  """
  entity: Entity!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A specialized `TimelineEvent` interface common to `timeline` events focused on a single `Entity`.
"""
interface TimelineEntityEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  The `Entity` associated with this event.
  """
  entity: Entity!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A specialized `TimelineEvent` interface common to `timeline` events focused on a single `Entity`.
"""
type TimelineEntityInactiveEvent implements TimelineEntityEvent & TimelineEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  The `Entity` associated with this event.
  """
  entity: Entity!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!
  mostRecentActivity: DateTime

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A specialized `TimelineEvent` interface common to `timeline` events focused on a single `Entity`.
"""
type TimelineEntityLearnedEvent implements TimelineEntityEvent & TimelineEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  The `Entity` associated with this event.
  """
  entity: Entity!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A specialized `TimelineEvent` interface common to `timeline` events focused on a single `Entity`.
"""
type TimelineEntityMarkedEvent implements TimelineEntityEvent & TimelineEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  The `Entity` associated with this event.
  """
  entity: Entity!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A specialized `TimelineEvent` interface common to `timeline` events focused on a single `Entity`.
"""
type TimelineEntityNotSharedEvent implements TimelineEntityEvent & TimelineEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  The `Entity` associated with this event.
  """
  entity: Entity!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A specialized `TimelineEvent` interface common to `timeline` events focused on a single `Entity`.
"""
type TimelineEntityResurgenceEvent implements TimelineEntityEvent & TimelineEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  The `Entity` associated with this event.
  """
  entity: Entity!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!
  mostRecentActivity: DateTime
  precedingActivity: DateTime

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A specialized `TimelineEvent` interface common to `timeline` events focused on a single `Entity`.
"""
type TimelineEntitySharedEvent implements TimelineEntityEvent & TimelineEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  The `Entity` associated with this event.
  """
  entity: Entity!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A specialized `TimelineEvent` interface common to `timeline` events focused on a single `Entity`.
"""
type TimelineEntityStaleEvent implements TimelineEntityEvent & TimelineEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  The `Entity` associated with this event.
  """
  entity: Entity!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!
  mostRecentActivity: DateTime

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A specialized `TimelineEvent` interface common to `timeline` events focused on a single `Entity`.
"""
type TimelineEntityUnarchivedEvent implements TimelineEntityEvent & TimelineEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  The `Entity` associated with this event.
  """
  entity: Entity!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A specialized `TimelineEvent` interface common to `timeline` events focused on a single `Entity`.
"""
type TimelineEntityUnmarkedEvent implements TimelineEntityEvent & TimelineEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  The `Entity` associated with this event.
  """
  entity: Entity!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A specialized `TimelineEvent` interface common to `timeline` events focused on a single `Entity`.
"""
type TimelineEntityUnwatchedEvent implements TimelineEntityEvent & TimelineEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  The `Entity` associated with this event.
  """
  entity: Entity!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!
  systemUser: SystemUser

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A specialized `TimelineEvent` interface common to `timeline` events focused on a single `Entity`.
"""
type TimelineEntityWatchedEvent implements TimelineEntityEvent & TimelineEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  The `Entity` associated with this event.
  """
  entity: Entity!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!
  systemUser: SystemUser

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A `TimelineEvent` interface common to `timeline` events indicating an error or a failure.
"""
interface TimelineErrorEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  Information regarding the error.
  """
  errorDetails: ErrorDetails!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A common interface for all events exposed by the `timeline` API.
"""
interface TimelineEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
An enumeration of `timeline` event categories, each representing multiple
`TimelineEventType` values. They can be used to restrict event types instead of
or together with the exact event types in `timeline` query criteria.

These categories form logical groups for timeline events, and any event type can
belong to multiple categories. Moreover, the mapping between categories to event
types may change between versions.

See the `categories` timeline query argument for additional information on the usage of this enumeration.
"""
enum TimelineEventCategory {
  """
  The category for event types indicating network activities, such as authentication and service accesses.
  """
  ACTIVITY

  """
  The category for audit log event types. This category is used by the system audit log page.
  """
  AUDIT

  """
  The category for all event types focused on a single `Entity`. This category
  is used by the Entity page "Timeline" in the user interface.
  """
  ENTITY

  """
  The category for all event types representing system notifications. This
  category is used by the Notifications page in the user interface.
  """
  NOTIFICATION

  """
  The category for all policy-related event types, used by the policy audit log.
  """
  POLICY

  """
  The category for all system-related event types.
  """
  SYSTEM

  """
  The category for threat-related event types, such as alerts and score escalations.
  """
  THREAT

  """
  The category for system-notification event types related to coverage issues.
  """
  SYSTEM_COVERAGE_NOTIFICATION

  """
  The category for system-notification event types related to software updates.
  """
  SOFTWARE_UPDATE

  """
  The category for system-notification event types related to configured connectors.
  """
  CONNECTOR_NOTIFICATION

  """
  The category for all event types which may be Threat Hunter queries.
  """
  THREAT_HUNTER
}

"""
A [Relay-Compatible](https://facebook.github.io/relay/graphql/connections.htm)
Connection type for paginating over `TimelineEvent` elements.
"""
type TimelineEventConnection {
  """
  List of `TimelineEvent` edges.
  """
  edges: [TimelineEventEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A convenience extension to the standard Relay Connection type, directly
  exposing the `TimelineEvent` elements, which may be used *instead* of edges.
  It is primarily useful in conjunction with `startCursor` and `endCursor`, or
  when exploring the API interactively (e.g. in GraphiQL).
  """
  nodes: [TimelineEvent!]!
}

"""
A `TimelineEvent` edge in a connection.
"""
type TimelineEventEdge {
  """
  Cursor pointing to this edge, to be used in standard pagination query arguments (`before`, `after`).
  """
  cursor: Cursor!

  """
  The `TimelineEvent` item at the end of this edge.
  """
  node: TimelineEvent!
}

type TimelineEventImpl implements TimelineEvent {
  endTime: DateTime!
  eventId: EventId!
  eventLabel: String!
  eventSeverity: TimelineEventSeverity!
  eventType: TimelineEventType!
  relatedEvents(
    activityQuery: ActivityQueryInput
    after: Cursor
    alertQuery: AlertQueryInput
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]
    first: Int
    incidentIds: [String!]
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection
  startTime: DateTime!
  timestamp: DateTime!
}

enum TimelineEventSeverity {
  NEUTRAL
  MODERATE
  IMPORTANT
}

enum TimelineEventType {
  SUCCESSFUL_AUTHENTICATION
  FAILED_AUTHENTICATION
  SERVICE_ACCESS
  DCERPC_OPERATION
  REMOTE_CODE_EXECUTION
  FILE_OPERATION
  LDAP_SEARCH
  ACCOUNT_CREATED
  PASSWORD_CHANGE
  ACCOUNT_NAME_CHANGE
  DEPARTMENT_CHANGE
  OU_CHANGE
  EMAIL_ADDRESS_CHANGE
  ACCOUNT_ENABLED
  ACCOUNT_DISABLED
  ACCOUNT_LOCKED
  ACCOUNT_UNLOCKED
  ENTITY_RESURGENCE
  ENTITY_INACTIVE
  ENTITY_STALE
  ENTITY_SHARED
  ENTITY_NOT_SHARED
  ENTITY_LEARNED
  ENTITY_MARKED
  ENTITY_UNMARKED
  ENTITY_WATCHED
  ENTITY_UNWATCHED
  ENTITY_ARCHIVED
  ENTITY_UNARCHIVED
  EXPOSED_PASSWORD
  WEAK_PASSWORD
  PRIVILEGE_ESCALATION
  PRIVILEGE_DE_ESCALATION
  SCORE_ESCALATION
  SCORE_DE_ESCALATION
  AUTHORIZER_CHANGE
  LINKED_ACCOUNT_CHANGE
  ALERT
  NEW_INCIDENT
    @deprecated(
      reason: "`NEW_INCIDENT` is deprecated and will be removed in a future release"
    )
  INCIDENT_TYPE_CHANGE
    @deprecated(
      reason: "`INCIDENT_TYPE_CHANGE` is deprecated and will be removed in a future release"
    )
  INCIDENT_SEVERITY_CHANGE
    @deprecated(
      reason: "`INCIDENT_SEVERITY_CHANGE` is deprecated and will be removed in a future release"
    )
  INCIDENT_LIFE_CYCLE_STAGE_CHANGE
    @deprecated(
      reason: "`INCIDENT_LIFE_CYCLE_STAGE_CHANGE` is deprecated and will be removed in a future release"
    )
  POLICY_RULE_MATCH
  MFA_SERVICE_ENROLLMENT
  CONNECTOR_CONFIGURATION_MODIFIED
  CONNECTOR_CONFIGURATION_ADDED
  CONNECTOR_CONFIGURATION_DELETED
  POLICY_RULE_MODIFIED
  POLICY_RULE_ADDED
  POLICY_RULE_DELETED
  POLICY_RULES_REORDERED
  POLICY_APPLIED
  ALERT_EXCEPTION_MODIFIED
  REPORT_MODIFIED
  REPORT_ADDED
  REPORT_DELETED
  EMAIL_NOTIFICATION_CONFIGURATION_MODIFIED
  DETECTION_AGGRESSION_CONFIGURATION_MODIFIED
  RISK_FACTORS_CONFIGURATION_MODIFIED
  DOMAIN_REMOVAL
  NET_EXTRACTOR_STOPPED_PUBLISH
  MFA_UI_FALLBACK_PERIOD_CHANGED
  UNCOVERED_DOMAIN_CONTROLLER
  CONNECTOR_FAILURE
  TOOL_FAILURE
  TOOL_DELETED
  IDP_CONTAINER_WATCHDOG_EVENT
  IDP_CONTAINER_GENERIC_WATCHDOG_EVENT
  NET_EXTRACTOR_STOPPED_POLICY
  NET_EXTRACTOR_STOPPED_TRAFFIC
  NET_EXTRACTOR_WATCHDOG_ANALYZER_SERVICE_RESTART
  NET_EXTRACTOR_WATCHDOG_MANAGEMENT_SERVICE_RESTART
  NET_EXTRACTOR_WATCHDOG_MONITORING_SERVICE_RESTART
}

"""
A specialized `TimelineEvent` interface common to `timeline` events focused on a single `Entity`.
"""
type TimelineExposedPasswordEvent implements TimelineEntityEvent & TimelineEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  The `Entity` associated with this event.
  """
  entity: Entity!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A `timeline` event indicating one or more failed user authentications on an endpoint within one minute.
"""
type TimelineFailedAuthenticationEvent implements TimelineAuthenticationEvent & TimelineErrorEvent & TimelineUserOnEndpointActivityEvent & TimelineEvent {
  """
  If the activity is known to have occurred within an Active Directory site, this is set to the site's name.
  """
  activeDirectorySiteName: String

  """
  The number of failed authentication attempts.
  """
  activityCount: Int!

  """
  The authentication type.
  """
  authenticationType: AuthenticationType!

  """
  If `true`, the authentication failure is a result of policy enforcement.
  """
  blocked: Boolean!
  browserInfo: BrowserInfo

  """
  The data source associated with this activity. Because the `DataSource`
  enumeration contains some fallback values for generic sources,
  `dataSourceVendorName` is provided as an alternative.
  """
  dataSource: DataSource!

  """
  A display-oriented label for the data source associated with the activity.
  """
  dataSourceVendorName: String
  deviceName: String

  """
  A display-oriented label reflecting the origin endpoint operating system, as
  exposed by the `operatingSystemInfo` field. The semantics of this value are
  not rrigorously restricted.
  Therefore, the data is supposed to used programmatically, it is always
  recommended to project the underlying `operatingSystemInfo` field instead.
  """
  deviceType: String

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A display-oriented label reflecting the best available display name for the
  origin endpoint. `EndpointEntity:primaryDisplayName` is used if available,
  otherwise either `hostName` or `ipAddress` may be used as a fallback option.
  """
  endpointDisplayName: String

  """
  The origin endpoint entity associated with the activity, if available. Note
  that `endpointDisplayName` is available even when the entity is unknown.
  """
  endpointEntity: EndpointEntity

  """
  Additional information about the reason for the authentication failure.
  """
  errorDetails: ErrorDetails!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  The geolocation associated with the activity, if any.
  """
  geoLocation: GeoLocation

  """
  The origin endpoint host name.
  """
  hostName: String

  """
  The origin endpoint IP address, if available.
  """
  ipAddress: IpAddress
  ipAddressReputations: [IpReputation!]!
  ispClassification: IspClassification
  ispDomain: String

  """
  The list of Kerberos encryption types specified by the client. Only set for
  activities performed over the Kerberos protocol (see `protocolType`),
  """
  kerberosEncryptionTypes: [KerberosEncryptionType!]
  ldapSecurityType: LdapSecurityType

  """
  If `true`, `userEntity` is associated with `geoLocation` by a `BindingType:GEO_LOCATION` `association`.

  Returns `null` if no location data is available for this activity or if the
  user associated with this activity couldn't be correlated with a user entity.
  """
  locationAssociatedWithUser: Boolean

  """
  The subnet label, as defined in the system configuration, associated with the
  origin endpoint IP address at the time the activity was performed.
  """
  networkTag: String

  """
  The subnet type, as defined in the system configuration, associated with the
  origin endpoint IP address at the time the activity was performed.
  """
  networkType: NetworkType!

  """
  Information about the origin endpoint operating system.
  """
  operatingSystemInfo: OperatingSystemInfo

  """
  The primary network protocol used for performing the activity.
  """
  protocolType: ProtocolType!
  protocolVersion: String

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection
  smbDialect: SmbDialect
  sourceEntity: UserOrEndpointEntity

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The target endpoint associated with this activity (such as a domain controller), if any.
  """
  targetEndpointEntity: EndpointEntity

  """
  The target service entity.
  """
  targetEntity: Entity
  targetServiceDescription: String
  targetServiceDisplayName: String

  """
  The target service raw identifier.
  """
  targetServiceIdentifier: String

  """
  A classification value of the service accessed, based on the raw identifier
  (`targetServiceIdentifier`) and the target entity (`targetServiceEntity`).
  """
  targetServiceType: ServiceType

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
  tlsVersion: TlsVersion

  """
  A display-oriented label of the best available display name for the user
  associated with this event. `UserEntity:primaryDisplayName` is used if
  available. Otherwise, the raw user identifier used for performing this
  activity is applied.
  """
  userDisplayName: String!

  """
  The user entity associated with the activity, if available. Note that
  `userDisplayName` is available even when the entity is unknown.
  """
  userEntity: UserEntity
}

"""
A `timeline` event type indicating a file operation.
"""
type TimelineFileOperationEvent implements TimelineUserOnEndpointActivityEvent & TimelineEvent {
  """
  If the activity is known to have occurred within an Active Directory site, this is set to the site's name.
  """
  activeDirectorySiteName: String
  browserInfo: BrowserInfo

  """
  The data source associated with this activity. Because the `DataSource`
  enumeration contains some fallback values for generic sources,
  `dataSourceVendorName` is provided as an alternative.
  """
  dataSource: DataSource!

  """
  A display-oriented label for the data source associated with the activity.
  """
  dataSourceVendorName: String
  deviceName: String

  """
  A display-oriented label reflecting the origin endpoint operating system, as
  exposed by the `operatingSystemInfo` field. The semantics of this value are
  not rrigorously restricted.
  Therefore, the data is supposed to used programmatically, it is always
  recommended to project the underlying `operatingSystemInfo` field instead.
  """
  deviceType: String

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A display-oriented label reflecting the best available display name for the
  origin endpoint. `EndpointEntity:primaryDisplayName` is used if available,
  otherwise either `hostName` or `ipAddress` may be used as a fallback option.
  """
  endpointDisplayName: String

  """
  The origin endpoint entity associated with the activity, if available. Note
  that `endpointDisplayName` is available even when the entity is unknown.
  """
  endpointEntity: EndpointEntity

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  The location of the file as reported by the vendor.
  """
  fileLocation: String!

  """
  The accessed file name.
  """
  fileName: String!

  """
  The operation applied.
  """
  fileOperationType: FileOperationType!

  """
  The geolocation associated with the activity, if any.
  """
  geoLocation: GeoLocation

  """
  The origin endpoint host name.
  """
  hostName: String

  """
  The origin endpoint IP address, if available.
  """
  ipAddress: IpAddress
  ipAddressReputations: [IpReputation!]!
  ispClassification: IspClassification
  ispDomain: String
  ldapSecurityType: LdapSecurityType

  """
  If `true`, `userEntity` is associated with `geoLocation` by a `BindingType:GEO_LOCATION` `association`.

  Returns `null` if no location data is available for this activity or if the
  user associated with this activity couldn't be correlated with a user entity.
  """
  locationAssociatedWithUser: Boolean

  """
  The mime-type of the accessed file.
  """
  mimeType: String

  """
  The subnet label, as defined in the system configuration, associated with the
  origin endpoint IP address at the time the activity was performed.
  """
  networkTag: String

  """
  The subnet type, as defined in the system configuration, associated with the
  origin endpoint IP address at the time the activity was performed.
  """
  networkType: NetworkType!

  """
  Information about the origin endpoint operating system.
  """
  operatingSystemInfo: OperatingSystemInfo

  """
  The primary network protocol used for performing the activity.
  """
  protocolType: ProtocolType!
  protocolVersion: String

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection
  sourceEntity: UserOrEndpointEntity

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The target endpoint associated with this activity (such as a domain controller), if any.
  """
  targetEndpointEntity: EndpointEntity

  """
  The target service entity.
  """
  targetEntity: Entity
  targetServiceDescription: String
  targetServiceDisplayName: String

  """
  The target service raw identifier.
  """
  targetServiceIdentifier: String

  """
  A classification value of the service accessed, based on the raw identifier
  (`targetServiceIdentifier`) and the target entity (`targetServiceEntity`).
  """
  targetServiceType: ServiceType

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
  tlsVersion: TlsVersion

  """
  A display-oriented label of the best available display name for the user
  associated with this event. `UserEntity:primaryDisplayName` is used if
  available. Otherwise, the raw user identifier used for performing this
  activity is applied.
  """
  userDisplayName: String!

  """
  The user entity associated with the activity, if available. Note that
  `userDisplayName` is available even when the entity is unknown.
  """
  userEntity: UserEntity
}

"""
A specialized `TimelineEvent` interface common to system notifications
concerning a specific Active Directory domain controller.
"""
type TimelineGenericSensorWatchdogEvent implements TimelineDomainControllerNotificationEvent & TimelineNotificationEvent & TimelineEvent {
  """
  The domain controller entity.
  """
  domainControllerEntity: EndpointEntity!

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection
  remediationAction: String!

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The system notification status.
  """
  state: NotificationState!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
  triggeringMetric: String!
}

"""
A specialized `TimelineEvent` interface common to `timeline` event types associated with the life cycle of an incident.
"""
interface TimelineIncidentLifeCycleEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  The containing incident of the alert.
  """
  incident: Incident!
    @deprecated(
      reason: "`incident` is deprecated and will be removed in a future release"
    )

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A `timeline` event indicating a change in `Incident:lifeCycleStage`.
"""
type TimelineIncidentLifeCycleStageChangeEvent implements TimelineIncidentLifeCycleEvent & TimelineAuditEvent & TimelineEvent {
  """
  The lifecycle stage after the event.
  """
  currentStage: IncidentLifeCycleStage!
    @deprecated(
      reason: "`currentStage` is deprecated and will be removed in a future release"
    )

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  The containing incident of the alert.
  """
  incident: Incident!
    @deprecated(
      reason: "`incident` is deprecated and will be removed in a future release"
    )

  """
  The lifecycle stage prior to the event.
  """
  previousStage: IncidentLifeCycleStage!
    @deprecated(
      reason: "`previousStage` is deprecated and will be removed in a future release"
    )

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!
  systemComponent: SystemComponent!
  systemUser: SystemUser

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A `timeline` event indicating a change in `Incident:severity`.
"""
type TimelineIncidentSeverityChange implements TimelineIncidentLifeCycleEvent & TimelineEvent {
  """
  The incident severity prior to the event.
  """
  currentIncidentSeverity: IncidentSeverity!
    @deprecated(
      reason: "`currentIncidentSeverity` is deprecated and will be removed in a future release"
    )

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  The containing incident of the alert.
  """
  incident: Incident!
    @deprecated(
      reason: "`incident` is deprecated and will be removed in a future release"
    )

  """
  The incident severity after the event.
  """
  previousIncidentSeverity: IncidentSeverity!
    @deprecated(
      reason: "`previousIncidentSeverity` is deprecated and will be removed in a future release"
    )

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A `timeline` event indicating a change in `Incident:type`.
"""
type TimelineIncidentTypeChange implements TimelineIncidentLifeCycleEvent & TimelineEvent {
  """
  The incident type after the event.
  """
  currentIncidentType: IncidentType!
    @deprecated(
      reason: "`currentIncidentType` is deprecated and will be removed in a future release"
    )

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  The containing incident of the alert.
  """
  incident: Incident!
    @deprecated(
      reason: "`incident` is deprecated and will be removed in a future release"
    )

  """
  The incident type prior to the event.
  """
  previousIncidentType: IncidentType!
    @deprecated(
      reason: "`previousIncidentType` is deprecated and will be removed in a future release"
    )

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A `timeline` event type indicating that one or more LDAP searches of a common
pattern have been issued within a particular minute timeframe. An LDAP search
pattern is based on the exact structural shape of the query, but discards bound
query values (such as a particular LDAP DN).
"""
type TimelineLdapSearchEvent implements TimelineUserOnEndpointActivityEvent & TimelineEvent {
  """
  If the activity is known to have occurred within an Active Directory site, this is set to the site's name.
  """
  activeDirectorySiteName: String
  browserInfo: BrowserInfo

  """
  The data source associated with this activity. Because the `DataSource`
  enumeration contains some fallback values for generic sources,
  `dataSourceVendorName` is provided as an alternative.
  """
  dataSource: DataSource!

  """
  A display-oriented label for the data source associated with the activity.
  """
  dataSourceVendorName: String
  deviceName: String

  """
  A display-oriented label reflecting the origin endpoint operating system, as
  exposed by the `operatingSystemInfo` field. The semantics of this value are
  not rrigorously restricted.
  Therefore, the data is supposed to used programmatically, it is always
  recommended to project the underlying `operatingSystemInfo` field instead.
  """
  deviceType: String

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A display-oriented label reflecting the best available display name for the
  origin endpoint. `EndpointEntity:primaryDisplayName` is used if available,
  otherwise either `hostName` or `ipAddress` may be used as a fallback option.
  """
  endpointDisplayName: String

  """
  The origin endpoint entity associated with the activity, if available. Note
  that `endpointDisplayName` is available even when the entity is unknown.
  """
  endpointEntity: EndpointEntity

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  The geolocation associated with the activity, if any.
  """
  geoLocation: GeoLocation

  """
  The origin endpoint host name.
  """
  hostName: String

  """
  The origin endpoint IP address, if available.
  """
  ipAddress: IpAddress
  ipAddressReputations: [IpReputation!]!
  ispClassification: IspClassification
  ispDomain: String

  """
  The request LDAP attributes.
  """
  ldapSearchAttributes: [String!]

  """
  A filter sample taken from one of the raw search activities group by this event.
  """
  ldapSearchFilterSample: String!

  """
  The list of query signatures the system has identified for this activity.
  """
  ldapSearchQuerySignatures: [LdapQuerySignature!]!

  """
  The specified LDAP search scope.
  """
  ldapSearchScope: Int!

  """
  The specified LDAP search size limit.
  """
  ldapSearchSizeLimit: Int!
  ldapSecurityType: LdapSecurityType

  """
  If `true`, `userEntity` is associated with `geoLocation` by a `BindingType:GEO_LOCATION` `association`.

  Returns `null` if no location data is available for this activity or if the
  user associated with this activity couldn't be correlated with a user entity.
  """
  locationAssociatedWithUser: Boolean

  """
  The subnet label, as defined in the system configuration, associated with the
  origin endpoint IP address at the time the activity was performed.
  """
  networkTag: String

  """
  The subnet type, as defined in the system configuration, associated with the
  origin endpoint IP address at the time the activity was performed.
  """
  networkType: NetworkType!

  """
  Information about the origin endpoint operating system.
  """
  operatingSystemInfo: OperatingSystemInfo

  """
  The primary network protocol used for performing the activity.
  """
  protocolType: ProtocolType!
  protocolVersion: String

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection
  sourceEntity: UserOrEndpointEntity

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The target endpoint associated with this activity (such as a domain controller), if any.
  """
  targetEndpointEntity: EndpointEntity

  """
  The target service entity.
  """
  targetEntity: Entity
  targetServiceDescription: String
  targetServiceDisplayName: String

  """
  The target service raw identifier.
  """
  targetServiceIdentifier: String

  """
  A classification value of the service accessed, based on the raw identifier
  (`targetServiceIdentifier`) and the target entity (`targetServiceEntity`).
  """
  targetServiceType: ServiceType

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
  tlsVersion: TlsVersion

  """
  A display-oriented label of the best available display name for the user
  associated with this event. `UserEntity:primaryDisplayName` is used if
  available. Otherwise, the raw user identifier used for performing this
  activity is applied.
  """
  userDisplayName: String!

  """
  The user entity associated with the activity, if available. Note that
  `userDisplayName` is available even when the entity is unknown.
  """
  userEntity: UserEntity
}

"""
A specialized `TimelineEvent` interface common to `timeline` events focused on a single `Entity`.
"""
type TimelineLinkedAccountChangeNotificationEvent implements TimelineEntityEvent & TimelineEvent {
  addedLinkedAccounts: [Entity!]!

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  The `Entity` associated with this event.
  """
  entity: Entity!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection
  removedLinkedAccounts: [Entity!]!

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A common interface for all events exposed by the `timeline` API.
"""
type TimelineMfaFallbackPeriodEvent implements TimelineUserEngagementChangedEvent & TimelineSystemConfigurationEvent & TimelineAuditEvent & TimelineEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!
  mfaFallbackPeriod: Long!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!
  systemComponent: SystemComponent!
  systemUser: SystemUser

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A common interface for all events exposed by the `timeline` API.
"""
type TimelineMfaServiceEnrollmentEvent implements TimelineEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!
  engagementSummary: CommonEngagementSummary!
  entities: [UserEntity!]!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A specialized `TimelineEvent` interface common to system notifications
concerning a specific Active Directory domain controller.
"""
type TimelineNetExtractorStoppedPolicyEvent implements TimelineDomainControllerNotificationEvent & TimelineNotificationEvent & TimelineEvent {
  """
  The domain controller entity.
  """
  domainControllerEntity: EndpointEntity!

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The system notification status.
  """
  state: NotificationState!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
  triggeringMetrics: [String!]!
}

"""
A specialized `TimelineEvent` interface common to system notifications
concerning a specific Active Directory domain controller.
"""
type TimelineNetExtractorStoppedPublishEvent implements TimelineDomainControllerNotificationEvent & TimelineNotificationEvent & TimelineEvent {
  """
  The domain controller entity.
  """
  domainControllerEntity: EndpointEntity!

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The system notification status.
  """
  state: NotificationState!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
  triggeringMetrics: [String!]!
}

"""
A specialized `TimelineEvent` interface common to system notifications
concerning a specific Active Directory domain controller.
"""
type TimelineNetExtractorStoppedTrafficEvent implements TimelineDomainControllerNotificationEvent & TimelineNotificationEvent & TimelineEvent {
  """
  The domain controller entity.
  """
  domainControllerEntity: EndpointEntity!

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The system notification status.
  """
  state: NotificationState!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
  triggeringMetrics: [String!]!
}

"""
A specialized `TimelineEvent` interface common to system notifications
concerning a specific Active Directory domain controller.
"""
type TimelineNetExtractorWatchdogAnalyzerServiceRestartEvent implements TimelineDomainControllerNotificationEvent & TimelineNotificationEvent & TimelineEvent {
  """
  The domain controller entity.
  """
  domainControllerEntity: EndpointEntity!

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The system notification status.
  """
  state: NotificationState!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
  triggeringMetrics: [String!]!
}

"""
A specialized `TimelineEvent` interface common to system notifications
concerning a specific Active Directory domain controller.
"""
type TimelineNetExtractorWatchdogManagementServiceRestartEvent implements TimelineDomainControllerNotificationEvent & TimelineNotificationEvent & TimelineEvent {
  """
  The domain controller entity.
  """
  domainControllerEntity: EndpointEntity!

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The system notification status.
  """
  state: NotificationState!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
  triggeringMetrics: [String!]!
}

"""
A specialized `TimelineEvent` interface common to system notifications
concerning a specific Active Directory domain controller.
"""
type TimelineNetExtractorWatchdogMonitoringServiceRestartEvent implements TimelineDomainControllerNotificationEvent & TimelineNotificationEvent & TimelineEvent {
  """
  The domain controller entity.
  """
  domainControllerEntity: EndpointEntity!

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The system notification status.
  """
  state: NotificationState!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
  triggeringMetrics: [String!]!
}

"""
A `timeline` event indicating a new incident.
"""
type TimelineNewIncidentEvent implements TimelineIncidentLifeCycleEvent & TimelineEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  The containing incident of the alert.
  """
  incident: Incident!
    @deprecated(
      reason: "`incident` is deprecated and will be removed in a future release"
    )

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A `TimelineEvent` interface common to system notification `timeline` events.
"""
interface TimelineNotificationEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The system notification status.
  """
  state: NotificationState!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A `timeline` event indicating a change in the `ou` field of an entity's primary account.
"""
type TimelineOuChangeEvent implements TimelineEntityEvent & TimelineEvent {
  """
  The `ou` associated with the primary account of the entity after the event.
  """
  currentOu: String

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  The `Entity` associated with this event.
  """
  entity: Entity!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  The `ou` associated with the primary account of the entity prior to the event.
  """
  previousOu: String

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A specialized `TimelineEvent` interface common to `timeline` events focused on a single `Entity`.
"""
type TimelinePasswordChangeEvent implements TimelineEntityEvent & TimelineEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  The `Entity` associated with this event.
  """
  entity: Entity!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A common interface for all events exposed by the `timeline` API.
"""
type TimelinePolicyAppliedEvent implements TimelinePolicyConfigurationEvent & TimelineSystemConfigurationEvent & TimelineAuditEvent & TimelineEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!
  systemComponent: SystemComponent!
  systemUser: SystemUser

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A common interface for all events exposed by the `timeline` API.
"""
interface TimelinePolicyConfigurationEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!
  systemComponent: SystemComponent!
  systemUser: SystemUser

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A common interface for all events exposed by the `timeline` API.
"""
type TimelinePolicyRuleAddedEvent implements TimelinePolicySingleRuleChangedEvent & TimelinePolicyConfigurationEvent & TimelineSystemConfigurationEvent & TimelineAuditEvent & TimelineEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection
  ruleId: UUID!
  ruleName: String!

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!
  systemComponent: SystemComponent!
  systemUser: SystemUser

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A common interface for all events exposed by the `timeline` API.
"""
type TimelinePolicyRuleDeletedEvent implements TimelinePolicySingleRuleChangedEvent & TimelinePolicyConfigurationEvent & TimelineSystemConfigurationEvent & TimelineAuditEvent & TimelineEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection
  ruleId: UUID!
  ruleName: String!

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!
  systemComponent: SystemComponent!
  systemUser: SystemUser

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A common interface for all events exposed by the `timeline` API.
"""
type TimelinePolicyRuleMatchEvent implements TimelineEvent {
  action: RuleAction!
  actionLabel: String!
  auditTimestamp: DateTime!
  authorizerEntity: Entity

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!
  inline: Boolean!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection
  resultDescription: String!
  ruleId: UUID!
  ruleName: String
  simulationMode: Boolean!
  sourceEndpoint: Entity
  sourceEndpointDisplayName: String
  sourceEntity: Entity

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!
  successful: Boolean!
  targetEndpoint: Entity
  targetEntity: Entity
  targetEntityDescription: String

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
  transactionId: UUID!
  trigger: RuleTrigger!
  triggerLabel: String!
  triggerTimestamp: DateTime!
}

"""
A common interface for all events exposed by the `timeline` API.
"""
type TimelinePolicyRuleModifiedEvent implements TimelinePolicySingleRuleChangedEvent & TimelinePolicyConfigurationEvent & TimelineSystemConfigurationEvent & TimelineAuditEvent & TimelineEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection
  ruleId: UUID!
  ruleName: String!

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!
  systemComponent: SystemComponent!
  systemUser: SystemUser

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A common interface for all events exposed by the `timeline` API.
"""
type TimelinePolicyRulesReorderedEvent implements TimelinePolicyConfigurationEvent & TimelineSystemConfigurationEvent & TimelineAuditEvent & TimelineEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!
  systemComponent: SystemComponent!
  systemUser: SystemUser

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A common interface for all events exposed by the `timeline` API.
"""
interface TimelinePolicySingleRuleChangedEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection
  ruleId: UUID!
  ruleName: String!

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!
  systemComponent: SystemComponent!
  systemUser: SystemUser

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A `timeline` event indicating `Entity` privilege deescalation. Entity privileges
are determined by `AdminAccountRole` entity roles.
"""
type TimelinePrivilegeDeEscalationEvent implements TimelineEntityEvent & TimelineEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  The `Entity` associated with this event.
  """
  entity: Entity!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  List of removed privileges. All returned types are guaranteed to be subtypes of `AdminAccountRole`.
  """
  removedPrivileges: [EntityRoleType!]!

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A `timeline` event indicating `Entity` privilege escalation. Entity privileges
are determined by `AdminAccountRole` entity roles.
"""
type TimelinePrivilegeEscalationEvent implements TimelineEntityEvent & TimelineEvent {
  """
  List of added privileges. All returned types are guaranteed to be subtypes of `AdminAccountRole`.
  """
  addedPrivileges: [EntityRoleType!]!

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  The `Entity` associated with this event.
  """
  entity: Entity!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A `TimelineEvent` interface common to `timeline` events related to end user
activity on endpoints, such as authentication and service access activities.
This is the primary interface to be used in projections when querying the
timeline for `user` activities.

When available, the user and endpoint `Entity` data is exposed through the
corresponding fields. However, in some cases the data regarding the user or
endpoint may be too limited to be associated with particular entities. For
example, a `FAILED_AUTHENTICATION` event may be a result of a misspelled user
name, and a `SUCCESSFUL_AUTHENTICATION` may originate outside the organization,
limiting the available data about the source endpoint. For this reason,
additional fields exposing more elementary data are also available, alongside
the `Entity` fields.
"""
type TimelineRemoteCodeExecutionEvent implements TimelineUserOnEndpointActivityEvent & TimelineEvent {
  """
  If the activity is known to have occurred within an Active Directory site, this is set to the site's name.
  """
  activeDirectorySiteName: String
  browserInfo: BrowserInfo

  """
  The data source associated with this activity. Because the `DataSource`
  enumeration contains some fallback values for generic sources,
  `dataSourceVendorName` is provided as an alternative.
  """
  dataSource: DataSource!

  """
  A display-oriented label for the data source associated with the activity.
  """
  dataSourceVendorName: String
  deviceName: String

  """
  A display-oriented label reflecting the origin endpoint operating system, as
  exposed by the `operatingSystemInfo` field. The semantics of this value are
  not rrigorously restricted.
  Therefore, the data is supposed to used programmatically, it is always
  recommended to project the underlying `operatingSystemInfo` field instead.
  """
  deviceType: String

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A display-oriented label reflecting the best available display name for the
  origin endpoint. `EndpointEntity:primaryDisplayName` is used if available,
  otherwise either `hostName` or `ipAddress` may be used as a fallback option.
  """
  endpointDisplayName: String

  """
  The origin endpoint entity associated with the activity, if available. Note
  that `endpointDisplayName` is available even when the entity is unknown.
  """
  endpointEntity: EndpointEntity

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  The geolocation associated with the activity, if any.
  """
  geoLocation: GeoLocation

  """
  The origin endpoint host name.
  """
  hostName: String

  """
  The origin endpoint IP address, if available.
  """
  ipAddress: IpAddress
  ipAddressReputations: [IpReputation!]!
  ispClassification: IspClassification
  ispDomain: String
  ldapSecurityType: LdapSecurityType

  """
  If `true`, `userEntity` is associated with `geoLocation` by a `BindingType:GEO_LOCATION` `association`.

  Returns `null` if no location data is available for this activity or if the
  user associated with this activity couldn't be correlated with a user entity.
  """
  locationAssociatedWithUser: Boolean

  """
  The subnet label, as defined in the system configuration, associated with the
  origin endpoint IP address at the time the activity was performed.
  """
  networkTag: String

  """
  The subnet type, as defined in the system configuration, associated with the
  origin endpoint IP address at the time the activity was performed.
  """
  networkType: NetworkType!

  """
  Information about the origin endpoint operating system.
  """
  operatingSystemInfo: OperatingSystemInfo

  """
  The primary network protocol used for performing the activity.
  """
  protocolType: ProtocolType!
  protocolVersion: String

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection
  remoteCodeExecutionMethod: RemoteCodeExecutionMethod!
  sourceEntity: UserOrEndpointEntity

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The target endpoint associated with this activity (such as a domain controller), if any.
  """
  targetEndpointEntity: EndpointEntity

  """
  The target service entity.
  """
  targetEntity: Entity
  targetServiceDescription: String
  targetServiceDisplayName: String

  """
  The target service raw identifier.
  """
  targetServiceIdentifier: String

  """
  A classification value of the service accessed, based on the raw identifier
  (`targetServiceIdentifier`) and the target entity (`targetServiceEntity`).
  """
  targetServiceType: ServiceType

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
  tlsVersion: TlsVersion

  """
  A display-oriented label of the best available display name for the user
  associated with this event. `UserEntity:primaryDisplayName` is used if
  available. Otherwise, the raw user identifier used for performing this
  activity is applied.
  """
  userDisplayName: String!

  """
  The user entity associated with the activity, if available. Note that
  `userDisplayName` is available even when the entity is unknown.
  """
  userEntity: UserEntity
}

"""
A common interface for all events exposed by the `timeline` API.
"""
type TimelineReportAddedEvent implements TimelineConfigurationReportEvent & TimelineSystemConfigurationEvent & TimelineAuditEvent & TimelineEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  A unique identifier for the report.
  """
  reportId: String!

  """
  The report name.
  """
  reportName: String!

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!
  systemComponent: SystemComponent!
  systemUser: SystemUser

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A common interface for all events exposed by the `timeline` API.
"""
type TimelineReportDeletedEvent implements TimelineConfigurationReportEvent & TimelineSystemConfigurationEvent & TimelineAuditEvent & TimelineEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  A unique identifier for the report.
  """
  reportId: String!

  """
  The report name.
  """
  reportName: String!

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!
  systemComponent: SystemComponent!
  systemUser: SystemUser

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A common interface for all events exposed by the `timeline` API.
"""
type TimelineReportModifiedEvent implements TimelineConfigurationReportEvent & TimelineSystemConfigurationEvent & TimelineAuditEvent & TimelineEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  A unique identifier for the report.
  """
  reportId: String!

  """
  The report name.
  """
  reportName: String!

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!
  systemComponent: SystemComponent!
  systemUser: SystemUser

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A common interface for all events exposed by the `timeline` API.
"""
type TimelineRiskFactorsConfigurationModifiedEvent implements TimelineSystemConfigurationEvent & TimelineAuditEvent & TimelineEvent {
  disabledRiskFactors: [RiskFactorType!]!
  enabledRiskFactors: [RiskFactorType!]!

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!
  systemComponent: SystemComponent!
  systemUser: SystemUser

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A specialized `TimelineEvent` interface common to `timeline` events focused on a single `Entity`.
"""
type TimelineScoreDeEscalationEvent implements TimelineEntityEvent & TimelineEvent {
  currentScore: ZeroToOneNumber!
  currentSeverity: String!

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  The `Entity` associated with this event.
  """
  entity: Entity!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!
  previousScore: ZeroToOneNumber
  previousSeverity: ScoreSeverity

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A `timeline` event indicating an escalation in the risk score severity of an entity (see `UserOrEndpointEntity:riskScore`).
"""
type TimelineScoreEscalationEvent implements TimelineEntityEvent & TimelineEvent {
  """
  The risk score value associated with the entity after the event.
  """
  currentScore: ZeroToOneNumber!

  """
  The risk score severity value associated with the entity after the event.
  """
  currentSeverity: String!

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  The `Entity` associated with this event.
  """
  entity: Entity!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  The risk score value associated with the entity prior to the event.
  """
  previousScore: ZeroToOneNumber

  """
  The risk score severity value associated with the entity prior to the event.
  """
  previousSeverity: ScoreSeverity

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A specialized `TimelineEvent` interface common to system notifications
concerning a specific Active Directory domain controller.
"""
type TimelineSensorWatchdogEvent implements TimelineDomainControllerNotificationEvent & TimelineNotificationEvent & TimelineEvent {
  """
  The domain controller entity.
  """
  domainControllerEntity: EndpointEntity!

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!
  lastSampledMemoryValueMB: Int!
  memoryThresholdDurationMinutes: Int!
  memoryThresholdMB: Int!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection
  remediationAction: String!

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The system notification status.
  """
  state: NotificationState!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
  triggeringMetric: String!
}

"""
A `timeline` event indicating a service access network activity.
"""
type TimelineServiceAccessEvent implements TimelineUserOnEndpointActivityEvent & TimelineEvent {
  """
  If the activity is known to have occurred within an Active Directory site, this is set to the site's name.
  """
  activeDirectorySiteName: String
  browserInfo: BrowserInfo

  """
  The data source associated with this activity. Because the `DataSource`
  enumeration contains some fallback values for generic sources,
  `dataSourceVendorName` is provided as an alternative.
  """
  dataSource: DataSource!

  """
  A display-oriented label for the data source associated with the activity.
  """
  dataSourceVendorName: String
  deviceName: String

  """
  A display-oriented label reflecting the origin endpoint operating system, as
  exposed by the `operatingSystemInfo` field. The semantics of this value are
  not rrigorously restricted.
  Therefore, the data is supposed to used programmatically, it is always
  recommended to project the underlying `operatingSystemInfo` field instead.
  """
  deviceType: String

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A display-oriented label reflecting the best available display name for the
  origin endpoint. `EndpointEntity:primaryDisplayName` is used if available,
  otherwise either `hostName` or `ipAddress` may be used as a fallback option.
  """
  endpointDisplayName: String

  """
  The origin endpoint entity associated with the activity, if available. Note
  that `endpointDisplayName` is available even when the entity is unknown.
  """
  endpointEntity: EndpointEntity

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  The geolocation associated with the activity, if any.
  """
  geoLocation: GeoLocation

  """
  The origin endpoint host name.
  """
  hostName: String

  """
  The origin endpoint IP address, if available.
  """
  ipAddress: IpAddress
  ipAddressReputations: [IpReputation!]!
  ispClassification: IspClassification
  ispDomain: String

  """
  The list of Kerberos encryption types specified by the client. Only set for
  activities performed over the Kerberos protocol (see `protocolType`),
  """
  kerberosEncryptionTypes: [KerberosEncryptionType!]
  ldapSecurityType: LdapSecurityType

  """
  If `true`, `userEntity` is associated with `geoLocation` by a `BindingType:GEO_LOCATION` `association`.

  Returns `null` if no location data is available for this activity or if the
  user associated with this activity couldn't be correlated with a user entity.
  """
  locationAssociatedWithUser: Boolean

  """
  The subnet label, as defined in the system configuration, associated with the
  origin endpoint IP address at the time the activity was performed.
  """
  networkTag: String

  """
  The subnet type, as defined in the system configuration, associated with the
  origin endpoint IP address at the time the activity was performed.
  """
  networkType: NetworkType!

  """
  Information about the origin endpoint operating system.
  """
  operatingSystemInfo: OperatingSystemInfo

  """
  The primary network protocol used for performing the activity.
  """
  protocolType: ProtocolType!
  protocolVersion: String

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  *Deprecated*: Use `TimelineUserOnEndpointActivityEvent:targetServiceType` instead
  """
  serviceType: ServiceType!
    @deprecated(
      reason: "`serviceType` is deprecated and will be removed in a future release"
    )
  sourceEntity: UserOrEndpointEntity

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The target endpoint associated with this activity (such as a domain controller), if any.
  """
  targetEndpointEntity: EndpointEntity

  """
  The target service entity.
  """
  targetEntity: Entity
  targetServiceDescription: String
  targetServiceDisplayName: String

  """
  *Deprecated*: Use `TimelineUserOnEndpointActivityEvent:targetEntity` instead
  """
  targetServiceEntity: Entity!
    @deprecated(
      reason: "`targetServiceEntity` is deprecated and will be removed in a future release"
    )

  """
  The target service raw identifier.
  """
  targetServiceIdentifier: String

  """
  A classification value of the service accessed, based on the raw identifier
  (`targetServiceIdentifier`) and the target entity (`targetServiceEntity`).
  """
  targetServiceType: ServiceType

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
  tlsVersion: TlsVersion

  """
  A display-oriented label of the best available display name for the user
  associated with this event. `UserEntity:primaryDisplayName` is used if
  available. Otherwise, the raw user identifier used for performing this
  activity is applied.
  """
  userDisplayName: String!

  """
  The user entity associated with the activity, if available. Note that
  `userDisplayName` is available even when the entity is unknown.
  """
  userEntity: UserEntity
}

"""
A `timeline` event indicating a successful user authentication on an endpoint.
"""
type TimelineSuccessfulAuthenticationEvent implements TimelineAuthenticationEvent & TimelineUserOnEndpointActivityEvent & TimelineEvent {
  """
  If the activity is known to have occurred within an Active Directory site, this is set to the site's name.
  """
  activeDirectorySiteName: String

  """
  The authentication type.
  """
  authenticationType: AuthenticationType!
  browserInfo: BrowserInfo
  certificateBasedAuth: Boolean

  """
  The data source associated with this activity. Because the `DataSource`
  enumeration contains some fallback values for generic sources,
  `dataSourceVendorName` is provided as an alternative.
  """
  dataSource: DataSource!

  """
  A display-oriented label for the data source associated with the activity.
  """
  dataSourceVendorName: String
  deviceName: String

  """
  A display-oriented label reflecting the origin endpoint operating system, as
  exposed by the `operatingSystemInfo` field. The semantics of this value are
  not rrigorously restricted.
  Therefore, the data is supposed to used programmatically, it is always
  recommended to project the underlying `operatingSystemInfo` field instead.
  """
  deviceType: String

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A display-oriented label reflecting the best available display name for the
  origin endpoint. `EndpointEntity:primaryDisplayName` is used if available,
  otherwise either `hostName` or `ipAddress` may be used as a fallback option.
  """
  endpointDisplayName: String

  """
  The origin endpoint entity associated with the activity, if available. Note
  that `endpointDisplayName` is available even when the entity is unknown.
  """
  endpointEntity: EndpointEntity

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  The geolocation associated with the activity, if any.
  """
  geoLocation: GeoLocation

  """
  The origin endpoint host name.
  """
  hostName: String

  """
  The origin endpoint IP address, if available.
  """
  ipAddress: IpAddress
  ipAddressReputations: [IpReputation!]!
  ispClassification: IspClassification
  ispDomain: String

  """
  The list of Kerberos encryption types specified by the client. Only set for
  activities performed over the Kerberos protocol (see `protocolType`),
  """
  kerberosEncryptionTypes: [KerberosEncryptionType!]
  ldapSecurityType: LdapSecurityType

  """
  If `true`, `userEntity` is associated with `geoLocation` by a `BindingType:GEO_LOCATION` `association`.

  Returns `null` if no location data is available for this activity or if the
  user associated with this activity couldn't be correlated with a user entity.
  """
  locationAssociatedWithUser: Boolean

  """
  The subnet label, as defined in the system configuration, associated with the
  origin endpoint IP address at the time the activity was performed.
  """
  networkTag: String

  """
  The subnet type, as defined in the system configuration, associated with the
  origin endpoint IP address at the time the activity was performed.
  """
  networkType: NetworkType!

  """
  Information about the origin endpoint operating system.
  """
  operatingSystemInfo: OperatingSystemInfo

  """
  The primary network protocol used for performing the activity.
  """
  protocolType: ProtocolType!
  protocolVersion: String

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection
  smbDialect: SmbDialect
  sourceEntity: UserOrEndpointEntity

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The target endpoint associated with this activity (such as a domain controller), if any.
  """
  targetEndpointEntity: EndpointEntity

  """
  The target service entity.
  """
  targetEntity: Entity
  targetServiceDescription: String
  targetServiceDisplayName: String

  """
  The target service raw identifier.
  """
  targetServiceIdentifier: String

  """
  A classification value of the service accessed, based on the raw identifier
  (`targetServiceIdentifier`) and the target entity (`targetServiceEntity`).
  """
  targetServiceType: ServiceType

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
  tlsVersion: TlsVersion

  """
  A display-oriented label of the best available display name for the user
  associated with this event. `UserEntity:primaryDisplayName` is used if
  available. Otherwise, the raw user identifier used for performing this
  activity is applied.
  """
  userDisplayName: String!

  """
  The user entity associated with the activity, if available. Note that
  `userDisplayName` is available even when the entity is unknown.
  """
  userEntity: UserEntity
}

"""
A common interface for all events exposed by the `timeline` API.
"""
interface TimelineSystemConfigurationEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!
  systemComponent: SystemComponent!
  systemUser: SystemUser

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A common interface for all events exposed by the `timeline` API.
"""
type TimelineToolDeletedEvent implements TimelineSystemConfigurationEvent & TimelineAuditEvent & TimelineEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!
  name: String!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!
  systemComponent: SystemComponent!
  systemUser: SystemUser

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A `TimelineEvent` interface common to system notification `timeline` events.
"""
type TimelineToolFailureEvent implements TimelineNotificationEvent & TimelineErrorEvent & TimelineEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  Information regarding the error.
  """
  errorDetails: ErrorDetails!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!
  name: String!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The system notification status.
  """
  state: NotificationState!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A `timeline` event type indicating a potential coverage issue for some domain controller traffic.
"""
type TimelineUncoveredDomainControllerEvent implements TimelineDomainControllerNotificationEvent & TimelineNotificationEvent & TimelineEvent {
  """
  The domain controller's domain.
  """
  domain: String!

  """
  The domain controller entity.
  """
  domainControllerEntity: EndpointEntity!

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The system notification status.
  """
  state: NotificationState!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A common interface for all events exposed by the `timeline` API.
"""
interface TimelineUserEngagementChangedEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!
  systemComponent: SystemComponent!
  systemUser: SystemUser

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

"""
A `TimelineEvent` interface common to `timeline` events related to end user
activity on endpoints, such as authentication and service access activities.
This is the primary interface to be used in projections when querying the
timeline for `user` activities.

When available, the user and endpoint `Entity` data is exposed through the
corresponding fields. However, in some cases the data regarding the user or
endpoint may be too limited to be associated with particular entities. For
example, a `FAILED_AUTHENTICATION` event may be a result of a misspelled user
name, and a `SUCCESSFUL_AUTHENTICATION` may originate outside the organization,
limiting the available data about the source endpoint. For this reason,
additional fields exposing more elementary data are also available, alongside
the `Entity` fields.
"""
interface TimelineUserOnEndpointActivityEvent {
  """
  If the activity is known to have occurred within an Active Directory site, this is set to the site's name.
  """
  activeDirectorySiteName: String
  browserInfo: BrowserInfo

  """
  The data source associated with this activity. Because the `DataSource`
  enumeration contains some fallback values for generic sources,
  `dataSourceVendorName` is provided as an alternative.
  """
  dataSource: DataSource!

  """
  A display-oriented label for the data source associated with the activity.
  """
  dataSourceVendorName: String
  deviceName: String

  """
  A display-oriented label reflecting the origin endpoint operating system, as
  exposed by the `operatingSystemInfo` field. The semantics of this value are
  not rrigorously restricted.
  Therefore, the data is supposed to used programmatically, it is always
  recommended to project the underlying `operatingSystemInfo` field instead.
  """
  deviceType: String

  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  A display-oriented label reflecting the best available display name for the
  origin endpoint. `EndpointEntity:primaryDisplayName` is used if available,
  otherwise either `hostName` or `ipAddress` may be used as a fallback option.
  """
  endpointDisplayName: String

  """
  The origin endpoint entity associated with the activity, if available. Note
  that `endpointDisplayName` is available even when the entity is unknown.
  """
  endpointEntity: EndpointEntity

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  The geolocation associated with the activity, if any.
  """
  geoLocation: GeoLocation

  """
  The origin endpoint host name.
  """
  hostName: String

  """
  The origin endpoint IP address, if available.
  """
  ipAddress: IpAddress
  ipAddressReputations: [IpReputation!]!
  ispClassification: IspClassification
  ispDomain: String
  ldapSecurityType: LdapSecurityType

  """
  If `true`, `userEntity` is associated with `geoLocation` by a `BindingType:GEO_LOCATION` `association`.

  Returns `null` if no location data is available for this activity or if the
  user associated with this activity couldn't be correlated with a user entity.
  """
  locationAssociatedWithUser: Boolean

  """
  The subnet label, as defined in the system configuration, associated with the
  origin endpoint IP address at the time the activity was performed.
  """
  networkTag: String

  """
  The subnet type, as defined in the system configuration, associated with the
  origin endpoint IP address at the time the activity was performed.
  """
  networkType: NetworkType!

  """
  Information about the origin endpoint operating system.
  """
  operatingSystemInfo: OperatingSystemInfo

  """
  The primary network protocol used for performing the activity.
  """
  protocolType: ProtocolType!
  protocolVersion: String

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection
  sourceEntity: UserOrEndpointEntity

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The target endpoint associated with this activity (such as a domain controller), if any.
  """
  targetEndpointEntity: EndpointEntity

  """
  The target service entity.
  """
  targetEntity: Entity
  targetServiceDescription: String
  targetServiceDisplayName: String

  """
  The target service raw identifier.
  """
  targetServiceIdentifier: String

  """
  A classification value of the service accessed, based on the raw identifier
  (`targetServiceIdentifier`) and the target entity (`targetServiceEntity`).
  """
  targetServiceType: ServiceType

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
  tlsVersion: TlsVersion

  """
  A display-oriented label of the best available display name for the user
  associated with this event. `UserEntity:primaryDisplayName` is used if
  available. Otherwise, the raw user identifier used for performing this
  activity is applied.
  """
  userDisplayName: String!

  """
  The user entity associated with the activity, if available. Note that
  `userDisplayName` is available even when the entity is unknown.
  """
  userEntity: UserEntity
}

"""
A `timeline` event indicating that the system has detected a weak password set for some user.
"""
type TimelineWeakPasswordEvent implements TimelineEntityEvent & TimelineEvent {
  """
  The event end time. For non-continuous events, its value is identical with `startTime` and `timestamp`.
  """
  endTime: DateTime!

  """
  The `Entity` associated with this event.
  """
  entity: Entity!

  """
  A unique identifier for the event. The event ID can later be used either to
  re-fetch the event or to query related events using the  `relatedTo`
  `timeline` query argument.
  """
  eventId: EventId!

  """
  The display name for the event. This is typically based on the event type, but
  may also depend on additional data, such as the event data source. There are
  no strict guidelines for the semantics or structure of this value for each
  event type, and they may change at any time. **This is merely a display value
  and it should be treated as such. For programmatic purposes, always prefer the
  raw data fields.**
  """
  eventLabel: String!

  """
  The event severity. Defaults to `NEUTRAL`.
  """
  eventSeverity: TimelineEventSeverity!

  """
  The event type.
  """
  eventType: TimelineEventType!

  """
  A connection of related events.
  """
  relatedEvents(
    activityQuery: ActivityQueryInput

    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor
    alertQuery: AlertQueryInput

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor
    categories: [TimelineEventCategory!]
    endTime: DateTimeInput
    eventIds: [EventId!]

    """
    Query up to the first specified number of entries.
    """
    first: Int
    incidentIds: [String!]

    """
    Query up to the last specified number of entries.
    """
    last: Int
    open: Boolean
    policyQuery: PolicyQueryInput
    severities: [TimelineEventSeverity!]

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING
    sourceEndpointQuery: EntityQueryInput
    sourceEntityQuery: EntityQueryInput
    startTime: DateTimeInput
    systemNotificationQuery: SystemNotificationQueryInput
    targetEndpointQuery: EntityQueryInput
    targetEntityQuery: EntityQueryInput
    types: [TimelineEventType!]
  ): TimelineEventConnection

  """
  An alias for the `timestamp` field. Use it in conjunction with `endTime` for continuous events.
  """
  startTime: DateTime!

  """
  The event start time. This is the primary sort-key in `timeline` queries.
  """
  timestamp: DateTime!
}

enum TlsVersion {
  TLS_NO_VERSION
  TLS_V1_0
  TLS_V1_1
  TLS_V1_2
  TLS_V1_3
}

scalar Token

input TrafficInspectionExclusionListInput {
  ip: String!
  port: Int
  protocol: TrafficInspectionExclusionListProtocol
}

enum TrafficInspectionExclusionListProtocol {
  TCP
  UDP
}

enum TrafficInspectionExclusionListStatus {
  ACTIVE
  PENDING_ADD
  PENDING_REMOVE
  FAILED_ADD
}

type UnconstrainedServiceDelegationAdminRole implements ServiceDelegationAdminRole & EffectiveAdminRole & AdminAccountRole & EntityRole {
  affectedEntities: [Entity!]!
  authorizingContainingEntitiesIds: [UUID!]!
  authorizingGroupIds: [UUID!]!
  builtin: Boolean!
  confirmed: Boolean!
  effectedEntityIds: [UUID!] @deprecated(reason: "Use affectedEntities instead")
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

scalar URI

enum UserAccountControlFlags {
  SCRIPT
  ACCOUNTDISABLE
  HOMEDIR_REQUIRED
  LOCKOUT
  PASSWD_NOTREQD
  PASSWD_CANT_CHANGE
  ENCRYPTED_TEXT_PWD_ALLOWED
  TEMP_DUPLICATE_ACCOUNT
  NORMAL_ACCOUNT
  INTERDOMAIN_TRUST_ACCOUNT
  WORKSTATION_TRUST_ACCOUNT
  SERVER_TRUST_ACCOUNT
  DONT_EXPIRE_PASSWORD
  MNS_LOGON_ACCOUNT
  SMARTCARD_REQUIRED
  TRUSTED_FOR_DELEGATION
  NOT_DELEGATED
  USE_DES_KEY_ONLY
  DONT_REQ_PREAUTH
  PASSWORD_EXPIRED
  TRUSTED_TO_AUTH_FOR_DELEGATION
  PARTIAL_SECRETS_ACCOUNT
}

"""
An account descriptor provides data associated with an external entity source,
such as an entry in an identity management system.
"""
interface UserAccountDescriptor {
  """
  If `true`, the account no longer exists; if `false`, the account is currently enabled.
  """
  archived: Boolean!
  containingEntities: [EntityContainerEntity!]!
  creationTime: DateTime!

  """
  The data source of this account. Together with the entity type, the data
  source determines the account descriptor subtype to be used.
  """
  dataSource: DataSource!
  department: String
  description: String

  """
  If `true`, the account is currently enabled; if `false`, the account no longer exists.
  """
  enabled: Boolean!
  passwordAttributes: PasswordAttributes
  title: String
}

"""
A specialized `Entity` interface for users, used when `Entity:type` is `USER`.

Bear in mind that the entity type, as opposed to its classification, is a
structural attribute. If you wish to differentiate between human and
programmatic user entities, check their classification (see `roles` field).
"""
type UserEntity implements UserOrEndpointEntity & ActivityParticipatingEntity & Entity {
  """
  A list of external, elementary account descriptors used to construct this
  entity. For instance, the list for a `UserEntity` which is backed by an LDAP
  domain entry and an IDAAS account will include
  `ActiveDirectoryAccountDescriptor` and `SsoUserAccountDescriptor` entries.
  """
  accounts: [AccountDescriptor!]!

  """
  If `true`, the system considers this entity *archived*. It means that the entity no longer exists and can only be viewed.

  For entities derived with external data sources, such as LDAP users, an entity
  is considered archived if its primary account (see `Entity:primaryAccount` is
  deleted. Entities not associated with any external sources, such as unmanaged
  endpoints, may also be archived based on a long period of inactivity. Except
  the `archived` attribute itself, no other attribute of an archived entity is
  updated. The attributes of an archived entity represent the state of the
  entity at the time when it was archived.
  """
  archived: Boolean!

  """
  A list of associations of various types (see `Association:bindingType`) that
  this entity has with other objects, most commonly with other entities. For
  example, a `UserEntity` may have an `OWNERSHIP` association with an
  `EndpointEntity`, alongside a `GEO_LOCATION` association with a `GeoLocation`.
  The semantics for each association type are detailed in `BindingType`.
  """
  associations(bindingTypes: [BindingType!]): [Association!]!
  authorizerEntity: UserEntity
    @deprecated(
      reason: "to retrieve authorizer data use associations(bindingTypes: AUTHORIZED)"
    )
  creationTime: DateTime!

  """
  The date and time of the entity's earliest recorded network activity. This
  takes into account both the data reported by external sources and the actual
  traffic seen by the system.
  """
  earliestSeenTraffic: DateTime

  """
  The list of unique email addresses available for this entity from all known data sources.
  """
  emailAddresses: [String!]!

  """
  The entity's unique identifier.
  """
  entityId: UUID!
  hasADDomainAdminRole: Boolean

  """
  A convenience function that checks the `roles` field for the existence of at least one role matching the criteria.

  ```graphql
  {
    entities(minRiskScoreSeverity: MEDIUM, archived: false, first: 5)
    {
      nodes
      {
        type
        primaryDisplayName
        ... on UserEntity
        {
          isHuman: hasRole(type: HumanUserAccountRole)
          isProgrammatic: hasRole(type: ProgrammaticUserAccountRole)
          isAdmin: hasRole(type: AdminAccountRole)
        }
        ... on EndpointEntity
        {
          isWorkstation: hasRole(type: WorkstationRole)
          isServer: hasRole(type: WorkstationRole)
        }
        isManuallyClassified: hasRole(confirmed: true)
      }
    }
  }
  ```
  """
  hasRole(
    confirmed: Boolean
    fullPath: String
    probability: Float
    type: EntityRoleType
  ): Boolean

  """
  The latest calculated impact score for this entity.
  """
  impactScore: ZeroToOneNumber!

  """
  If `true`, the entity is inactive. An entity is considered inactive after 21
  days since its latest recorded network activity (see `mostRecentActivity`).
  """
  inactive: Boolean!

  """
  If `true`, the system has gathered enough information to consider this entity *learned*.
  """
  learned: Boolean!
  linkedAccountIds: [UUID]

  """
  For marked entities, this is set to the last time the entity was marked.
  """
  markTime: DateTime

  """
  The date and time of the entity's latest recorded network activity. This takes
  into account both the data reported by external sources and the actual traffic
  seen by the system.
  """
  mostRecentActivity: DateTime

  """
  Query open incidents for this entity.
  """
  openIncidents(
    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Query by any value of `AlertType`. At least one of the alerts for an
    incident should be of any of the given alert types for the incident to match.
    """
    alertTypes: [AlertType!]

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Query for incidents created on or after the specific date.
    """
    createdAfter: DateTimeInput

    """
    Query for incidents created before the specific date.
    """
    createdBefore: DateTimeInput

    """
    Query by the attributes of any entity involved in a `compromisedEntities` incident (see `Incident:compromisedEntities`).
    """
    entityQuery: EntityQueryInput

    """
    Query up to the first specified number of entries.
    """
    first: Int

    """
    Query up to the last specified number of entries.
    """
    last: Int

    """
    Query by any value of `Incident:lifeCycleStage`.
    """
    lifeCycleStages: [IncidentLifeCycleStage!]
    nameSearch: String
    patternIds: [Int!]

    """
    Query by any value of `Incident:severity`.
    """
    severities: [IncidentSeverity!]

    """
    Use the specified key as the primary sort-key to sort the results by.
    """
    sortKey: IncidentSortKey = INCIDENT_ID

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING

    """
    Query by any value of `Incident:type`.
    """
    types: [IncidentType!]

    """
    Query for incidents updated on or after the specific date.
    """
    updatedAfter: DateTimeInput

    """
    Query for incidents updated before the specific date.
    """
    updatedBefore: DateTimeInput
  ): IncidentConnection
    @deprecated(
      reason: "\"openIncidents\" is deprecated and will be removed in a future release"
    )

  """
  The primary display name representing this user in user-facing data. This is
  derived from the explicit display name or an analogous attribute of the user's
  primary account.
  """
  primaryDisplayName: String!

  """
  A list of risk factors contributing to the overall risk of this entity, sorted
  by `RiskFactorContribution:score` in descending order.
  """
  riskFactors(types: [RiskFactorType!]): [EntityRiskFactor!]!

  """
  The entity's risk score represented as a number from 0 (no or unknown risk) through 1 (maximum risk).
  """
  riskScore: ZeroToOneNumber!

  """
  The entity's risk score derived from `riskScore`.
  """
  riskScoreSeverity: ScoreSeverity!
  riskScoreWithoutLinkedAccounts: ZeroToOneNumber!

  """
  A list of roles fulfilled by this entity, each defining the entity's classification or organizational-function aspect.

  For example, a `UserEntity` representing an *account operator* in an Active
  Directory domain should have an `AccountOperatorsAdminRole` entry on this
  list. Should the system later learn this privileged account is used by a
  script rather than a human, its associated entity will also have a
  `ProgrammaticUserAccountRole`. Similarly, when the system learns that some
  `EndpointEntity` belongs to a VDI cluster, it tags it with a
  `VdiEndpointRole`.The model for roles is hierarchical. For example, the
  aforementioned `AccountOperatorsAdminRole` is a specialization of
  `OperatorLevelAdminRole`, which by itself is a specialization of
  `AdminAccountRole`.

  When roles are queried, this hierarchy is always taken into account.
  Therefore, querying an entity about the existence of a role also implies that
  all of its direct and indirect specializations will be queried too. This
  hierarchy is completely reflected by GraphQL inheritance. For instance, you
  can see that `ExchangeServerRole` implements `ApplicationServerRole`,  and
  that the latter implements `ServerRole`.

  For your convenience, `EntityRole:fullPath` can be projected on the role
  itself, reperesenting the role type ancestry as breadcrumbs. See
  `EntityRoleType` for query examples.
  """
  roles: [EntityRole!]

  """
  The secondary display name is used to represent unique name for this entity in the organization or the network.
  """
  secondaryDisplayName: String!

  """
  Returns `true` if the system considers this entity shared.
  """
  shared: Boolean!

  """
  If `true`, the entity is stale. An entity is considered stale after 90 days of
  inactivity (see `mostRecentActivity`), as long as it is still effectively part
  of the network. An account-based entity is not considered part of the network
  when all of its base accounts are disabled (see `primaryAccount` and
  `secondaryAccounts`).
  """
  stale: Boolean!

  """
  The entity type, which also determines the specialized Entity subclass to be returned (see `EntityType`).
  """
  type: EntityType!

  """
  If `true`, this entity appears on the system watchlist.
  """
  watched: Boolean!
}

enum UserEntityClassification {
  HUMAN
  PROGRAMMATIC
  EXECUTIVE
  HONEYTOKEN
}

"""
An abstract `Entity` interface similar to `UserEntity` and `EndpointEntity`. It is used to simplify common projections.
"""
interface UserOrEndpointEntity {
  """
  A list of external, elementary account descriptors used to construct this
  entity. For instance, the list for a `UserEntity` which is backed by an LDAP
  domain entry and an IDAAS account will include
  `ActiveDirectoryAccountDescriptor` and `SsoUserAccountDescriptor` entries.
  """
  accounts: [AccountDescriptor!]!

  """
  If `true`, the system considers this entity *archived*. It means that the entity no longer exists and can only be viewed.

  For entities derived with external data sources, such as LDAP users, an entity
  is considered archived if its primary account (see `Entity:primaryAccount` is
  deleted. Entities not associated with any external sources, such as unmanaged
  endpoints, may also be archived based on a long period of inactivity. Except
  the `archived` attribute itself, no other attribute of an archived entity is
  updated. The attributes of an archived entity represent the state of the
  entity at the time when it was archived.
  """
  archived: Boolean!

  """
  A list of associations of various types (see `Association:bindingType`) that
  this entity has with other objects, most commonly with other entities. For
  example, a `UserEntity` may have an `OWNERSHIP` association with an
  `EndpointEntity`, alongside a `GEO_LOCATION` association with a `GeoLocation`.
  The semantics for each association type are detailed in `BindingType`.
  """
  associations(bindingTypes: [BindingType!]): [Association!]!
  creationTime: DateTime!

  """
  The date and time of the entity's earliest recorded network activity. This
  takes into account both the data reported by external sources and the actual
  traffic seen by the system.
  """
  earliestSeenTraffic: DateTime

  """
  The entity's unique identifier.
  """
  entityId: UUID!
  hasADDomainAdminRole: Boolean

  """
  A convenience function that checks the `roles` field for the existence of at least one role matching the criteria.

  ```graphql
  {
    entities(minRiskScoreSeverity: MEDIUM, archived: false, first: 5)
    {
      nodes
      {
        type
        primaryDisplayName
        ... on UserEntity
        {
          isHuman: hasRole(type: HumanUserAccountRole)
          isProgrammatic: hasRole(type: ProgrammaticUserAccountRole)
          isAdmin: hasRole(type: AdminAccountRole)
        }
        ... on EndpointEntity
        {
          isWorkstation: hasRole(type: WorkstationRole)
          isServer: hasRole(type: WorkstationRole)
        }
        isManuallyClassified: hasRole(confirmed: true)
      }
    }
  }
  ```
  """
  hasRole(
    confirmed: Boolean
    fullPath: String
    probability: Float
    type: EntityRoleType
  ): Boolean

  """
  The latest calculated impact score for this entity.
  """
  impactScore: ZeroToOneNumber!

  """
  If `true`, the entity is inactive. An entity is considered inactive after 21
  days since its latest recorded network activity (see `mostRecentActivity`).
  """
  inactive: Boolean!

  """
  If `true`, the system has gathered enough information to consider this entity *learned*.
  """
  learned: Boolean!

  """
  For marked entities, this is set to the last time the entity was marked.
  """
  markTime: DateTime

  """
  The date and time of the entity's latest recorded network activity. This takes
  into account both the data reported by external sources and the actual traffic
  seen by the system.
  """
  mostRecentActivity: DateTime

  """
  Query open incidents for this entity.
  """
  openIncidents(
    """
    Query the entries in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Query by any value of `AlertType`. At least one of the alerts for an
    incident should be of any of the given alert types for the incident to match.
    """
    alertTypes: [AlertType!]

    """
    Query the entries in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Query for incidents created on or after the specific date.
    """
    createdAfter: DateTimeInput

    """
    Query for incidents created before the specific date.
    """
    createdBefore: DateTimeInput

    """
    Query by the attributes of any entity involved in a `compromisedEntities` incident (see `Incident:compromisedEntities`).
    """
    entityQuery: EntityQueryInput

    """
    Query up to the first specified number of entries.
    """
    first: Int

    """
    Query up to the last specified number of entries.
    """
    last: Int

    """
    Query by any value of `Incident:lifeCycleStage`.
    """
    lifeCycleStages: [IncidentLifeCycleStage!]
    nameSearch: String
    patternIds: [Int!]

    """
    Query by any value of `Incident:severity`.
    """
    severities: [IncidentSeverity!]

    """
    Use the specified key as the primary sort-key to sort the results by.
    """
    sortKey: IncidentSortKey = INCIDENT_ID

    """
    The sort-order in which to return the results.
    """
    sortOrder: SortOrder = ASCENDING

    """
    Query by any value of `Incident:type`.
    """
    types: [IncidentType!]

    """
    Query for incidents updated on or after the specific date.
    """
    updatedAfter: DateTimeInput

    """
    Query for incidents updated before the specific date.
    """
    updatedBefore: DateTimeInput
  ): IncidentConnection
    @deprecated(
      reason: "\"openIncidents\" is deprecated and will be removed in a future release"
    )

  """
  The primary display name used to represent this entity in user-facing data.

  The primary display name is typically shorter than the secondary display name,
  but is much less likely to be unique across the organization or network. For
  further details on the semantics, see the documentation for specific types.
  """
  primaryDisplayName: String!

  """
  A list of risk factors contributing to the overall risk of this entity, sorted
  by `RiskFactorContribution:score` in descending order.
  """
  riskFactors(types: [RiskFactorType!]): [EntityRiskFactor!]!

  """
  The entity's risk score represented as a number from 0 (no or unknown risk) through 1 (maximum risk).
  """
  riskScore: ZeroToOneNumber!

  """
  The entity's risk score derived from `riskScore`.
  """
  riskScoreSeverity: ScoreSeverity!

  """
  A list of roles fulfilled by this entity, each defining the entity's classification or organizational-function aspect.

  For example, a `UserEntity` representing an *account operator* in an Active
  Directory domain should have an `AccountOperatorsAdminRole` entry on this
  list. Should the system later learn this privileged account is used by a
  script rather than a human, its associated entity will also have a
  `ProgrammaticUserAccountRole`. Similarly, when the system learns that some
  `EndpointEntity` belongs to a VDI cluster, it tags it with a
  `VdiEndpointRole`.The model for roles is hierarchical. For example, the
  aforementioned `AccountOperatorsAdminRole` is a specialization of
  `OperatorLevelAdminRole`, which by itself is a specialization of
  `AdminAccountRole`.

  When roles are queried, this hierarchy is always taken into account.
  Therefore, querying an entity about the existence of a role also implies that
  all of its direct and indirect specializations will be queried too. This
  hierarchy is completely reflected by GraphQL inheritance. For instance, you
  can see that `ExchangeServerRole` implements `ApplicationServerRole`,  and
  that the latter implements `ServerRole`.

  For your convenience, `EntityRole:fullPath` can be projected on the role
  itself, reperesenting the role type ancestry as breadcrumbs. See
  `EntityRoleType` for query examples.
  """
  roles: [EntityRole!]

  """
  The secondary display name is used to represent unique name for this entity in the organization or the network.
  """
  secondaryDisplayName: String!

  """
  Returns `true` if the system considers this entity shared.
  """
  shared: Boolean!

  """
  If `true`, the entity is stale. An entity is considered stale after 90 days of
  inactivity (see `mostRecentActivity`), as long as it is still effectively part
  of the network. An account-based entity is not considered part of the network
  when all of its base accounts are disabled (see `primaryAccount` and
  `secondaryAccounts`).
  """
  stale: Boolean!

  """
  The entity type, which also determines the specialized Entity subclass to be returned (see `EntityType`).
  """
  type: EntityType!

  """
  If `true`, this entity appears on the system watchlist.
  """
  watched: Boolean!
}

type UsesLocallyAdministratedMachinesRiskFactor implements EntityRiskFactor {
  locallyAdministratedMachines: [EndpointEntity!]!
  score: ZeroToOneNumber!
  severity: ScoreSeverity!
  type: RiskFactorType!
}

"""
A valid UUID string.
"""
scalar UUID

type VdiEndpointRole implements ClassificationRole & EntityRole {
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

"""
Input type for searching by using partial strings.

Wildcard search is case-insensitive and support the following functionalities:

| Wildcard | Description | Example |
| ---------- | ------------- | ---------- |
| **\*** | Asterisks match zero or more characters in the search term | `adm*`
will find items such as *Admin*, *administrator* and *adm* but will not find
*New admin* or *addmin* |
| **?** | Question marks match exactly one character in the search term | `sa?e`
will find items such as *sale*, *SAFE* and *save* but will not find *sabre* or *sae* |
| **!** | Exclamation mark exclude the matching pattern from the search | `!(user)*` will find all items except for *user* |

Please note:
* ** Wildcard search might take longer than regular search.** Searches for exact
values should use the regular parameters (e.g. when possible, use
`primaryDisplayNames` instead of `primaryDisplayNamePattern`).
* To search a literal wildcard character, escape it with a `\` character.

```graphql
{
    # Filtering by partial primaryDisplayName to get all admin-named entities
    adminAsPartOfPrimaryDisplayName: entities(primaryDisplayNamePattern: "*admin*"
        archived: false
        first: 10)
    {
        nodes {
            entityId
            primaryDisplayName
            secondaryDisplayName
            roles
            {
                type
            }
        }
    }

    # Exclude users with .com email address from search
    usersInformationExcludingEmailPattern: entities(types: [USER]
        emailAddressPattern: "!(*.com)"
        first: 10)
    {
        nodes
        {
            entityId
            primaryDisplayName
            secondaryDisplayName
            isHuman: hasRole(type: HumanUserAccountRole)
            isProgrammatic: hasRole(type: ProgrammaticUserAccountRole)
            ... on UserEntity
            {
                emailAddresses
            }
        }
    }
}
```
"""
scalar WildcardPattern

type WorkstationRole implements ClassificationRole & EntityRole {
  confirmed: Boolean!
  fullPath: String
  probability: Float
  type: EntityRoleType!
}

"""
A real number in the range `[0, 1]`, typically used for representing probability, ratio and percentage values.
"""
scalar ZeroToOneNumber
